call javaapi#namespace('sun.font')

call javaapi#class('AttributeMap', 'AbstractMap', [
  \ javaapi#method(0,1,'AttributeMap(', 'AttributeValues)', ''),
  \ javaapi#method(0,1,'entrySet(', ')', 'Object>>'),
  \ javaapi#method(0,1,'put(', 'TextAttribute, Object)', 'Object'),
  \ javaapi#method(0,1,'getValues(', ')', 'AttributeValues'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'put(', 'Object, Object)', 'Object'),
  \ ])

call javaapi#class('BidiUtils', '', [
  \ javaapi#method(0,1,'BidiUtils(', ')', ''),
  \ javaapi#method(1,1,'getLevels(', 'Bidi, byte[], int)', 'void'),
  \ javaapi#method(1,1,'getLevels(', 'Bidi)', 'byte'),
  \ javaapi#method(1,1,'createVisualToLogicalMap(', 'byte[])', 'int'),
  \ javaapi#method(1,1,'createInverseMap(', 'int[])', 'int'),
  \ javaapi#method(1,1,'createContiguousOrder(', 'int[])', 'int'),
  \ javaapi#method(1,1,'createNormalizedMap(', 'int[], byte[], int, int)', 'int'),
  \ javaapi#method(1,1,'reorderVisually(', 'byte[], Object[])', 'void'),
  \ ])

call javaapi#class('CreatedFontTracker', '', [
  \ javaapi#field(1,1,'MAX_FILE_SIZE', 'int'),
  \ javaapi#field(1,1,'MAX_TOTAL_BYTES', 'int'),
  \ javaapi#method(0,1,'CreatedFontTracker(', ')', ''),
  \ javaapi#method(1,1,'getTracker(', ')', 'CreatedFontTracker'),
  \ javaapi#method(0,1,'getNumBytes(', ')', 'int'),
  \ javaapi#method(0,1,'addBytes(', 'int)', 'void'),
  \ javaapi#method(0,1,'subBytes(', 'int)', 'void'),
  \ ])

call javaapi#class('Decoration', '', [
  \ javaapi#method(1,1,'getPlainDecoration(', ')', 'Decoration'),
  \ javaapi#method(1,1,'getDecoration(', 'AttributeValues)', 'Decoration'),
  \ javaapi#method(1,1,'getDecoration(', 'Map)', 'Decoration'),
  \ javaapi#method(0,1,'drawTextAndDecorations(', 'Label, Graphics2D, float, float)', 'void'),
  \ javaapi#method(0,1,'getVisualBounds(', 'Label)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getCharVisualBounds(', 'Label, int)', 'Rectangle2D'),
  \ ])

call javaapi#class('DelegatingShape', 'Shape', [
  \ javaapi#method(0,1,'DelegatingShape(', 'Shape)', ''),
  \ javaapi#method(0,1,'getBounds(', ')', 'Rectangle'),
  \ javaapi#method(0,1,'getBounds2D(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'contains(', 'double, double)', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Point2D)', 'boolean'),
  \ javaapi#method(0,1,'intersects(', 'double, double, double, double)', 'boolean'),
  \ javaapi#method(0,1,'intersects(', 'Rectangle2D)', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'double, double, double, double)', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Rectangle2D)', 'boolean'),
  \ javaapi#method(0,1,'getPathIterator(', 'AffineTransform)', 'PathIterator'),
  \ javaapi#method(0,1,'getPathIterator(', 'AffineTransform, double)', 'PathIterator'),
  \ ])

call javaapi#class('ExtendedTextLabel', 'TextLabel', [
  \ javaapi#method(0,1,'ExtendedTextLabel(', ')', ''),
  \ javaapi#method(0,1,'getNumCharacters(', ')', 'int'),
  \ javaapi#method(0,1,'getCoreMetrics(', ')', 'CoreMetrics'),
  \ javaapi#method(0,1,'getCharX(', 'int)', 'float'),
  \ javaapi#method(0,1,'getCharY(', 'int)', 'float'),
  \ javaapi#method(0,1,'getCharAdvance(', 'int)', 'float'),
  \ javaapi#method(0,1,'getCharVisualBounds(', 'int, float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'logicalToVisual(', 'int)', 'int'),
  \ javaapi#method(0,1,'visualToLogical(', 'int)', 'int'),
  \ javaapi#method(0,1,'getLineBreakIndex(', 'int, float)', 'int'),
  \ javaapi#method(0,1,'getAdvanceBetween(', 'int, int)', 'float'),
  \ javaapi#method(0,1,'caretAtOffsetIsValid(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'getCharVisualBounds(', 'int)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getSubset(', 'int, int, int)', 'TextLineComponent'),
  \ javaapi#method(0,1,'getNumJustificationInfos(', ')', 'int'),
  \ javaapi#method(0,1,'getJustificationInfos(', 'GlyphJustificationInfo[], int, int, int)', 'void'),
  \ javaapi#method(0,1,'applyJustificationDeltas(', 'float[], int, boolean[])', 'TextLineComponent'),
  \ ])

call javaapi#class('ExtendedTextSourceLabel', 'ExtendedTextLabel', [
  \ javaapi#method(0,1,'ExtendedTextSourceLabel(', 'TextSource, Decoration)', ''),
  \ javaapi#method(0,1,'ExtendedTextSourceLabel(', 'TextSource, ExtendedTextSourceLabel, int)', ''),
  \ javaapi#method(0,1,'getLogicalBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getLogicalBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getAdvance(', ')', 'float'),
  \ javaapi#method(0,1,'getVisualBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getAlignBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getItalicBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getPixelBounds(', 'FontRenderContext, float, float)', 'Rectangle'),
  \ javaapi#method(0,1,'isSimple(', ')', 'boolean'),
  \ javaapi#method(0,1,'getBaselineTransform(', ')', 'AffineTransform'),
  \ javaapi#method(0,1,'handleGetOutline(', 'float, float)', 'Shape'),
  \ javaapi#method(0,1,'getOutline(', 'float, float)', 'Shape'),
  \ javaapi#method(0,1,'handleDraw(', 'Graphics2D, float, float)', 'void'),
  \ javaapi#method(0,1,'draw(', 'Graphics2D, float, float)', 'void'),
  \ javaapi#method(0,0,'createLogicalBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'handleGetVisualBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,0,'createAlignBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'createItalicBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,0,'createGV(', ')', 'StandardGlyphVector'),
  \ javaapi#method(0,1,'getNumCharacters(', ')', 'int'),
  \ javaapi#method(0,1,'getCoreMetrics(', ')', 'CoreMetrics'),
  \ javaapi#method(0,1,'getCharX(', 'int)', 'float'),
  \ javaapi#method(0,1,'getCharY(', 'int)', 'float'),
  \ javaapi#method(0,1,'getCharAdvance(', 'int)', 'float'),
  \ javaapi#method(0,1,'handleGetCharVisualBounds(', 'int)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getCharVisualBounds(', 'int, float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'logicalToVisual(', 'int)', 'int'),
  \ javaapi#method(0,1,'visualToLogical(', 'int)', 'int'),
  \ javaapi#method(0,1,'getLineBreakIndex(', 'int, float)', 'int'),
  \ javaapi#method(0,1,'getAdvanceBetween(', 'int, int)', 'float'),
  \ javaapi#method(0,1,'caretAtOffsetIsValid(', 'int)', 'boolean'),
  \ javaapi#method(0,0,'createCharinfo(', ')', 'float'),
  \ javaapi#method(0,0,'l2v(', 'int)', 'int'),
  \ javaapi#method(0,0,'v2l(', 'int)', 'int'),
  \ javaapi#method(0,1,'getSubset(', 'int, int, int)', 'TextLineComponent'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'getNumJustificationInfos(', ')', 'int'),
  \ javaapi#method(0,1,'getJustificationInfos(', 'GlyphJustificationInfo[], int, int, int)', 'void'),
  \ javaapi#method(0,1,'applyJustificationDeltas(', 'float[], int, boolean[])', 'TextLineComponent'),
  \ ])

call javaapi#class('FontAccess', '', [
  \ javaapi#method(0,1,'FontAccess(', ')', ''),
  \ javaapi#method(1,1,'setFontAccess(', 'FontAccess)', 'void'),
  \ javaapi#method(1,1,'getFontAccess(', ')', 'FontAccess'),
  \ javaapi#method(0,1,'getFont2D(', 'Font)', 'Font2D'),
  \ javaapi#method(0,1,'setFont2D(', 'Font, Font2DHandle)', 'void'),
  \ javaapi#method(0,1,'setCreatedFont(', 'Font)', 'void'),
  \ javaapi#method(0,1,'isCreatedFont(', 'Font)', 'boolean'),
  \ ])

call javaapi#class('FontManagerFactory', '', [
  \ javaapi#method(0,1,'FontManagerFactory(', ')', ''),
  \ javaapi#method(1,1,'getInstance(', ')', 'FontManager'),
  \ ])

call javaapi#interface('FontManagerForSGE', 'FontManager', [
  \ javaapi#method(0,1,'getCreatedFonts(', ')', 'Font'),
  \ javaapi#method(0,1,'getCreatedFontFamilyNames(', ')', 'String>'),
  \ javaapi#method(0,1,'getAllInstalledFonts(', ')', 'Font'),
  \ javaapi#method(0,1,'getInstalledFontFamilyNames(', 'Locale)', 'String'),
  \ javaapi#method(0,1,'useAlternateFontforJALocales(', ')', 'void'),
  \ ])

call javaapi#class('FontManagerNativeLibrary', '', [
  \ javaapi#method(0,1,'FontManagerNativeLibrary(', ')', ''),
  \ javaapi#method(1,1,'load(', ')', 'void'),
  \ ])

call javaapi#class('FontResolver', '', [
  \ javaapi#method(0,1,'getFontIndex(', 'char)', 'int'),
  \ javaapi#method(0,1,'getFontIndex(', 'int)', 'int'),
  \ javaapi#method(0,1,'nextFontRunIndex(', 'CodePointIterator)', 'int'),
  \ javaapi#method(0,1,'getFont(', 'int, Map)', 'Font'),
  \ javaapi#method(1,1,'getInstance(', ')', 'FontResolver'),
  \ ])

call javaapi#class('FontRunIterator', '', [
  \ javaapi#method(0,1,'FontRunIterator(', ')', ''),
  \ javaapi#method(0,1,'init(', 'CompositeFont, char[], int, int)', 'void'),
  \ javaapi#method(0,1,'getFont(', ')', 'PhysicalFont'),
  \ javaapi#method(0,1,'getGlyphMask(', ')', 'int'),
  \ javaapi#method(0,1,'getPos(', ')', 'int'),
  \ javaapi#method(0,1,'next(', 'int, int)', 'boolean'),
  \ javaapi#method(0,1,'next(', ')', 'boolean'),
  \ ])

call javaapi#class('FontScaler', 'DisposerRecord', [
  \ javaapi#field(0,0,'font', 'WeakReference'),
  \ javaapi#field(0,0,'nativeScaler', 'long'),
  \ javaapi#field(0,0,'disposed', 'boolean'),
  \ javaapi#method(0,1,'FontScaler(', ')', ''),
  \ javaapi#method(1,1,'getScaler(', 'Font2D, int, boolean, int)', 'FontScaler'),
  \ javaapi#method(1,1,'getNullScaler(', ')', 'FontScaler'),
  \ javaapi#method(0,1,'dispose(', ')', 'void'),
  \ ])

call javaapi#class('FontScalerException', 'Exception', [
  \ javaapi#method(0,1,'FontScalerException(', ')', ''),
  \ javaapi#method(0,1,'FontScalerException(', 'String)', ''),
  \ ])

call javaapi#class('FontUtilities', '', [
  \ javaapi#field(1,1,'isSolaris', 'boolean'),
  \ javaapi#field(1,1,'isLinux', 'boolean'),
  \ javaapi#field(1,1,'isSolaris8', 'boolean'),
  \ javaapi#field(1,1,'isSolaris9', 'boolean'),
  \ javaapi#field(1,1,'isOpenSolaris', 'boolean'),
  \ javaapi#field(1,1,'useT2K', 'boolean'),
  \ javaapi#field(1,1,'isWindows', 'boolean'),
  \ javaapi#field(1,1,'isOpenJDK', 'boolean'),
  \ javaapi#field(1,1,'MIN_LAYOUT_CHARCODE', 'int'),
  \ javaapi#field(1,1,'MAX_LAYOUT_CHARCODE', 'int'),
  \ javaapi#method(0,1,'FontUtilities(', ')', ''),
  \ javaapi#method(1,1,'getFont2D(', 'Font)', 'Font2D'),
  \ javaapi#method(1,1,'isComplexText(', 'char[], int, int)', 'boolean'),
  \ javaapi#method(1,1,'isNonSimpleChar(', 'char)', 'boolean'),
  \ javaapi#method(1,1,'isComplexCharCode(', 'int)', 'boolean'),
  \ javaapi#method(1,1,'getLogger(', ')', 'PlatformLogger'),
  \ javaapi#method(1,1,'isLogging(', ')', 'boolean'),
  \ javaapi#method(1,1,'debugFonts(', ')', 'boolean'),
  \ javaapi#method(1,1,'fontSupportsDefaultEncoding(', 'Font)', 'boolean'),
  \ javaapi#method(1,1,'getCompositeFontUIResource(', 'Font)', 'FontUIResource'),
  \ javaapi#method(1,1,'mapFcName(', 'String)', 'String'),
  \ javaapi#method(1,1,'getFontConfigFUIR(', 'String, int, int)', 'FontUIResource'),
  \ javaapi#method(1,1,'textLayoutIsCompatible(', 'Font)', 'boolean'),
  \ ])

call javaapi#class('FreetypeFontScaler', 'FontScaler', [
  \ javaapi#method(0,1,'FreetypeFontScaler(', 'Font2D, int, boolean, int)', ''),
  \ javaapi#method(0,1,'dispose(', ')', 'void'),
  \ ])

call javaapi#interface('GlyphDisposedListener', '', [
  \ javaapi#method(0,1,'glyphDisposed(', 'ArrayList<Long>)', 'void'),
  \ ])

call javaapi#class('GlyphLayout', '', [
  \ javaapi#method(1,1,'get(', 'LayoutEngineFactory)', 'GlyphLayout'),
  \ javaapi#method(1,1,'done(', 'GlyphLayout)', 'void'),
  \ javaapi#method(0,1,'layout(', 'Font, FontRenderContext, char[], int, int, int, StandardGlyphVector)', 'StandardGlyphVector'),
  \ ])

call javaapi#class('GraphicComponent', 'Label', [
  \ javaapi#field(1,1,'GRAPHIC_LEADING', 'float'),
  \ javaapi#method(0,1,'GraphicComponent(', 'GraphicAttribute, Decoration, int[], byte[], int, int, AffineTransform)', ''),
  \ javaapi#method(0,1,'isSimple(', ')', 'boolean'),
  \ javaapi#method(0,1,'getPixelBounds(', 'FontRenderContext, float, float)', 'Rectangle'),
  \ javaapi#method(0,1,'handleGetVisualBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getCoreMetrics(', ')', 'CoreMetrics'),
  \ javaapi#method(1,1,'createCoreMetrics(', 'GraphicAttribute)', 'CoreMetrics'),
  \ javaapi#method(0,1,'getItalicAngle(', ')', 'float'),
  \ javaapi#method(0,1,'getVisualBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'handleGetOutline(', 'float, float)', 'Shape'),
  \ javaapi#method(0,1,'getBaselineTransform(', ')', 'AffineTransform'),
  \ javaapi#method(0,1,'getOutline(', 'float, float)', 'Shape'),
  \ javaapi#method(0,1,'handleDraw(', 'Graphics2D, float, float)', 'void'),
  \ javaapi#method(0,1,'draw(', 'Graphics2D, float, float)', 'void'),
  \ javaapi#method(0,1,'getCharVisualBounds(', 'int)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getNumCharacters(', ')', 'int'),
  \ javaapi#method(0,1,'getCharX(', 'int)', 'float'),
  \ javaapi#method(0,1,'getCharY(', 'int)', 'float'),
  \ javaapi#method(0,1,'getCharAdvance(', 'int)', 'float'),
  \ javaapi#method(0,1,'caretAtOffsetIsValid(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'handleGetCharVisualBounds(', 'int)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getLineBreakIndex(', 'int, float)', 'int'),
  \ javaapi#method(0,1,'getAdvanceBetween(', 'int, int)', 'float'),
  \ javaapi#method(0,1,'getLogicalBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getAdvance(', ')', 'float'),
  \ javaapi#method(0,1,'getItalicBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getSubset(', 'int, int, int)', 'TextLineComponent'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'getNumJustificationInfos(', ')', 'int'),
  \ javaapi#method(0,1,'getJustificationInfos(', 'GlyphJustificationInfo[], int, int, int)', 'void'),
  \ javaapi#method(0,1,'applyJustificationDeltas(', 'float[], int, boolean[])', 'TextLineComponent'),
  \ ])

call javaapi#class('LayoutPathImpl', 'LayoutPath', [
  \ javaapi#method(0,1,'LayoutPathImpl(', ')', ''),
  \ javaapi#method(0,1,'pointToPath(', 'double, double)', 'Point2D'),
  \ javaapi#method(0,1,'pathToPoint(', 'double, double, boolean)', 'Point2D'),
  \ javaapi#method(0,1,'pointToPath(', 'double, double, Point2D)', 'void'),
  \ javaapi#method(0,1,'pathToPoint(', 'double, double, boolean, Point2D)', 'void'),
  \ javaapi#method(0,1,'start(', ')', 'double'),
  \ javaapi#method(0,1,'end(', ')', 'double'),
  \ javaapi#method(0,1,'length(', ')', 'double'),
  \ javaapi#method(0,1,'mapShape(', 'Shape)', 'Shape'),
  \ javaapi#method(1,1,'getPath(', 'EndType, )', 'LayoutPathImpl'),
  \ ])

call javaapi#class('NativeFont', 'PhysicalFont', [
  \ javaapi#method(0,1,'NativeFont(', 'String, boolean) throws FontFormatException', ''),
  \ javaapi#method(0,1,'getMapper(', ')', 'CharToGlyphMapper'),
  \ javaapi#method(0,1,'getMaxCharBounds(', 'FontRenderContext)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getGlyphOutline(', 'long, int, float, float)', 'GeneralPath'),
  \ javaapi#method(0,1,'getGlyphVectorOutline(', 'long, int[], int, float, float)', 'GeneralPath'),
  \ ])

call javaapi#class('NativeStrike', 'PhysicalStrike', [
  \ ])

call javaapi#class('NullFontScaler', 'FontScaler', [
  \ javaapi#method(0,1,'NullFontScaler(', 'Font2D, int, boolean, int)', ''),
  \ ])

call javaapi#class('Script', '', [
  \ javaapi#field(1,1,'INVALID_CODE', 'int'),
  \ javaapi#field(1,1,'COMMON', 'int'),
  \ javaapi#field(1,1,'INHERITED', 'int'),
  \ javaapi#field(1,1,'ARABIC', 'int'),
  \ javaapi#field(1,1,'ARMENIAN', 'int'),
  \ javaapi#field(1,1,'BENGALI', 'int'),
  \ javaapi#field(1,1,'BOPOMOFO', 'int'),
  \ javaapi#field(1,1,'CHEROKEE', 'int'),
  \ javaapi#field(1,1,'COPTIC', 'int'),
  \ javaapi#field(1,1,'CYRILLIC', 'int'),
  \ javaapi#field(1,1,'DESERET', 'int'),
  \ javaapi#field(1,1,'DEVANAGARI', 'int'),
  \ javaapi#field(1,1,'ETHIOPIC', 'int'),
  \ javaapi#field(1,1,'GEORGIAN', 'int'),
  \ javaapi#field(1,1,'GOTHIC', 'int'),
  \ javaapi#field(1,1,'GREEK', 'int'),
  \ javaapi#field(1,1,'GUJARATI', 'int'),
  \ javaapi#field(1,1,'GURMUKHI', 'int'),
  \ javaapi#field(1,1,'HAN', 'int'),
  \ javaapi#field(1,1,'HANGUL', 'int'),
  \ javaapi#field(1,1,'HEBREW', 'int'),
  \ javaapi#field(1,1,'HIRAGANA', 'int'),
  \ javaapi#field(1,1,'KANNADA', 'int'),
  \ javaapi#field(1,1,'KATAKANA', 'int'),
  \ javaapi#field(1,1,'KHMER', 'int'),
  \ javaapi#field(1,1,'LAO', 'int'),
  \ javaapi#field(1,1,'LATIN', 'int'),
  \ javaapi#field(1,1,'MALAYALAM', 'int'),
  \ javaapi#field(1,1,'MONGOLIAN', 'int'),
  \ javaapi#field(1,1,'MYANMAR', 'int'),
  \ javaapi#field(1,1,'OGHAM', 'int'),
  \ javaapi#field(1,1,'OLD_ITALIC', 'int'),
  \ javaapi#field(1,1,'ORIYA', 'int'),
  \ javaapi#field(1,1,'RUNIC', 'int'),
  \ javaapi#field(1,1,'SINHALA', 'int'),
  \ javaapi#field(1,1,'SYRIAC', 'int'),
  \ javaapi#field(1,1,'TAMIL', 'int'),
  \ javaapi#field(1,1,'TELUGU', 'int'),
  \ javaapi#field(1,1,'THAANA', 'int'),
  \ javaapi#field(1,1,'THAI', 'int'),
  \ javaapi#field(1,1,'TIBETAN', 'int'),
  \ javaapi#field(1,1,'CANADIAN_ABORIGINAL', 'int'),
  \ javaapi#field(1,1,'UCAS', 'int'),
  \ javaapi#field(1,1,'YI', 'int'),
  \ javaapi#field(1,1,'TAGALOG', 'int'),
  \ javaapi#field(1,1,'HANUNOO', 'int'),
  \ javaapi#field(1,1,'BUHID', 'int'),
  \ javaapi#field(1,1,'TAGBANWA', 'int'),
  \ javaapi#field(1,1,'CODE_LIMIT', 'int'),
  \ javaapi#method(0,1,'Script(', ')', ''),
  \ ])

call javaapi#class('ScriptRun', '', [
  \ javaapi#method(0,1,'ScriptRun(', ')', ''),
  \ javaapi#method(0,1,'ScriptRun(', 'char[], int, int)', ''),
  \ javaapi#method(0,1,'init(', 'char[], int, int)', 'void'),
  \ javaapi#method(0,1,'getScriptStart(', ')', 'int'),
  \ javaapi#method(0,1,'getScriptLimit(', ')', 'int'),
  \ javaapi#method(0,1,'getScriptCode(', ')', 'int'),
  \ javaapi#method(0,1,'next(', ')', 'boolean'),
  \ ])

call javaapi#class('ScriptRunData', '', [
  \ javaapi#method(1,1,'getScript(', 'int)', 'int'),
  \ ])

call javaapi#class('StandardTextSource', 'TextSource', [
  \ javaapi#method(0,1,'StandardTextSource(', 'char[], int, int, int, int, int, int, Font, FontRenderContext, CoreMetrics)', ''),
  \ javaapi#method(0,1,'StandardTextSource(', 'char[], int, int, int, int, Font, FontRenderContext, CoreMetrics)', ''),
  \ javaapi#method(0,1,'StandardTextSource(', 'char[], int, int, Font, FontRenderContext)', ''),
  \ javaapi#method(0,1,'StandardTextSource(', 'String, int, int, Font, FontRenderContext)', ''),
  \ javaapi#method(0,1,'getChars(', ')', 'char'),
  \ javaapi#method(0,1,'getStart(', ')', 'int'),
  \ javaapi#method(0,1,'getLength(', ')', 'int'),
  \ javaapi#method(0,1,'getContextStart(', ')', 'int'),
  \ javaapi#method(0,1,'getContextLength(', ')', 'int'),
  \ javaapi#method(0,1,'getLayoutFlags(', ')', 'int'),
  \ javaapi#method(0,1,'getBidiLevel(', ')', 'int'),
  \ javaapi#method(0,1,'getFont(', ')', 'Font'),
  \ javaapi#method(0,1,'getFRC(', ')', 'FontRenderContext'),
  \ javaapi#method(0,1,'getCoreMetrics(', ')', 'CoreMetrics'),
  \ javaapi#method(0,1,'getSubSource(', 'int, int, int)', 'TextSource'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'toString(', 'boolean)', 'String'),
  \ ])

call javaapi#class('SunFontManager', 'FontManagerForSGE', [
  \ javaapi#field(1,1,'FONTFORMAT_NONE', 'int'),
  \ javaapi#field(1,1,'FONTFORMAT_TRUETYPE', 'int'),
  \ javaapi#field(1,1,'FONTFORMAT_TYPE1', 'int'),
  \ javaapi#field(1,1,'FONTFORMAT_T2K', 'int'),
  \ javaapi#field(1,1,'FONTFORMAT_TTC', 'int'),
  \ javaapi#field(1,1,'FONTFORMAT_COMPOSITE', 'int'),
  \ javaapi#field(1,1,'FONTFORMAT_NATIVE', 'int'),
  \ javaapi#field(1,1,'lucidaFontName', 'String'),
  \ javaapi#field(1,1,'jreLibDirName', 'String'),
  \ javaapi#field(1,1,'jreFontDirName', 'String'),
  \ javaapi#field(0,0,'registeredFontFiles', 'HashSet'),
  \ javaapi#field(0,0,'fontPath', 'String'),
  \ javaapi#field(1,1,'noType1Font', 'boolean'),
  \ javaapi#method(1,1,'getInstance(', ')', 'SunFontManager'),
  \ javaapi#method(0,1,'getTrueTypeFilter(', ')', 'FilenameFilter'),
  \ javaapi#method(0,1,'getType1Filter(', ')', 'FilenameFilter'),
  \ javaapi#method(0,1,'usingPerAppContextComposites(', ')', 'boolean'),
  \ javaapi#method(0,1,'getEUDCFont(', ')', 'TrueTypeFont'),
  \ javaapi#method(0,0,'SunFontManager(', ')', ''),
  \ javaapi#method(0,1,'getNewComposite(', 'String, int, Font2DHandle)', 'Font2DHandle'),
  \ javaapi#method(0,0,'registerCompositeFont(', 'String, String[], String[], int, int[], int[], boolean)', 'void'),
  \ javaapi#method(1,0,'registerCompositeFont(', 'String, String[], String[], int, int[], int[], boolean, ConcurrentHashMap<String, Font2D>)', 'void'),
  \ javaapi#method(0,1,'getRegisteredFonts(', ')', 'Font2D'),
  \ javaapi#method(0,0,'getPhysicalFonts(', ')', 'PhysicalFont'),
  \ javaapi#method(0,0,'initialiseDeferredFonts(', ')', 'void'),
  \ javaapi#method(0,0,'registerDeferredJREFonts(', 'String)', 'void'),
  \ javaapi#method(0,1,'isDeferredFont(', 'String)', 'boolean'),
  \ javaapi#method(0,1,'findJREDeferredFont(', 'String, int)', 'PhysicalFont'),
  \ javaapi#method(0,1,'registerDeferredFont(', 'String, String, String[], int, boolean, int)', 'void'),
  \ javaapi#method(0,1,'initialiseDeferredFont(', 'String)', 'PhysicalFont'),
  \ javaapi#method(0,1,'isRegisteredFontFile(', 'String)', 'boolean'),
  \ javaapi#method(0,1,'getRegisteredFontFile(', 'String)', 'PhysicalFont'),
  \ javaapi#method(0,1,'registerFontFile(', 'String, String[], int, boolean, int)', 'PhysicalFont'),
  \ javaapi#method(0,1,'registerFonts(', 'String[], String[][], int, int, boolean, int, boolean)', 'void'),
  \ javaapi#method(0,1,'getDefaultPhysicalFont(', ')', 'PhysicalFont'),
  \ javaapi#method(0,1,'getDefaultLogicalFont(', 'int)', 'CompositeFont'),
  \ javaapi#method(0,0,'populateFontFileNameMap(', 'HashMap<String, String>, HashMap<String, String>, HashMap<String, ArrayList<String>>, Locale)', 'void'),
  \ javaapi#method(0,1,'populateHardcodedFileNameMap(', ')', 'FamilyDescription>'),
  \ javaapi#method(0,0,'getFontNamesFromPlatform(', ')', 'String'),
  \ javaapi#method(0,1,'gotFontsFromPlatform(', ')', 'boolean'),
  \ javaapi#method(0,1,'getFileNameForFontName(', 'String)', 'String'),
  \ javaapi#method(0,0,'registerOtherFontFiles(', 'HashSet)', 'void'),
  \ javaapi#method(0,1,'getFamilyNamesFromPlatform(', 'TreeMap<String, String>, Locale)', 'boolean'),
  \ javaapi#method(0,1,'findFont2D(', 'String, int, int)', 'Font2D'),
  \ javaapi#method(0,1,'usePlatformFontMetrics(', ')', 'boolean'),
  \ javaapi#method(0,1,'getNumFonts(', ')', 'int'),
  \ javaapi#method(0,0,'getFontPath(', 'boolean)', 'String'),
  \ javaapi#method(0,1,'createFont2D(', 'File, int, boolean, CreatedFontTracker) throws FontFormatException', 'Font2D'),
  \ javaapi#method(0,1,'getFullNameByFileName(', 'String)', 'String'),
  \ javaapi#method(0,1,'deRegisterBadFont(', 'Font2D)', 'void'),
  \ javaapi#method(0,1,'replaceFont(', 'PhysicalFont, PhysicalFont)', 'void'),
  \ javaapi#method(0,1,'maybeUsingAlternateCompositeFonts(', ')', 'boolean'),
  \ javaapi#method(0,1,'usingAlternateCompositeFonts(', ')', 'boolean'),
  \ javaapi#method(0,1,'useAlternateFontforJALocales(', ')', 'void'),
  \ javaapi#method(0,1,'usingAlternateFontforJALocales(', ')', 'boolean'),
  \ javaapi#method(0,1,'preferLocaleFonts(', ')', 'void'),
  \ javaapi#method(0,1,'preferProportionalFonts(', ')', 'void'),
  \ javaapi#method(0,1,'registerFont(', 'Font)', 'boolean'),
  \ javaapi#method(0,1,'getCreatedFontFamilyNames(', ')', 'String>'),
  \ javaapi#method(0,1,'getCreatedFonts(', ')', 'Font'),
  \ javaapi#method(0,0,'getPlatformFontDirs(', 'boolean)', 'String'),
  \ javaapi#method(0,1,'getDefaultPlatformFont(', ')', 'String'),
  \ javaapi#method(0,0,'getNativeNames(', 'String, String)', 'String'),
  \ javaapi#method(0,0,'getFileNameFromPlatformName(', 'String)', 'String'),
  \ javaapi#method(0,1,'getFontConfiguration(', ')', 'FontConfiguration'),
  \ javaapi#method(0,1,'getPlatformFontPath(', 'boolean)', 'String'),
  \ javaapi#method(1,1,'isOpenJDK(', ')', 'boolean'),
  \ javaapi#method(0,0,'loadFonts(', ')', 'void'),
  \ javaapi#method(0,0,'registerFontDirs(', 'String)', 'void'),
  \ javaapi#method(0,1,'registerFontsInDir(', 'String)', 'void'),
  \ javaapi#method(0,0,'registerFontDir(', 'String)', 'void'),
  \ javaapi#method(0,1,'getDefaultFontFile(', ')', 'String'),
  \ javaapi#method(0,0,'useAbsoluteFontFileNames(', ')', 'boolean'),
  \ javaapi#method(0,0,'createFontConfiguration(', ')', 'FontConfiguration'),
  \ javaapi#method(0,1,'createFontConfiguration(', 'boolean, boolean)', 'FontConfiguration'),
  \ javaapi#method(0,1,'getDefaultFontFaceName(', ')', 'String'),
  \ javaapi#method(0,1,'loadFontFiles(', ')', 'void'),
  \ javaapi#method(0,0,'addFontToPlatformFontPath(', 'String)', 'void'),
  \ javaapi#method(0,0,'registerFontFile(', 'String, String[], int, boolean)', 'void'),
  \ javaapi#method(0,0,'registerPlatformFontsUsedByFontConfiguration(', ')', 'void'),
  \ javaapi#method(0,0,'addToMissingFontFileList(', 'String)', 'void'),
  \ javaapi#method(0,1,'createCompositeFonts(', 'ConcurrentHashMap<String, Font2D>, boolean, boolean)', 'void'),
  \ javaapi#method(0,1,'getAllInstalledFonts(', ')', 'Font'),
  \ javaapi#method(0,1,'getInstalledFontFamilyNames(', 'Locale)', 'String'),
  \ javaapi#method(0,1,'register1dot0Fonts(', ')', 'void'),
  \ javaapi#method(0,0,'getJREFontFamilyNames(', 'TreeMap<String, String>, Locale)', 'void'),
  \ javaapi#method(0,0,'getFontConfigFUIR(', 'String, int, int)', 'FontUIResource'),
  \ ])

call javaapi#class('SunLayoutEngine', 'LayoutEngineFactory', [
  \ javaapi#method(1,1,'instance(', ')', 'LayoutEngineFactory'),
  \ javaapi#method(0,1,'getEngine(', 'Font2D, int, int)', 'LayoutEngine'),
  \ javaapi#method(0,1,'getEngine(', 'LayoutEngineKey)', 'LayoutEngine'),
  \ javaapi#method(0,1,'layout(', 'FontStrikeDesc, float[], int, int, TextRecord, int, Float, GVData)', 'void'),
  \ ])

call javaapi#class('T2KFontScaler', 'FontScaler', [
  \ javaapi#method(0,1,'T2KFontScaler(', 'Font2D, int, boolean, int)', ''),
  \ javaapi#method(0,1,'dispose(', ')', 'void'),
  \ ])

call javaapi#class('TextLabel', '', [
  \ javaapi#method(0,1,'TextLabel(', ')', ''),
  \ javaapi#method(0,1,'getVisualBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getLogicalBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getAlignBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getItalicBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getOutline(', 'float, float)', 'Shape'),
  \ javaapi#method(0,1,'draw(', 'Graphics2D, float, float)', 'void'),
  \ javaapi#method(0,1,'getVisualBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getLogicalBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getAlignBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getItalicBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getOutline(', ')', 'Shape'),
  \ javaapi#method(0,1,'draw(', 'Graphics2D)', 'void'),
  \ ])

call javaapi#class('TextLabelFactory', '', [
  \ javaapi#method(0,1,'TextLabelFactory(', 'FontRenderContext, char[], Bidi, int)', ''),
  \ javaapi#method(0,1,'getFontRenderContext(', ')', 'FontRenderContext'),
  \ javaapi#method(0,1,'getText(', ')', 'char'),
  \ javaapi#method(0,1,'getParagraphBidi(', ')', 'Bidi'),
  \ javaapi#method(0,1,'getLineBidi(', ')', 'Bidi'),
  \ javaapi#method(0,1,'getLayoutFlags(', ')', 'int'),
  \ javaapi#method(0,1,'getLineStart(', ')', 'int'),
  \ javaapi#method(0,1,'getLineLimit(', ')', 'int'),
  \ javaapi#method(0,1,'setLineContext(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'createExtended(', 'Font, CoreMetrics, Decoration, int, int)', 'ExtendedTextLabel'),
  \ javaapi#method(0,1,'createSimple(', 'Font, CoreMetrics, int, int)', 'TextLabel'),
  \ ])

call javaapi#interface('TextLineComponent', '', [
  \ javaapi#field(1,1,'LEFT_TO_RIGHT', 'int'),
  \ javaapi#field(1,1,'RIGHT_TO_LEFT', 'int'),
  \ javaapi#field(1,1,'UNCHANGED', 'int'),
  \ javaapi#method(0,1,'getCoreMetrics(', ')', 'CoreMetrics'),
  \ javaapi#method(0,1,'draw(', 'Graphics2D, float, float)', 'void'),
  \ javaapi#method(0,1,'getCharVisualBounds(', 'int)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getVisualBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getAdvance(', ')', 'float'),
  \ javaapi#method(0,1,'getOutline(', 'float, float)', 'Shape'),
  \ javaapi#method(0,1,'getNumCharacters(', ')', 'int'),
  \ javaapi#method(0,1,'getCharX(', 'int)', 'float'),
  \ javaapi#method(0,1,'getCharY(', 'int)', 'float'),
  \ javaapi#method(0,1,'getCharAdvance(', 'int)', 'float'),
  \ javaapi#method(0,1,'caretAtOffsetIsValid(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'getLineBreakIndex(', 'int, float)', 'int'),
  \ javaapi#method(0,1,'getAdvanceBetween(', 'int, int)', 'float'),
  \ javaapi#method(0,1,'getLogicalBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getItalicBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getBaselineTransform(', ')', 'AffineTransform'),
  \ javaapi#method(0,1,'isSimple(', ')', 'boolean'),
  \ javaapi#method(0,1,'getPixelBounds(', 'FontRenderContext, float, float)', 'Rectangle'),
  \ javaapi#method(0,1,'getSubset(', 'int, int, int)', 'TextLineComponent'),
  \ javaapi#method(0,1,'getNumJustificationInfos(', ')', 'int'),
  \ javaapi#method(0,1,'getJustificationInfos(', 'GlyphJustificationInfo[], int, int, int)', 'void'),
  \ javaapi#method(0,1,'applyJustificationDeltas(', 'float[], int, boolean[])', 'TextLineComponent'),
  \ ])

call javaapi#class('TextRecord', '', [
  \ javaapi#field(0,1,'text', 'char'),
  \ javaapi#field(0,1,'start', 'int'),
  \ javaapi#field(0,1,'limit', 'int'),
  \ javaapi#field(0,1,'min', 'int'),
  \ javaapi#field(0,1,'max', 'int'),
  \ javaapi#method(0,1,'TextRecord(', ')', ''),
  \ javaapi#method(0,1,'init(', 'char[], int, int, int, int)', 'void'),
  \ ])

call javaapi#class('TextSource', '', [
  \ javaapi#field(1,1,'WITHOUT_CONTEXT', 'boolean'),
  \ javaapi#field(1,1,'WITH_CONTEXT', 'boolean'),
  \ javaapi#method(0,1,'TextSource(', ')', ''),
  \ javaapi#method(0,1,'getChars(', ')', 'char'),
  \ javaapi#method(0,1,'getStart(', ')', 'int'),
  \ javaapi#method(0,1,'getLength(', ')', 'int'),
  \ javaapi#method(0,1,'getContextStart(', ')', 'int'),
  \ javaapi#method(0,1,'getContextLength(', ')', 'int'),
  \ javaapi#method(0,1,'getLayoutFlags(', ')', 'int'),
  \ javaapi#method(0,1,'getBidiLevel(', ')', 'int'),
  \ javaapi#method(0,1,'getFont(', ')', 'Font'),
  \ javaapi#method(0,1,'getFRC(', ')', 'FontRenderContext'),
  \ javaapi#method(0,1,'getCoreMetrics(', ')', 'CoreMetrics'),
  \ javaapi#method(0,1,'getSubSource(', 'int, int, int)', 'TextSource'),
  \ javaapi#method(0,1,'toString(', 'boolean)', 'String'),
  \ ])

call javaapi#class('TextSourceLabel', 'TextLabel', [
  \ javaapi#method(0,1,'TextSourceLabel(', 'TextSource)', ''),
  \ javaapi#method(0,1,'TextSourceLabel(', 'TextSource, Rectangle2D, Rectangle2D, GlyphVector)', ''),
  \ javaapi#method(0,1,'getSource(', ')', 'TextSource'),
  \ javaapi#method(0,1,'getLogicalBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getVisualBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getAlignBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getItalicBounds(', 'float, float)', 'Rectangle2D'),
  \ javaapi#method(0,1,'getPixelBounds(', 'FontRenderContext, float, float)', 'Rectangle'),
  \ javaapi#method(0,1,'getBaselineTransform(', ')', 'AffineTransform'),
  \ javaapi#method(0,1,'getOutline(', 'float, float)', 'Shape'),
  \ javaapi#method(0,1,'draw(', 'Graphics2D, float, float)', 'void'),
  \ javaapi#method(0,0,'createLogicalBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,0,'createVisualBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,0,'createItalicBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,0,'createAlignBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,0,'createGV(', ')', 'GlyphVector'),
  \ ])

call javaapi#class('Type1GlyphMapper', 'CharToGlyphMapper', [
  \ javaapi#method(0,1,'Type1GlyphMapper(', 'Type1Font)', ''),
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ javaapi#method(0,1,'getMissingGlyphCode(', ')', 'int'),
  \ javaapi#method(0,1,'canDisplay(', 'char)', 'boolean'),
  \ javaapi#method(0,1,'charToGlyph(', 'char)', 'int'),
  \ javaapi#method(0,1,'charToGlyph(', 'int)', 'int'),
  \ javaapi#method(0,1,'charsToGlyphs(', 'int, char[], int[])', 'void'),
  \ javaapi#method(0,1,'charsToGlyphs(', 'int, int[], int[])', 'void'),
  \ javaapi#method(0,1,'charsToGlyphsNS(', 'int, char[], int[])', 'boolean'),
  \ ])

call javaapi#class('Underline', '', [
  \ ])

call javaapi#namespace('sun.font')

call javaapi#class('FontLineMetrics', 'LineMetrics', [
  \ javaapi#field(0,1,'numchars', 'int'),
  \ javaapi#field(0,1,'cm', 'CoreMetrics'),
  \ javaapi#field(0,1,'frc', 'FontRenderContext'),
  \ javaapi#method(0,1,'FontLineMetrics(', 'int, CoreMetrics, FontRenderContext)', ''),
  \ javaapi#method(0,1,'getNumChars(', ')', 'int'),
  \ javaapi#method(0,1,'getAscent(', ')', 'float'),
  \ javaapi#method(0,1,'getDescent(', ')', 'float'),
  \ javaapi#method(0,1,'getLeading(', ')', 'float'),
  \ javaapi#method(0,1,'getHeight(', ')', 'float'),
  \ javaapi#method(0,1,'getBaselineIndex(', ')', 'int'),
  \ javaapi#method(0,1,'getBaselineOffsets(', ')', 'float'),
  \ javaapi#method(0,1,'getStrikethroughOffset(', ')', 'float'),
  \ javaapi#method(0,1,'getStrikethroughThickness(', ')', 'float'),
  \ javaapi#method(0,1,'getUnderlineOffset(', ')', 'float'),
  \ javaapi#method(0,1,'getUnderlineThickness(', ')', 'float'),
  \ javaapi#method(0,1,'hashCode(', ')', 'int'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'clone(', ')', 'Object'),
  \ ])

call javaapi#class('CoreMetrics', '', [
  \ javaapi#field(0,1,'ascent', 'float'),
  \ javaapi#field(0,1,'descent', 'float'),
  \ javaapi#field(0,1,'leading', 'float'),
  \ javaapi#field(0,1,'height', 'float'),
  \ javaapi#field(0,1,'baselineIndex', 'int'),
  \ javaapi#field(0,1,'baselineOffsets', 'float'),
  \ javaapi#field(0,1,'strikethroughOffset', 'float'),
  \ javaapi#field(0,1,'strikethroughThickness', 'float'),
  \ javaapi#field(0,1,'underlineOffset', 'float'),
  \ javaapi#field(0,1,'underlineThickness', 'float'),
  \ javaapi#field(0,1,'ssOffset', 'float'),
  \ javaapi#field(0,1,'italicAngle', 'float'),
  \ javaapi#method(0,1,'CoreMetrics(', 'float, float, float, float, int, float[], float, float, float, float, float, float)', ''),
  \ javaapi#method(1,1,'get(', 'LineMetrics)', 'CoreMetrics'),
  \ javaapi#method(0,1,'hashCode(', ')', 'int'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'equals(', 'CoreMetrics)', 'boolean'),
  \ javaapi#method(0,1,'effectiveBaselineOffset(', 'float[])', 'float'),
  \ ])

call javaapi#namespace('sun.font')

call javaapi#class('StandardGlyphVector', 'GlyphVector', [
  \ javaapi#field(1,1,'FLAG_USES_VERTICAL_BASELINE', 'int'),
  \ javaapi#field(1,1,'FLAG_USES_VERTICAL_METRICS', 'int'),
  \ javaapi#field(1,1,'FLAG_USES_ALTERNATE_ORIENTATION', 'int'),
  \ javaapi#method(0,1,'StandardGlyphVector(', 'Font, String, FontRenderContext)', ''),
  \ javaapi#method(0,1,'StandardGlyphVector(', 'Font, char[], FontRenderContext)', ''),
  \ javaapi#method(0,1,'StandardGlyphVector(', 'Font, char[], int, int, FontRenderContext)', ''),
  \ javaapi#method(0,1,'StandardGlyphVector(', 'Font, FontRenderContext, int[], float[], int[], int)', ''),
  \ javaapi#method(0,1,'initGlyphVector(', 'Font, FontRenderContext, int[], float[], int[], int)', 'void'),
  \ javaapi#method(0,1,'StandardGlyphVector(', 'Font, CharacterIterator, FontRenderContext)', ''),
  \ javaapi#method(0,1,'StandardGlyphVector(', 'Font, int[], FontRenderContext)', ''),
  \ javaapi#method(1,1,'getStandardGV(', 'GlyphVector, FontInfo)', 'StandardGlyphVector'),
  \ javaapi#method(0,1,'getFont(', ')', 'Font'),
  \ javaapi#method(0,1,'getFontRenderContext(', ')', 'FontRenderContext'),
  \ javaapi#method(0,1,'performDefaultLayout(', ')', 'void'),
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ javaapi#method(0,1,'getGlyphCode(', 'int)', 'int'),
  \ javaapi#method(0,1,'getGlyphCodes(', 'int, int, int[])', 'int'),
  \ javaapi#method(0,1,'getGlyphCharIndex(', 'int)', 'int'),
  \ javaapi#method(0,1,'getGlyphCharIndices(', 'int, int, int[])', 'int'),
  \ javaapi#method(0,1,'getLogicalBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getVisualBounds(', ')', 'Rectangle2D'),
  \ javaapi#method(0,1,'getPixelBounds(', 'FontRenderContext, float, float)', 'Rectangle'),
  \ javaapi#method(0,1,'getOutline(', ')', 'Shape'),
  \ javaapi#method(0,1,'getOutline(', 'float, float)', 'Shape'),
  \ javaapi#method(0,1,'getGlyphOutline(', 'int)', 'Shape'),
  \ javaapi#method(0,1,'getGlyphOutline(', 'int, float, float)', 'Shape'),
  \ javaapi#method(0,1,'getGlyphPosition(', 'int)', 'Point2D'),
  \ javaapi#method(0,1,'setGlyphPosition(', 'int, Point2D)', 'void'),
  \ javaapi#method(0,1,'getGlyphTransform(', 'int)', 'AffineTransform'),
  \ javaapi#method(0,1,'setGlyphTransform(', 'int, AffineTransform)', 'void'),
  \ javaapi#method(0,1,'getLayoutFlags(', ')', 'int'),
  \ javaapi#method(0,1,'getGlyphPositions(', 'int, int, float[])', 'float'),
  \ javaapi#method(0,1,'getGlyphLogicalBounds(', 'int)', 'Shape'),
  \ javaapi#method(0,1,'getGlyphVisualBounds(', 'int)', 'Shape'),
  \ javaapi#method(0,1,'getGlyphPixelBounds(', 'int, FontRenderContext, float, float)', 'Rectangle'),
  \ javaapi#method(0,1,'getGlyphMetrics(', 'int)', 'GlyphMetrics'),
  \ javaapi#method(0,1,'getGlyphJustificationInfo(', 'int)', 'GlyphJustificationInfo'),
  \ javaapi#method(0,1,'equals(', 'GlyphVector)', 'boolean'),
  \ javaapi#method(0,1,'hashCode(', ')', 'int'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'copy(', ')', 'StandardGlyphVector'),
  \ javaapi#method(0,1,'clone(', ')', 'Object'),
  \ javaapi#method(0,1,'setGlyphPositions(', 'float[], int, int, int)', 'void'),
  \ javaapi#method(0,1,'setGlyphPositions(', 'float[])', 'void'),
  \ javaapi#method(0,1,'getGlyphPositions(', 'float[])', 'float'),
  \ javaapi#method(0,1,'getGlyphTransforms(', 'int, int, AffineTransform[])', 'AffineTransform'),
  \ javaapi#method(0,1,'getGlyphTransforms(', ')', 'AffineTransform'),
  \ javaapi#method(0,1,'setGlyphTransforms(', 'AffineTransform[], int, int, int)', 'void'),
  \ javaapi#method(0,1,'setGlyphTransforms(', 'AffineTransform[])', 'void'),
  \ javaapi#method(0,1,'getGlyphInfo(', ')', 'float'),
  \ javaapi#method(0,1,'pixellate(', 'FontRenderContext, Point2D, Point)', 'void'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#namespace('sun.font')

call javaapi#class('CompositeGlyphMapper', 'CharToGlyphMapper', [
  \ javaapi#field(1,1,'SLOTMASK', 'int'),
  \ javaapi#field(1,1,'GLYPHMASK', 'int'),
  \ javaapi#field(1,1,'NBLOCKS', 'int'),
  \ javaapi#field(1,1,'BLOCKSZ', 'int'),
  \ javaapi#field(1,1,'MAXUNICODE', 'int'),
  \ javaapi#method(0,1,'CompositeGlyphMapper(', 'CompositeFont)', ''),
  \ javaapi#method(0,1,'compositeGlyphCode(', 'int, int)', 'int'),
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ javaapi#method(0,1,'charToGlyph(', 'int)', 'int'),
  \ javaapi#method(0,1,'charToGlyph(', 'int, int)', 'int'),
  \ javaapi#method(0,1,'charToGlyph(', 'char)', 'int'),
  \ javaapi#method(0,1,'charsToGlyphsNS(', 'int, char[], int[])', 'boolean'),
  \ javaapi#method(0,1,'charsToGlyphs(', 'int, char[], int[])', 'void'),
  \ javaapi#method(0,1,'charsToGlyphs(', 'int, int[], int[])', 'void'),
  \ ])

call javaapi#namespace('sun.font')

call javaapi#class('CMap', '', [
  \ javaapi#field(1,1,'theNullCmap', 'NullCMapClass'),
  \ ])

call javaapi#class('TrueTypeGlyphMapper', 'CharToGlyphMapper', [
  \ javaapi#method(0,1,'TrueTypeGlyphMapper(', 'TrueTypeFont)', ''),
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ javaapi#method(0,1,'charToGlyph(', 'char)', 'int'),
  \ javaapi#method(0,1,'charToGlyph(', 'int)', 'int'),
  \ javaapi#method(0,1,'charsToGlyphs(', 'int, int[], int[])', 'void'),
  \ javaapi#method(0,1,'charsToGlyphs(', 'int, char[], int[])', 'void'),
  \ javaapi#method(0,1,'charsToGlyphsNS(', 'int, char[], int[])', 'boolean'),
  \ ])

call javaapi#class('FileFontStrike', 'PhysicalStrike', [
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ javaapi#method(0,1,'getOutlineBounds(', 'int)', 'Rectangle2D'),
  \ javaapi#method(0,0,'adjustPoint(', 'Float)', 'void'),
  \ ])

call javaapi#namespace('sun.font')

call javaapi#class('FontStrikeDisposer', 'PollDisposable', [
  \ javaapi#method(0,1,'FontStrikeDisposer(', 'Font2D, FontStrikeDesc, long, int[])', ''),
  \ javaapi#method(0,1,'FontStrikeDisposer(', 'Font2D, FontStrikeDesc, long, long[])', ''),
  \ javaapi#method(0,1,'FontStrikeDisposer(', 'Font2D, FontStrikeDesc, long)', ''),
  \ javaapi#method(0,1,'FontStrikeDisposer(', 'Font2D, FontStrikeDesc)', ''),
  \ javaapi#method(0,1,'dispose(', ')', 'void'),
  \ ])

call javaapi#class('CompositeStrike', 'FontStrike', [
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ ])

call javaapi#class('FontStrikeDesc', '', [
  \ javaapi#method(0,1,'hashCode(', ')', 'int'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(1,1,'getAAHintIntVal(', 'Object, Font2D, int)', 'int'),
  \ javaapi#method(1,1,'getAAHintIntVal(', 'Font2D, Font, FontRenderContext)', 'int'),
  \ javaapi#method(1,1,'getFMHintIntVal(', 'Object)', 'int'),
  \ javaapi#method(0,1,'FontStrikeDesc(', 'AffineTransform, AffineTransform, int, int, int)', ''),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('FontDesignMetrics', 'FontMetrics', [
  \ javaapi#method(1,1,'getMetrics(', 'Font)', 'FontDesignMetrics'),
  \ javaapi#method(1,1,'getMetrics(', 'Font, FontRenderContext)', 'FontDesignMetrics'),
  \ javaapi#method(0,1,'getFontRenderContext(', ')', 'FontRenderContext'),
  \ javaapi#method(0,1,'charWidth(', 'char)', 'int'),
  \ javaapi#method(0,1,'charWidth(', 'int)', 'int'),
  \ javaapi#method(0,1,'stringWidth(', 'String)', 'int'),
  \ javaapi#method(0,1,'charsWidth(', 'char[], int, int)', 'int'),
  \ javaapi#method(0,1,'getWidths(', ')', 'int'),
  \ javaapi#method(0,1,'getMaxAdvance(', ')', 'int'),
  \ javaapi#method(0,1,'getAscent(', ')', 'int'),
  \ javaapi#method(0,1,'getDescent(', ')', 'int'),
  \ javaapi#method(0,1,'getLeading(', ')', 'int'),
  \ javaapi#method(0,1,'getHeight(', ')', 'int'),
  \ ])

call javaapi#namespace('sun.font')

call javaapi#class('FontFamily', '', [
  \ javaapi#field(0,0,'familyName', 'String'),
  \ javaapi#field(0,0,'plain', 'Font2D'),
  \ javaapi#field(0,0,'bold', 'Font2D'),
  \ javaapi#field(0,0,'italic', 'Font2D'),
  \ javaapi#field(0,0,'bolditalic', 'Font2D'),
  \ javaapi#field(0,0,'logicalFont', 'boolean'),
  \ javaapi#field(0,0,'familyRank', 'int'),
  \ javaapi#method(1,1,'getFamily(', 'String)', 'FontFamily'),
  \ javaapi#method(1,1,'getAllFamilyNames(', ')', 'String'),
  \ javaapi#method(0,1,'FontFamily(', 'String, boolean, int)', ''),
  \ javaapi#method(0,1,'getFamilyName(', ')', 'String'),
  \ javaapi#method(0,1,'getRank(', ')', 'int'),
  \ javaapi#method(0,1,'setFont(', 'Font2D, int)', 'void'),
  \ javaapi#method(0,1,'getFontWithExactStyleMatch(', 'int)', 'Font2D'),
  \ javaapi#method(0,1,'getFont(', 'int)', 'Font2D'),
  \ javaapi#method(1,1,'getLocaleFamily(', 'String)', 'FontFamily'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('Font2DHandle', '', [
  \ javaapi#field(0,1,'font2D', 'Font2D'),
  \ javaapi#method(0,1,'Font2DHandle(', 'Font2D)', ''),
  \ ])

call javaapi#class('CompositeFontDescriptor', '', [
  \ javaapi#method(0,1,'CompositeFontDescriptor(', 'String, int, String[], String[], int[], int[])', ''),
  \ javaapi#method(0,1,'getFaceName(', ')', 'String'),
  \ javaapi#method(0,1,'getCoreComponentCount(', ')', 'int'),
  \ javaapi#method(0,1,'getComponentFaceNames(', ')', 'String'),
  \ javaapi#method(0,1,'getComponentFileNames(', ')', 'String'),
  \ javaapi#method(0,1,'getExclusionRanges(', ')', 'int'),
  \ javaapi#method(0,1,'getExclusionRangeLimits(', ')', 'int'),
  \ ])

call javaapi#namespace('sun.font')

call javaapi#class('StrikeCache', '', [
  \ javaapi#method(0,1,'StrikeCache(', ')', ''),
  \ javaapi#method(1,1,'addGlyphDisposedListener(', 'GlyphDisposedListener)', 'void'),
  \ javaapi#method(1,1,'getStrikeRef(', 'FontStrike)', 'Reference'),
  \ javaapi#method(1,1,'getStrikeRef(', 'FontStrike, boolean)', 'Reference'),
  \ ])

call javaapi#class('GlyphList', '', [
  \ javaapi#method(1,1,'getInstance(', ')', 'GlyphList'),
  \ javaapi#method(0,1,'setFromString(', 'FontInfo, String, float, float)', 'boolean'),
  \ javaapi#method(0,1,'setFromChars(', 'FontInfo, char[], int, int, float, float)', 'boolean'),
  \ javaapi#method(0,1,'setFromGlyphVector(', 'FontInfo, GlyphVector, float, float)', 'void'),
  \ javaapi#method(0,1,'getBounds(', ')', 'int'),
  \ javaapi#method(0,1,'setGlyphIndex(', 'int)', 'void'),
  \ javaapi#method(0,1,'getMetrics(', ')', 'int'),
  \ javaapi#method(0,1,'getGrayBits(', ')', 'byte'),
  \ javaapi#method(0,1,'getImages(', ')', 'long'),
  \ javaapi#method(0,1,'usePositions(', ')', 'boolean'),
  \ javaapi#method(0,1,'getPositions(', ')', 'float'),
  \ javaapi#method(0,1,'getX(', ')', 'float'),
  \ javaapi#method(0,1,'getY(', ')', 'float'),
  \ javaapi#method(0,1,'getStrike(', ')', 'Object'),
  \ javaapi#method(0,1,'isSubPixPos(', ')', 'boolean'),
  \ javaapi#method(0,1,'isRGBOrder(', ')', 'boolean'),
  \ javaapi#method(0,1,'dispose(', ')', 'void'),
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ ])

call javaapi#class('FontStrike', '', [
  \ javaapi#field(0,0,'disposer', 'FontStrikeDisposer'),
  \ javaapi#field(0,0,'desc', 'FontStrikeDesc'),
  \ javaapi#field(0,0,'strikeMetrics', 'StrikeMetrics'),
  \ javaapi#field(0,0,'algoStyle', 'boolean'),
  \ javaapi#field(0,0,'boldness', 'float'),
  \ javaapi#field(0,0,'italic', 'float'),
  \ javaapi#method(0,1,'FontStrike(', ')', ''),
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ ])

call javaapi#class('PhysicalStrike', 'FontStrike', [
  \ javaapi#field(0,0,'mapper', 'CharToGlyphMapper'),
  \ javaapi#field(0,0,'pScalerContext', 'long'),
  \ javaapi#field(0,0,'longGlyphImages', 'long'),
  \ javaapi#field(0,0,'intGlyphImages', 'int'),
  \ javaapi#field(0,0,'getImageWithAdvance', 'boolean'),
  \ javaapi#field(1,0,'complexTX', 'int'),
  \ javaapi#method(0,0,'PhysicalStrike(', ')', ''),
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ javaapi#method(0,0,'adjustPoint(', 'Float)', 'void'),
  \ ])

call javaapi#class('CharToGlyphMapper', '', [
  \ javaapi#field(1,1,'HI_SURROGATE_START', 'int'),
  \ javaapi#field(1,1,'HI_SURROGATE_END', 'int'),
  \ javaapi#field(1,1,'LO_SURROGATE_START', 'int'),
  \ javaapi#field(1,1,'LO_SURROGATE_END', 'int'),
  \ javaapi#field(1,1,'UNINITIALIZED_GLYPH', 'int'),
  \ javaapi#field(1,1,'INVISIBLE_GLYPH_ID', 'int'),
  \ javaapi#field(1,1,'INVISIBLE_GLYPHS', 'int'),
  \ javaapi#field(0,0,'missingGlyph', 'int'),
  \ javaapi#method(0,1,'CharToGlyphMapper(', ')', ''),
  \ javaapi#method(0,1,'getMissingGlyphCode(', ')', 'int'),
  \ javaapi#method(0,1,'canDisplay(', 'char)', 'boolean'),
  \ javaapi#method(0,1,'canDisplay(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'charToGlyph(', 'char)', 'int'),
  \ javaapi#method(0,1,'charToGlyph(', 'int)', 'int'),
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ javaapi#method(0,1,'charsToGlyphs(', 'int, char[], int[])', 'void'),
  \ javaapi#method(0,1,'charsToGlyphsNS(', 'int, char[], int[])', 'boolean'),
  \ javaapi#method(0,1,'charsToGlyphs(', 'int, int[], int[])', 'void'),
  \ ])

call javaapi#namespace('sun.font')

call javaapi#class('StrikeMetrics', '', [
  \ javaapi#field(0,1,'ascentX', 'float'),
  \ javaapi#field(0,1,'ascentY', 'float'),
  \ javaapi#field(0,1,'descentX', 'float'),
  \ javaapi#field(0,1,'descentY', 'float'),
  \ javaapi#field(0,1,'baselineX', 'float'),
  \ javaapi#field(0,1,'baselineY', 'float'),
  \ javaapi#field(0,1,'leadingX', 'float'),
  \ javaapi#field(0,1,'leadingY', 'float'),
  \ javaapi#field(0,1,'maxAdvanceX', 'float'),
  \ javaapi#field(0,1,'maxAdvanceY', 'float'),
  \ javaapi#method(0,1,'getAscent(', ')', 'float'),
  \ javaapi#method(0,1,'getDescent(', ')', 'float'),
  \ javaapi#method(0,1,'getLeading(', ')', 'float'),
  \ javaapi#method(0,1,'getMaxAdvance(', ')', 'float'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('Type1Font', 'FileFont', [
  \ javaapi#method(0,1,'Type1Font(', 'String, Object) throws FontFormatException', ''),
  \ javaapi#method(0,1,'Type1Font(', 'String, Object, boolean) throws FontFormatException', ''),
  \ javaapi#method(0,0,'close(', ')', 'void'),
  \ javaapi#method(0,1,'readBlock(', 'int, int)', 'ByteBuffer'),
  \ javaapi#method(0,1,'getFileSize(', ')', 'int'),
  \ javaapi#method(0,1,'getPostscriptName(', ')', 'String'),
  \ javaapi#method(0,0,'getScaler(', ')', 'FontScaler'),
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ javaapi#method(0,1,'getMissingGlyphCode(', ')', 'int'),
  \ javaapi#method(0,1,'getGlyphCode(', 'char)', 'int'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#namespace('sun.font')

call javaapi#class('TrueTypeFont', 'FileFont', [
  \ javaapi#field(1,1,'cmapTag', 'int'),
  \ javaapi#field(1,1,'glyfTag', 'int'),
  \ javaapi#field(1,1,'headTag', 'int'),
  \ javaapi#field(1,1,'hheaTag', 'int'),
  \ javaapi#field(1,1,'hmtxTag', 'int'),
  \ javaapi#field(1,1,'locaTag', 'int'),
  \ javaapi#field(1,1,'maxpTag', 'int'),
  \ javaapi#field(1,1,'nameTag', 'int'),
  \ javaapi#field(1,1,'postTag', 'int'),
  \ javaapi#field(1,1,'os_2Tag', 'int'),
  \ javaapi#field(1,1,'GDEFTag', 'int'),
  \ javaapi#field(1,1,'GPOSTag', 'int'),
  \ javaapi#field(1,1,'GSUBTag', 'int'),
  \ javaapi#field(1,1,'mortTag', 'int'),
  \ javaapi#field(1,1,'fdscTag', 'int'),
  \ javaapi#field(1,1,'fvarTag', 'int'),
  \ javaapi#field(1,1,'featTag', 'int'),
  \ javaapi#field(1,1,'EBLCTag', 'int'),
  \ javaapi#field(1,1,'gaspTag', 'int'),
  \ javaapi#field(1,1,'ttcfTag', 'int'),
  \ javaapi#field(1,1,'v1ttTag', 'int'),
  \ javaapi#field(1,1,'trueTag', 'int'),
  \ javaapi#field(1,1,'ottoTag', 'int'),
  \ javaapi#field(1,1,'MS_PLATFORM_ID', 'int'),
  \ javaapi#field(1,1,'ENGLISH_LOCALE_ID', 'short'),
  \ javaapi#field(1,1,'FAMILY_NAME_ID', 'int'),
  \ javaapi#field(1,1,'FULL_NAME_ID', 'int'),
  \ javaapi#field(1,1,'POSTSCRIPT_NAME_ID', 'int'),
  \ javaapi#field(1,1,'reserved_bits1', 'int'),
  \ javaapi#field(1,1,'reserved_bits2', 'int'),
  \ javaapi#method(0,1,'TrueTypeFont(', 'String, Object, int, boolean) throws FontFormatException', ''),
  \ javaapi#method(0,0,'checkUseNatives(', ')', 'boolean'),
  \ javaapi#method(0,0,'close(', ')', 'void'),
  \ javaapi#method(0,0,'init(', 'int) throws FontFormatException', 'void'),
  \ javaapi#method(0,1,'getFullName(', ')', 'String'),
  \ javaapi#method(0,0,'setStyle(', ')', 'void'),
  \ javaapi#method(0,1,'getStyleMetrics(', 'float, float[], int)', 'void'),
  \ javaapi#method(0,0,'initNames(', ')', 'void'),
  \ javaapi#method(0,0,'lookupName(', 'short, int)', 'String'),
  \ javaapi#method(0,1,'getFontCount(', ')', 'int'),
  \ javaapi#method(0,0,'getScaler(', ')', 'FontScaler'),
  \ javaapi#method(0,1,'getPostscriptName(', ')', 'String'),
  \ javaapi#method(0,1,'getFontName(', 'Locale)', 'String'),
  \ javaapi#method(0,1,'getFamilyName(', 'Locale)', 'String'),
  \ javaapi#method(0,1,'getMapper(', ')', 'CharToGlyphMapper'),
  \ javaapi#method(0,0,'initAllNames(', 'int, HashSet)', 'void'),
  \ javaapi#method(0,1,'useAAForPtSize(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'hasSupplementaryChars(', ')', 'boolean'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('CompositeFont', 'Font2D', [
  \ javaapi#method(0,1,'CompositeFont(', 'String, String[], String[], int, int[], int[], boolean, SunFontManager)', ''),
  \ javaapi#method(0,1,'isExcludedChar(', 'int, int)', 'boolean'),
  \ javaapi#method(0,1,'getStyleMetrics(', 'float, float[], int)', 'void'),
  \ javaapi#method(0,1,'getNumSlots(', ')', 'int'),
  \ javaapi#method(0,1,'getSlotFont(', 'int)', 'PhysicalFont'),
  \ javaapi#method(0,1,'isStdComposite(', ')', 'boolean'),
  \ javaapi#method(0,0,'getValidatedGlyphCode(', 'int)', 'int'),
  \ javaapi#method(0,1,'getMapper(', ')', 'CharToGlyphMapper'),
  \ javaapi#method(0,1,'hasSupplementaryChars(', ')', 'boolean'),
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ javaapi#method(0,1,'getMissingGlyphCode(', ')', 'int'),
  \ javaapi#method(0,1,'canDisplay(', 'char)', 'boolean'),
  \ javaapi#method(0,1,'useAAForPtSize(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('Font2D', '', [
  \ javaapi#field(1,1,'FONT_CONFIG_RANK', 'int'),
  \ javaapi#field(1,1,'JRE_RANK', 'int'),
  \ javaapi#field(1,1,'TTF_RANK', 'int'),
  \ javaapi#field(1,1,'TYPE1_RANK', 'int'),
  \ javaapi#field(1,1,'NATIVE_RANK', 'int'),
  \ javaapi#field(1,1,'UNKNOWN_RANK', 'int'),
  \ javaapi#field(1,1,'DEFAULT_RANK', 'int'),
  \ javaapi#field(0,1,'handle', 'Font2DHandle'),
  \ javaapi#field(0,0,'familyName', 'String'),
  \ javaapi#field(0,0,'fullName', 'String'),
  \ javaapi#field(0,0,'style', 'int'),
  \ javaapi#field(0,0,'family', 'FontFamily'),
  \ javaapi#field(0,0,'fontRank', 'int'),
  \ javaapi#field(0,0,'mapper', 'CharToGlyphMapper'),
  \ javaapi#field(0,0,'strikeCache', 'Reference>'),
  \ javaapi#field(0,0,'lastFontStrike', 'Reference'),
  \ javaapi#method(0,1,'Font2D(', ')', ''),
  \ javaapi#method(0,1,'getStyle(', ')', 'int'),
  \ javaapi#method(0,0,'setStyle(', ')', 'void'),
  \ javaapi#method(0,0,'getValidatedGlyphCode(', 'int)', 'int'),
  \ javaapi#method(0,1,'getStrike(', 'Font)', 'FontStrike'),
  \ javaapi#method(0,1,'getStrike(', 'Font, AffineTransform, int, int)', 'FontStrike'),
  \ javaapi#method(0,1,'getStrike(', 'Font, AffineTransform, AffineTransform, int, int)', 'FontStrike'),
  \ javaapi#method(0,1,'getStrike(', 'Font, FontRenderContext)', 'FontStrike'),
  \ javaapi#method(0,1,'getFontMetrics(', 'Font, AffineTransform, Object, Object, float[])', 'void'),
  \ javaapi#method(0,1,'getStyleMetrics(', 'float, float[], int)', 'void'),
  \ javaapi#method(0,1,'getFontMetrics(', 'Font, FontRenderContext, float[])', 'void'),
  \ javaapi#method(0,0,'getUnitsPerEm(', ')', 'long'),
  \ javaapi#method(0,1,'canDoStyle(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'useAAForPtSize(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'hasSupplementaryChars(', ')', 'boolean'),
  \ javaapi#method(0,1,'getPostscriptName(', ')', 'String'),
  \ javaapi#method(0,1,'getFontName(', 'Locale)', 'String'),
  \ javaapi#method(0,1,'getFamilyName(', 'Locale)', 'String'),
  \ javaapi#method(0,1,'getNumGlyphs(', ')', 'int'),
  \ javaapi#method(0,1,'charToGlyph(', 'int)', 'int'),
  \ javaapi#method(0,1,'getMissingGlyphCode(', ')', 'int'),
  \ javaapi#method(0,1,'canDisplay(', 'char)', 'boolean'),
  \ javaapi#method(0,1,'canDisplay(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'getBaselineFor(', 'char)', 'byte'),
  \ javaapi#method(0,1,'getItalicAngle(', 'Font, AffineTransform, Object, Object)', 'float'),
  \ ])

call javaapi#class('PhysicalFont', 'Font2D', [
  \ javaapi#field(0,0,'platName', 'String'),
  \ javaapi#field(0,0,'nativeNames', 'Object'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'hashCode(', ')', 'int'),
  \ javaapi#method(0,0,'PhysicalFont(', ')', ''),
  \ ])

call javaapi#class('FileFont', 'PhysicalFont', [
  \ javaapi#field(0,0,'useJavaRasterizer', 'boolean'),
  \ javaapi#field(0,0,'fileSize', 'int'),
  \ javaapi#field(0,0,'scaler', 'FontScaler'),
  \ javaapi#field(0,0,'checkedNatives', 'boolean'),
  \ javaapi#field(0,0,'useNatives', 'boolean'),
  \ javaapi#field(0,0,'nativeFonts', 'NativeFont'),
  \ javaapi#field(0,0,'glyphToCharMap', 'char'),
  \ javaapi#method(0,0,'checkUseNatives(', ')', 'boolean'),
  \ javaapi#method(0,0,'close(', ')', 'void'),
  \ javaapi#method(0,1,'canDoStyle(', 'int)', 'boolean'),
  \ javaapi#method(0,0,'getScaler(', ')', 'FontScaler'),
  \ javaapi#method(0,0,'getUnitsPerEm(', ')', 'long'),
  \ javaapi#method(0,0,'getPublicFileName(', ')', 'String'),
  \ ])

call javaapi#interface('FontManager', '', [
  \ javaapi#field(1,1,'NO_FALLBACK', 'int'),
  \ javaapi#field(1,1,'PHYSICAL_FALLBACK', 'int'),
  \ javaapi#field(1,1,'LOGICAL_FALLBACK', 'int'),
  \ javaapi#method(0,1,'registerFont(', 'Font)', 'boolean'),
  \ javaapi#method(0,1,'deRegisterBadFont(', 'Font2D)', 'void'),
  \ javaapi#method(0,1,'findFont2D(', 'String, int, int)', 'Font2D'),
  \ javaapi#method(0,1,'createFont2D(', 'File, int, boolean, CreatedFontTracker) throws FontFormatException', 'Font2D'),
  \ javaapi#method(0,1,'usingPerAppContextComposites(', ')', 'boolean'),
  \ javaapi#method(0,1,'getNewComposite(', 'String, int, Font2DHandle)', 'Font2DHandle'),
  \ javaapi#method(0,1,'preferLocaleFonts(', ')', 'void'),
  \ javaapi#method(0,1,'preferProportionalFonts(', ')', 'void'),
  \ ])

call javaapi#namespace('sun.font')

call javaapi#class('EAttribute', 'Enum', [
  \ javaapi#field(1,1,'EFAMILY', 'EAttribute'),
  \ javaapi#field(1,1,'EWEIGHT', 'EAttribute'),
  \ javaapi#field(1,1,'EWIDTH', 'EAttribute'),
  \ javaapi#field(1,1,'EPOSTURE', 'EAttribute'),
  \ javaapi#field(1,1,'ESIZE', 'EAttribute'),
  \ javaapi#field(1,1,'ETRANSFORM', 'EAttribute'),
  \ javaapi#field(1,1,'ESUPERSCRIPT', 'EAttribute'),
  \ javaapi#field(1,1,'EFONT', 'EAttribute'),
  \ javaapi#field(1,1,'ECHAR_REPLACEMENT', 'EAttribute'),
  \ javaapi#field(1,1,'EFOREGROUND', 'EAttribute'),
  \ javaapi#field(1,1,'EBACKGROUND', 'EAttribute'),
  \ javaapi#field(1,1,'EUNDERLINE', 'EAttribute'),
  \ javaapi#field(1,1,'ESTRIKETHROUGH', 'EAttribute'),
  \ javaapi#field(1,1,'ERUN_DIRECTION', 'EAttribute'),
  \ javaapi#field(1,1,'EBIDI_EMBEDDING', 'EAttribute'),
  \ javaapi#field(1,1,'EJUSTIFICATION', 'EAttribute'),
  \ javaapi#field(1,1,'EINPUT_METHOD_HIGHLIGHT', 'EAttribute'),
  \ javaapi#field(1,1,'EINPUT_METHOD_UNDERLINE', 'EAttribute'),
  \ javaapi#field(1,1,'ESWAP_COLORS', 'EAttribute'),
  \ javaapi#field(1,1,'ENUMERIC_SHAPING', 'EAttribute'),
  \ javaapi#field(1,1,'EKERNING', 'EAttribute'),
  \ javaapi#field(1,1,'ELIGATURES', 'EAttribute'),
  \ javaapi#field(1,1,'ETRACKING', 'EAttribute'),
  \ javaapi#field(1,1,'EBASELINE_TRANSFORM', 'EAttribute'),
  \ javaapi#method(1,1,'values(', ')', 'EAttribute'),
  \ javaapi#method(1,1,'valueOf(', 'String)', 'EAttribute'),
  \ javaapi#method(1,1,'forAttribute(', 'Attribute)', 'EAttribute'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('AttributeValues', 'Cloneable', [
  \ javaapi#field(1,1,'MASK_ALL', 'int'),
  \ javaapi#method(0,1,'AttributeValues(', ')', ''),
  \ javaapi#method(0,1,'getFamily(', ')', 'String'),
  \ javaapi#method(0,1,'setFamily(', 'String)', 'void'),
  \ javaapi#method(0,1,'getWeight(', ')', 'float'),
  \ javaapi#method(0,1,'setWeight(', 'float)', 'void'),
  \ javaapi#method(0,1,'getWidth(', ')', 'float'),
  \ javaapi#method(0,1,'setWidth(', 'float)', 'void'),
  \ javaapi#method(0,1,'getPosture(', ')', 'float'),
  \ javaapi#method(0,1,'setPosture(', 'float)', 'void'),
  \ javaapi#method(0,1,'getSize(', ')', 'float'),
  \ javaapi#method(0,1,'setSize(', 'float)', 'void'),
  \ javaapi#method(0,1,'getTransform(', ')', 'AffineTransform'),
  \ javaapi#method(0,1,'setTransform(', 'AffineTransform)', 'void'),
  \ javaapi#method(0,1,'setTransform(', 'TransformAttribute)', 'void'),
  \ javaapi#method(0,1,'getSuperscript(', ')', 'int'),
  \ javaapi#method(0,1,'setSuperscript(', 'int)', 'void'),
  \ javaapi#method(0,1,'getFont(', ')', 'Font'),
  \ javaapi#method(0,1,'setFont(', 'Font)', 'void'),
  \ javaapi#method(0,1,'getCharReplacement(', ')', 'GraphicAttribute'),
  \ javaapi#method(0,1,'setCharReplacement(', 'GraphicAttribute)', 'void'),
  \ javaapi#method(0,1,'getForeground(', ')', 'Paint'),
  \ javaapi#method(0,1,'setForeground(', 'Paint)', 'void'),
  \ javaapi#method(0,1,'getBackground(', ')', 'Paint'),
  \ javaapi#method(0,1,'setBackground(', 'Paint)', 'void'),
  \ javaapi#method(0,1,'getUnderline(', ')', 'int'),
  \ javaapi#method(0,1,'setUnderline(', 'int)', 'void'),
  \ javaapi#method(0,1,'getStrikethrough(', ')', 'boolean'),
  \ javaapi#method(0,1,'setStrikethrough(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getRunDirection(', ')', 'int'),
  \ javaapi#method(0,1,'setRunDirection(', 'int)', 'void'),
  \ javaapi#method(0,1,'getBidiEmbedding(', ')', 'int'),
  \ javaapi#method(0,1,'setBidiEmbedding(', 'int)', 'void'),
  \ javaapi#method(0,1,'getJustification(', ')', 'float'),
  \ javaapi#method(0,1,'setJustification(', 'float)', 'void'),
  \ javaapi#method(0,1,'getInputMethodHighlight(', ')', 'Object'),
  \ javaapi#method(0,1,'setInputMethodHighlight(', 'Annotation)', 'void'),
  \ javaapi#method(0,1,'setInputMethodHighlight(', 'InputMethodHighlight)', 'void'),
  \ javaapi#method(0,1,'getInputMethodUnderline(', ')', 'int'),
  \ javaapi#method(0,1,'setInputMethodUnderline(', 'int)', 'void'),
  \ javaapi#method(0,1,'getSwapColors(', ')', 'boolean'),
  \ javaapi#method(0,1,'setSwapColors(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getNumericShaping(', ')', 'NumericShaper'),
  \ javaapi#method(0,1,'setNumericShaping(', 'NumericShaper)', 'void'),
  \ javaapi#method(0,1,'getKerning(', ')', 'int'),
  \ javaapi#method(0,1,'setKerning(', 'int)', 'void'),
  \ javaapi#method(0,1,'getTracking(', ')', 'float'),
  \ javaapi#method(0,1,'setTracking(', 'float)', 'void'),
  \ javaapi#method(0,1,'getLigatures(', ')', 'int'),
  \ javaapi#method(0,1,'setLigatures(', 'int)', 'void'),
  \ javaapi#method(0,1,'getBaselineTransform(', ')', 'AffineTransform'),
  \ javaapi#method(0,1,'getCharTransform(', ')', 'AffineTransform'),
  \ javaapi#method(1,1,'getMask(', 'EAttribute)', 'int'),
  \ javaapi#method(1,1,'getMask(', ')', 'int'),
  \ javaapi#method(0,1,'unsetDefault(', ')', 'void'),
  \ javaapi#method(0,1,'defineAll(', 'int)', 'void'),
  \ javaapi#method(0,1,'allDefined(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'anyDefined(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'anyNonDefault(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'isDefined(', 'EAttribute)', 'boolean'),
  \ javaapi#method(0,1,'isNonDefault(', 'EAttribute)', 'boolean'),
  \ javaapi#method(0,1,'setDefault(', 'EAttribute)', 'void'),
  \ javaapi#method(0,1,'unset(', 'EAttribute)', 'void'),
  \ javaapi#method(0,1,'set(', 'EAttribute, AttributeValues)', 'void'),
  \ javaapi#method(0,1,'set(', 'EAttribute, Object)', 'void'),
  \ javaapi#method(0,1,'get(', 'EAttribute)', 'Object'),
  \ javaapi#method(0,1,'merge(', 'Map<? extends Attribute, ?>)', 'AttributeValues'),
  \ javaapi#method(0,1,'merge(', 'Map<? extends Attribute, ?>, int)', 'AttributeValues'),
  \ javaapi#method(0,1,'merge(', 'AttributeValues)', 'AttributeValues'),
  \ javaapi#method(0,1,'merge(', 'AttributeValues, int)', 'AttributeValues'),
  \ javaapi#method(1,1,'fromMap(', 'Map<? extends Attribute, ?>)', 'AttributeValues'),
  \ javaapi#method(1,1,'fromMap(', 'Map<? extends Attribute, ?>, int)', 'AttributeValues'),
  \ javaapi#method(0,1,'toMap(', 'Map<TextAttribute, Object>)', 'Object>'),
  \ javaapi#method(1,1,'is16Hashtable(', 'Hashtable<Object, Object>)', 'boolean'),
  \ javaapi#method(1,1,'fromSerializableHashtable(', 'Hashtable<Object, Object>)', 'AttributeValues'),
  \ javaapi#method(0,1,'toSerializableHashtable(', ')', 'Object>'),
  \ javaapi#method(0,1,'hashCode(', ')', 'int'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'equals(', 'AttributeValues)', 'boolean'),
  \ javaapi#method(0,1,'clone(', ')', 'AttributeValues'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(1,1,'getJustification(', 'Map<?, ?>)', 'float'),
  \ javaapi#method(1,1,'getNumericShaping(', 'Map<?, ?>)', 'NumericShaper'),
  \ javaapi#method(0,1,'applyIMHighlight(', ')', 'AttributeValues'),
  \ javaapi#method(1,1,'getBaselineTransform(', 'Map<?, ?>)', 'AffineTransform'),
  \ javaapi#method(1,1,'getCharTransform(', 'Map<?, ?>)', 'AffineTransform'),
  \ javaapi#method(0,1,'updateDerivedTransforms(', ')', 'void'),
  \ javaapi#method(1,1,'extractXRotation(', 'AffineTransform, boolean)', 'AffineTransform'),
  \ javaapi#method(1,1,'extractYRotation(', 'AffineTransform, boolean)', 'AffineTransform'),
  \ javaapi#method(0,1,'clone(', ') throws CloneNotSupportedException', 'Object'),
  \ ])

