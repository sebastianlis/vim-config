call javaapi#namespace('com.sun.media.sound')

call javaapi#class('AbstractDataLine', 'AbstractLine', [
  \ javaapi#field(0,0,'defaultFormat', 'AudioFormat'),
  \ javaapi#field(0,0,'defaultBufferSize', 'int'),
  \ javaapi#field(0,0,'lock', 'Object'),
  \ javaapi#field(0,0,'format', 'AudioFormat'),
  \ javaapi#field(0,0,'bufferSize', 'int'),
  \ javaapi#field(0,0,'running', 'boolean'),
  \ javaapi#method(0,0,'AbstractDataLine(', 'Info, AbstractMixer, Control[])', ''),
  \ javaapi#method(0,0,'AbstractDataLine(', 'Info, AbstractMixer, Control[], AudioFormat, int)', ''),
  \ javaapi#method(0,1,'open(', 'AudioFormat, int) throws LineUnavailableException', 'void'),
  \ javaapi#method(0,1,'open(', 'AudioFormat) throws LineUnavailableException', 'void'),
  \ javaapi#method(0,1,'available(', ')', 'int'),
  \ javaapi#method(0,1,'drain(', ')', 'void'),
  \ javaapi#method(0,1,'flush(', ')', 'void'),
  \ javaapi#method(0,1,'start(', ')', 'void'),
  \ javaapi#method(0,1,'stop(', ')', 'void'),
  \ javaapi#method(0,1,'isRunning(', ')', 'boolean'),
  \ javaapi#method(0,1,'isActive(', ')', 'boolean'),
  \ javaapi#method(0,1,'getMicrosecondPosition(', ')', 'long'),
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,1,'getBufferSize(', ')', 'int'),
  \ javaapi#method(0,1,'setBufferSize(', 'int)', 'int'),
  \ javaapi#method(0,1,'getLevel(', ')', 'float'),
  \ javaapi#method(0,0,'isStartedRunning(', ')', 'boolean'),
  \ javaapi#method(0,0,'setActive(', 'boolean)', 'void'),
  \ javaapi#method(0,0,'setStarted(', 'boolean)', 'void'),
  \ javaapi#method(0,0,'setEOM(', ')', 'void'),
  \ javaapi#method(0,1,'open(', ') throws LineUnavailableException', 'void'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ ])

call javaapi#class('AbstractLine', 'Line', [
  \ javaapi#field(0,0,'info', 'Info'),
  \ javaapi#field(0,0,'controls', 'Control'),
  \ javaapi#field(0,0,'mixer', 'AbstractMixer'),
  \ javaapi#method(0,0,'AbstractLine(', 'Info, AbstractMixer, Control[])', ''),
  \ javaapi#method(0,1,'getLineInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'isOpen(', ')', 'boolean'),
  \ javaapi#method(0,1,'addLineListener(', 'LineListener)', 'void'),
  \ javaapi#method(0,1,'removeLineListener(', 'LineListener)', 'void'),
  \ javaapi#method(0,1,'getControls(', ')', 'Control'),
  \ javaapi#method(0,1,'isControlSupported(', 'Type)', 'boolean'),
  \ javaapi#method(0,1,'getControl(', 'Type)', 'Control'),
  \ javaapi#method(0,0,'setOpen(', 'boolean)', 'void'),
  \ javaapi#method(0,0,'sendEvents(', 'LineEvent)', 'void'),
  \ javaapi#method(0,1,'getFramePosition(', ')', 'int'),
  \ javaapi#method(0,1,'getLongFramePosition(', ')', 'long'),
  \ javaapi#method(0,0,'getMixer(', ')', 'AbstractMixer'),
  \ javaapi#method(0,0,'getEventDispatcher(', ')', 'EventDispatcher'),
  \ javaapi#method(0,1,'open(', ') throws LineUnavailableException', 'void'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ ])

call javaapi#class('AbstractMidiDevice', 'ReferenceCountingDevice', [
  \ javaapi#field(0,0,'open', 'boolean'),
  \ javaapi#field(0,0,'id', 'long'),
  \ javaapi#method(0,0,'AbstractMidiDevice(', 'Info)', ''),
  \ javaapi#method(0,1,'getDeviceInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'open(', ') throws MidiUnavailableException', 'void'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ javaapi#method(0,1,'closeInternal(', 'Object)', 'void'),
  \ javaapi#method(0,1,'doClose(', ')', 'void'),
  \ javaapi#method(0,1,'isOpen(', ')', 'boolean'),
  \ javaapi#method(0,0,'implClose(', ')', 'void'),
  \ javaapi#method(0,1,'getMicrosecondPosition(', ')', 'long'),
  \ javaapi#method(0,1,'getMaxReceivers(', ')', 'int'),
  \ javaapi#method(0,1,'getMaxTransmitters(', ')', 'int'),
  \ javaapi#method(0,1,'getReceiver(', ') throws MidiUnavailableException', 'Receiver'),
  \ javaapi#method(0,1,'getReceivers(', ')', 'List'),
  \ javaapi#method(0,1,'getTransmitter(', ') throws MidiUnavailableException', 'Transmitter'),
  \ javaapi#method(0,1,'getTransmitters(', ')', 'List'),
  \ javaapi#method(0,1,'getReceiverReferenceCounting(', ') throws MidiUnavailableException', 'Receiver'),
  \ javaapi#method(0,1,'getTransmitterReferenceCounting(', ') throws MidiUnavailableException', 'Transmitter'),
  \ javaapi#method(0,0,'hasReceivers(', ')', 'boolean'),
  \ javaapi#method(0,0,'createReceiver(', ') throws MidiUnavailableException', 'Receiver'),
  \ javaapi#method(0,0,'getTransmitterList(', ')', 'TransmitterList'),
  \ javaapi#method(0,0,'hasTransmitters(', ')', 'boolean'),
  \ javaapi#method(0,0,'createTransmitter(', ') throws MidiUnavailableException', 'Transmitter'),
  \ javaapi#method(0,0,'implOpen(', ') throws MidiUnavailableException', 'void'),
  \ javaapi#method(0,0,'finalize(', ')', 'void'),
  \ ])

call javaapi#class('AbstractMidiDeviceProvider', 'MidiDeviceProvider', [
  \ javaapi#method(0,1,'AbstractMidiDeviceProvider(', ')', ''),
  \ javaapi#method(0,1,'getDeviceInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getDevice(', 'Info)', 'MidiDevice'),
  \ ])

call javaapi#class('AbstractMixer', 'AbstractLine', [
  \ javaapi#field(1,0,'PCM', 'int'),
  \ javaapi#field(1,0,'ULAW', 'int'),
  \ javaapi#field(1,0,'ALAW', 'int'),
  \ javaapi#field(0,0,'sourceLineInfo', 'Info'),
  \ javaapi#field(0,0,'targetLineInfo', 'Info'),
  \ javaapi#field(0,0,'sourceLines', 'Vector'),
  \ javaapi#field(0,0,'targetLines', 'Vector'),
  \ javaapi#method(0,0,'AbstractMixer(', 'Info, Control[], Info[], Info[])', ''),
  \ javaapi#method(0,1,'getMixerInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getSourceLineInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getTargetLineInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getSourceLineInfo(', 'Info)', 'Info'),
  \ javaapi#method(0,1,'getTargetLineInfo(', 'Info)', 'Info'),
  \ javaapi#method(0,1,'isLineSupported(', 'Info)', 'boolean'),
  \ javaapi#method(0,1,'getLine(', 'Info) throws LineUnavailableException', 'Line'),
  \ javaapi#method(0,1,'getMaxLines(', 'Info)', 'int'),
  \ javaapi#method(0,0,'implOpen(', ') throws LineUnavailableException', 'void'),
  \ javaapi#method(0,0,'implStart(', ')', 'void'),
  \ javaapi#method(0,0,'implStop(', ')', 'void'),
  \ javaapi#method(0,0,'implClose(', ')', 'void'),
  \ javaapi#method(0,1,'getSourceLines(', ')', 'Line'),
  \ javaapi#method(0,1,'getTargetLines(', ')', 'Line'),
  \ javaapi#method(0,1,'synchronize(', 'Line[], boolean)', 'void'),
  \ javaapi#method(0,1,'unsynchronize(', 'Line[])', 'void'),
  \ javaapi#method(0,1,'isSynchronizationSupported(', 'Line[], boolean)', 'boolean'),
  \ javaapi#method(0,1,'open(', ') throws LineUnavailableException', 'void'),
  \ javaapi#method(0,0,'open(', 'boolean) throws LineUnavailableException', 'void'),
  \ javaapi#method(0,0,'open(', 'Line) throws LineUnavailableException', 'void'),
  \ javaapi#method(0,0,'close(', 'Line)', 'void'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ javaapi#method(0,0,'start(', 'Line)', 'void'),
  \ javaapi#method(0,0,'stop(', 'Line)', 'void'),
  \ ])

call javaapi#class('AiffFileFormat', 'AudioFileFormat', [
  \ ])

call javaapi#class('AiffFileReader', 'SunFileReader', [
  \ javaapi#field(1,1,'types', 'Type'),
  \ javaapi#method(0,1,'AiffFileReader(', ')', ''),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ ])

call javaapi#class('AiffFileWriter', 'SunFileWriter', [
  \ javaapi#method(0,1,'AiffFileWriter(', ')', ''),
  \ javaapi#method(0,1,'getAudioFileTypes(', 'AudioInputStream)', 'Type'),
  \ javaapi#method(0,1,'write(', 'AudioInputStream, Type, OutputStream) throws IOException', 'int'),
  \ javaapi#method(0,1,'write(', 'AudioInputStream, Type, File) throws IOException', 'int'),
  \ javaapi#method(0,1,'getAudioFileTypes(', ')', 'Type'),
  \ ])

call javaapi#class('AlawCodec', 'SunCodec', [
  \ javaapi#method(0,1,'AlawCodec(', ')', ''),
  \ javaapi#method(0,1,'getTargetEncodings(', 'AudioFormat)', 'Encoding'),
  \ javaapi#method(0,1,'getTargetFormats(', 'Encoding, AudioFormat)', 'AudioFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'Encoding, AudioInputStream)', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'AudioFormat, AudioInputStream)', 'AudioInputStream'),
  \ javaapi#method(0,1,'getTargetEncodings(', ')', 'Encoding'),
  \ javaapi#method(0,1,'getSourceEncodings(', ')', 'Encoding'),
  \ ])

call javaapi#class('AuFileFormat', 'AudioFileFormat', [
  \ javaapi#method(0,1,'getAuType(', ')', 'int'),
  \ ])

call javaapi#class('AuFileReader', 'SunFileReader', [
  \ javaapi#field(1,1,'types', 'Type'),
  \ javaapi#method(0,1,'AuFileReader(', ')', ''),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ ])

call javaapi#class('AuFileWriter', 'SunFileWriter', [
  \ javaapi#field(1,1,'UNKNOWN_SIZE', 'int'),
  \ javaapi#method(0,1,'AuFileWriter(', ')', ''),
  \ javaapi#method(0,1,'getAudioFileTypes(', 'AudioInputStream)', 'Type'),
  \ javaapi#method(0,1,'write(', 'AudioInputStream, Type, OutputStream) throws IOException', 'int'),
  \ javaapi#method(0,1,'write(', 'AudioInputStream, Type, File) throws IOException', 'int'),
  \ javaapi#method(0,1,'getAudioFileTypes(', ')', 'Type'),
  \ ])

call javaapi#class('AudioFileSoundbankReader', 'SoundbankReader', [
  \ javaapi#method(0,1,'AudioFileSoundbankReader(', ')', ''),
  \ javaapi#method(0,1,'getSoundbank(', 'URL) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ javaapi#method(0,1,'getSoundbank(', 'InputStream) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ javaapi#method(0,1,'getSoundbank(', 'AudioInputStream) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ javaapi#method(0,1,'getSoundbank(', 'File) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ ])

call javaapi#class('AudioFloatConverter', '', [
  \ javaapi#method(0,1,'AudioFloatConverter(', ')', ''),
  \ javaapi#method(1,1,'getConverter(', 'AudioFormat)', 'AudioFloatConverter'),
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,1,'toFloatArray(', 'byte[], int, float[], int, int)', 'float'),
  \ javaapi#method(0,1,'toFloatArray(', 'byte[], float[], int, int)', 'float'),
  \ javaapi#method(0,1,'toFloatArray(', 'byte[], int, float[], int)', 'float'),
  \ javaapi#method(0,1,'toFloatArray(', 'byte[], float[], int)', 'float'),
  \ javaapi#method(0,1,'toFloatArray(', 'byte[], float[])', 'float'),
  \ javaapi#method(0,1,'toByteArray(', 'float[], int, int, byte[], int)', 'byte'),
  \ javaapi#method(0,1,'toByteArray(', 'float[], int, byte[], int)', 'byte'),
  \ javaapi#method(0,1,'toByteArray(', 'float[], int, int, byte[])', 'byte'),
  \ javaapi#method(0,1,'toByteArray(', 'float[], int, byte[])', 'byte'),
  \ javaapi#method(0,1,'toByteArray(', 'float[], byte[])', 'byte'),
  \ ])

call javaapi#class('AudioFloatFormatConverter', 'FormatConversionProvider', [
  \ javaapi#method(0,1,'AudioFloatFormatConverter(', ')', ''),
  \ javaapi#method(0,1,'getAudioInputStream(', 'Encoding, AudioInputStream)', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'AudioFormat, AudioInputStream)', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'AudioFormat, AudioFloatInputStream)', 'AudioInputStream'),
  \ javaapi#method(0,1,'getSourceEncodings(', ')', 'Encoding'),
  \ javaapi#method(0,1,'getTargetEncodings(', ')', 'Encoding'),
  \ javaapi#method(0,1,'getTargetEncodings(', 'AudioFormat)', 'Encoding'),
  \ javaapi#method(0,1,'getTargetFormats(', 'Encoding, AudioFormat)', 'AudioFormat'),
  \ javaapi#method(0,1,'isConversionSupported(', 'AudioFormat, AudioFormat)', 'boolean'),
  \ javaapi#method(0,1,'isConversionSupported(', 'Encoding, AudioFormat)', 'boolean'),
  \ ])

call javaapi#class('AudioFloatInputStream', '', [
  \ javaapi#method(0,1,'AudioFloatInputStream(', ')', ''),
  \ javaapi#method(1,1,'getInputStream(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioFloatInputStream'),
  \ javaapi#method(1,1,'getInputStream(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioFloatInputStream'),
  \ javaapi#method(1,1,'getInputStream(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioFloatInputStream'),
  \ javaapi#method(1,1,'getInputStream(', 'AudioInputStream)', 'AudioFloatInputStream'),
  \ javaapi#method(1,1,'getInputStream(', 'AudioFormat, byte[], int, int)', 'AudioFloatInputStream'),
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,1,'getFrameLength(', ')', 'long'),
  \ javaapi#method(0,1,'read(', 'float[], int, int) throws IOException', 'int'),
  \ javaapi#method(0,1,'read(', 'float[]) throws IOException', 'int'),
  \ javaapi#method(0,1,'read(', ') throws IOException', 'float'),
  \ javaapi#method(0,1,'skip(', 'long) throws IOException', 'long'),
  \ javaapi#method(0,1,'available(', ') throws IOException', 'int'),
  \ javaapi#method(0,1,'close(', ') throws IOException', 'void'),
  \ javaapi#method(0,1,'mark(', 'int)', 'void'),
  \ javaapi#method(0,1,'markSupported(', ')', 'boolean'),
  \ javaapi#method(0,1,'reset(', ') throws IOException', 'void'),
  \ ])

call javaapi#interface('AudioSynthesizer', 'Synthesizer', [
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,1,'getPropertyInfo(', 'Map<String, Object>)', 'AudioSynthesizerPropertyInfo'),
  \ javaapi#method(0,1,'open(', 'SourceDataLine, Map<String, Object>) throws MidiUnavailableException', 'void'),
  \ javaapi#method(0,1,'openStream(', 'AudioFormat, Map<String, Object>) throws MidiUnavailableException', 'AudioInputStream'),
  \ ])

call javaapi#class('AudioSynthesizerPropertyInfo', '', [
  \ javaapi#field(0,1,'name', 'String'),
  \ javaapi#field(0,1,'description', 'String'),
  \ javaapi#field(0,1,'value', 'Object'),
  \ javaapi#field(0,1,'valueClass', 'Class'),
  \ javaapi#field(0,1,'choices', 'Object'),
  \ javaapi#method(0,1,'AudioSynthesizerPropertyInfo(', 'String, Object)', ''),
  \ ])

call javaapi#interface('AutoClosingClip', 'Clip', [
  \ javaapi#method(0,1,'isAutoClosing(', ')', 'boolean'),
  \ javaapi#method(0,1,'setAutoClosing(', 'boolean)', 'void'),
  \ ])

call javaapi#interface('AutoConnectSequencer', '', [
  \ javaapi#method(0,1,'setAutoConnect(', 'Receiver)', 'void'),
  \ ])

call javaapi#class('DLSInfo', '', [
  \ javaapi#field(0,1,'name', 'String'),
  \ javaapi#field(0,1,'creationDate', 'String'),
  \ javaapi#field(0,1,'engineers', 'String'),
  \ javaapi#field(0,1,'product', 'String'),
  \ javaapi#field(0,1,'copyright', 'String'),
  \ javaapi#field(0,1,'comments', 'String'),
  \ javaapi#field(0,1,'tools', 'String'),
  \ javaapi#field(0,1,'archival_location', 'String'),
  \ javaapi#field(0,1,'artist', 'String'),
  \ javaapi#field(0,1,'commissioned', 'String'),
  \ javaapi#field(0,1,'genre', 'String'),
  \ javaapi#field(0,1,'keywords', 'String'),
  \ javaapi#field(0,1,'medium', 'String'),
  \ javaapi#field(0,1,'subject', 'String'),
  \ javaapi#field(0,1,'source', 'String'),
  \ javaapi#field(0,1,'source_form', 'String'),
  \ javaapi#field(0,1,'technician', 'String'),
  \ javaapi#method(0,1,'DLSInfo(', ')', ''),
  \ ])

call javaapi#class('DLSInstrument', 'ModelInstrument', [
  \ javaapi#field(0,0,'preset', 'int'),
  \ javaapi#field(0,0,'bank', 'int'),
  \ javaapi#field(0,0,'druminstrument', 'boolean'),
  \ javaapi#field(0,0,'guid', 'byte'),
  \ javaapi#field(0,0,'info', 'DLSInfo'),
  \ javaapi#field(0,0,'regions', 'List'),
  \ javaapi#field(0,0,'modulators', 'List'),
  \ javaapi#method(0,1,'DLSInstrument(', ')', ''),
  \ javaapi#method(0,1,'DLSInstrument(', 'DLSSoundbank)', ''),
  \ javaapi#method(0,1,'getInfo(', ')', 'DLSInfo'),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'setName(', 'String)', 'void'),
  \ javaapi#method(0,1,'getPatch(', ')', 'ModelPatch'),
  \ javaapi#method(0,1,'setPatch(', 'Patch)', 'void'),
  \ javaapi#method(0,1,'getData(', ')', 'Object'),
  \ javaapi#method(0,1,'getRegions(', ')', 'List'),
  \ javaapi#method(0,1,'getModulators(', ')', 'List'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'getPerformers(', ')', 'ModelPerformer'),
  \ javaapi#method(0,1,'getGuid(', ')', 'byte'),
  \ javaapi#method(0,1,'setGuid(', 'byte[])', 'void'),
  \ javaapi#method(0,1,'getPatch(', ')', 'Patch'),
  \ ])

call javaapi#class('DLSModulator', '', [
  \ javaapi#field(1,1,'CONN_DST_NONE', 'int'),
  \ javaapi#field(1,1,'CONN_DST_GAIN', 'int'),
  \ javaapi#field(1,1,'CONN_DST_PITCH', 'int'),
  \ javaapi#field(1,1,'CONN_DST_PAN', 'int'),
  \ javaapi#field(1,1,'CONN_DST_LFO_FREQUENCY', 'int'),
  \ javaapi#field(1,1,'CONN_DST_LFO_STARTDELAY', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG1_ATTACKTIME', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG1_DECAYTIME', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG1_RELEASETIME', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG1_SUSTAINLEVEL', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG2_ATTACKTIME', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG2_DECAYTIME', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG2_RELEASETIME', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG2_SUSTAINLEVEL', 'int'),
  \ javaapi#field(1,1,'CONN_DST_KEYNUMBER', 'int'),
  \ javaapi#field(1,1,'CONN_DST_LEFT', 'int'),
  \ javaapi#field(1,1,'CONN_DST_RIGHT', 'int'),
  \ javaapi#field(1,1,'CONN_DST_CENTER', 'int'),
  \ javaapi#field(1,1,'CONN_DST_LEFTREAR', 'int'),
  \ javaapi#field(1,1,'CONN_DST_RIGHTREAR', 'int'),
  \ javaapi#field(1,1,'CONN_DST_LFE_CHANNEL', 'int'),
  \ javaapi#field(1,1,'CONN_DST_CHORUS', 'int'),
  \ javaapi#field(1,1,'CONN_DST_REVERB', 'int'),
  \ javaapi#field(1,1,'CONN_DST_VIB_FREQUENCY', 'int'),
  \ javaapi#field(1,1,'CONN_DST_VIB_STARTDELAY', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG1_DELAYTIME', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG1_HOLDTIME', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG1_SHUTDOWNTIME', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG2_DELAYTIME', 'int'),
  \ javaapi#field(1,1,'CONN_DST_EG2_HOLDTIME', 'int'),
  \ javaapi#field(1,1,'CONN_DST_FILTER_CUTOFF', 'int'),
  \ javaapi#field(1,1,'CONN_DST_FILTER_Q', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_NONE', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_LFO', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_KEYONVELOCITY', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_KEYNUMBER', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_EG1', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_EG2', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_PITCHWHEEL', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_CC1', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_CC7', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_CC10', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_CC11', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_RPN0', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_RPN1', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_RPN2', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_POLYPRESSURE', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_CHANNELPRESSURE', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_VIBRATO', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_MONOPRESSURE', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_CC91', 'int'),
  \ javaapi#field(1,1,'CONN_SRC_CC93', 'int'),
  \ javaapi#field(1,1,'CONN_TRN_NONE', 'int'),
  \ javaapi#field(1,1,'CONN_TRN_CONCAVE', 'int'),
  \ javaapi#field(1,1,'CONN_TRN_CONVEX', 'int'),
  \ javaapi#field(1,1,'CONN_TRN_SWITCH', 'int'),
  \ javaapi#field(1,1,'DST_FORMAT_CB', 'int'),
  \ javaapi#field(1,1,'DST_FORMAT_CENT', 'int'),
  \ javaapi#field(1,1,'DST_FORMAT_TIMECENT', 'int'),
  \ javaapi#field(1,1,'DST_FORMAT_PERCENT', 'int'),
  \ javaapi#field(0,0,'source', 'int'),
  \ javaapi#field(0,0,'control', 'int'),
  \ javaapi#field(0,0,'destination', 'int'),
  \ javaapi#field(0,0,'transform', 'int'),
  \ javaapi#field(0,0,'scale', 'int'),
  \ javaapi#field(0,0,'version', 'int'),
  \ javaapi#method(0,1,'DLSModulator(', ')', ''),
  \ javaapi#method(0,1,'getControl(', ')', 'int'),
  \ javaapi#method(0,1,'setControl(', 'int)', 'void'),
  \ javaapi#method(1,1,'getDestinationFormat(', 'int)', 'int'),
  \ javaapi#method(1,1,'getDestinationName(', 'int)', 'String'),
  \ javaapi#method(1,1,'getSourceName(', 'int)', 'String'),
  \ javaapi#method(0,1,'getDestination(', ')', 'int'),
  \ javaapi#method(0,1,'setDestination(', 'int)', 'void'),
  \ javaapi#method(0,1,'getScale(', ')', 'int'),
  \ javaapi#method(0,1,'setScale(', 'int)', 'void'),
  \ javaapi#method(0,1,'getSource(', ')', 'int'),
  \ javaapi#method(0,1,'setSource(', 'int)', 'void'),
  \ javaapi#method(0,1,'getVersion(', ')', 'int'),
  \ javaapi#method(0,1,'setVersion(', 'int)', 'void'),
  \ javaapi#method(0,1,'getTransform(', ')', 'int'),
  \ javaapi#method(0,1,'setTransform(', 'int)', 'void'),
  \ ])

call javaapi#class('DLSRegion', '', [
  \ javaapi#field(1,1,'OPTION_SELFNONEXCLUSIVE', 'int'),
  \ javaapi#field(0,0,'modulators', 'List'),
  \ javaapi#field(0,0,'keyfrom', 'int'),
  \ javaapi#field(0,0,'keyto', 'int'),
  \ javaapi#field(0,0,'velfrom', 'int'),
  \ javaapi#field(0,0,'velto', 'int'),
  \ javaapi#field(0,0,'options', 'int'),
  \ javaapi#field(0,0,'exclusiveClass', 'int'),
  \ javaapi#field(0,0,'fusoptions', 'int'),
  \ javaapi#field(0,0,'phasegroup', 'int'),
  \ javaapi#field(0,0,'channel', 'long'),
  \ javaapi#field(0,0,'sample', 'DLSSample'),
  \ javaapi#field(0,0,'sampleoptions', 'DLSSampleOptions'),
  \ javaapi#method(0,1,'DLSRegion(', ')', ''),
  \ javaapi#method(0,1,'getModulators(', ')', 'List'),
  \ javaapi#method(0,1,'getChannel(', ')', 'long'),
  \ javaapi#method(0,1,'setChannel(', 'long)', 'void'),
  \ javaapi#method(0,1,'getExclusiveClass(', ')', 'int'),
  \ javaapi#method(0,1,'setExclusiveClass(', 'int)', 'void'),
  \ javaapi#method(0,1,'getFusoptions(', ')', 'int'),
  \ javaapi#method(0,1,'setFusoptions(', 'int)', 'void'),
  \ javaapi#method(0,1,'getKeyfrom(', ')', 'int'),
  \ javaapi#method(0,1,'setKeyfrom(', 'int)', 'void'),
  \ javaapi#method(0,1,'getKeyto(', ')', 'int'),
  \ javaapi#method(0,1,'setKeyto(', 'int)', 'void'),
  \ javaapi#method(0,1,'getOptions(', ')', 'int'),
  \ javaapi#method(0,1,'setOptions(', 'int)', 'void'),
  \ javaapi#method(0,1,'getPhasegroup(', ')', 'int'),
  \ javaapi#method(0,1,'setPhasegroup(', 'int)', 'void'),
  \ javaapi#method(0,1,'getSample(', ')', 'DLSSample'),
  \ javaapi#method(0,1,'setSample(', 'DLSSample)', 'void'),
  \ javaapi#method(0,1,'getVelfrom(', ')', 'int'),
  \ javaapi#method(0,1,'setVelfrom(', 'int)', 'void'),
  \ javaapi#method(0,1,'getVelto(', ')', 'int'),
  \ javaapi#method(0,1,'setVelto(', 'int)', 'void'),
  \ javaapi#method(0,1,'setModulators(', 'List<DLSModulator>)', 'void'),
  \ javaapi#method(0,1,'getSampleoptions(', ')', 'DLSSampleOptions'),
  \ javaapi#method(0,1,'setSampleoptions(', 'DLSSampleOptions)', 'void'),
  \ ])

call javaapi#class('DLSSample', 'SoundbankResource', [
  \ javaapi#field(0,0,'guid', 'byte'),
  \ javaapi#field(0,0,'info', 'DLSInfo'),
  \ javaapi#field(0,0,'sampleoptions', 'DLSSampleOptions'),
  \ javaapi#field(0,0,'data', 'ModelByteBuffer'),
  \ javaapi#field(0,0,'format', 'AudioFormat'),
  \ javaapi#method(0,1,'DLSSample(', 'Soundbank)', ''),
  \ javaapi#method(0,1,'DLSSample(', ')', ''),
  \ javaapi#method(0,1,'getInfo(', ')', 'DLSInfo'),
  \ javaapi#method(0,1,'getData(', ')', 'Object'),
  \ javaapi#method(0,1,'getDataBuffer(', ')', 'ModelByteBuffer'),
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,1,'setFormat(', 'AudioFormat)', 'void'),
  \ javaapi#method(0,1,'setData(', 'ModelByteBuffer)', 'void'),
  \ javaapi#method(0,1,'setData(', 'byte[])', 'void'),
  \ javaapi#method(0,1,'setData(', 'byte[], int, int)', 'void'),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'setName(', 'String)', 'void'),
  \ javaapi#method(0,1,'getSampleoptions(', ')', 'DLSSampleOptions'),
  \ javaapi#method(0,1,'setSampleoptions(', 'DLSSampleOptions)', 'void'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'getGuid(', ')', 'byte'),
  \ javaapi#method(0,1,'setGuid(', 'byte[])', 'void'),
  \ ])

call javaapi#class('DLSSampleLoop', '', [
  \ javaapi#field(1,1,'LOOP_TYPE_FORWARD', 'int'),
  \ javaapi#field(1,1,'LOOP_TYPE_RELEASE', 'int'),
  \ javaapi#field(0,0,'type', 'long'),
  \ javaapi#field(0,0,'start', 'long'),
  \ javaapi#field(0,0,'length', 'long'),
  \ javaapi#method(0,1,'DLSSampleLoop(', ')', ''),
  \ javaapi#method(0,1,'getLength(', ')', 'long'),
  \ javaapi#method(0,1,'setLength(', 'long)', 'void'),
  \ javaapi#method(0,1,'getStart(', ')', 'long'),
  \ javaapi#method(0,1,'setStart(', 'long)', 'void'),
  \ javaapi#method(0,1,'getType(', ')', 'long'),
  \ javaapi#method(0,1,'setType(', 'long)', 'void'),
  \ ])

call javaapi#class('DLSSampleOptions', '', [
  \ javaapi#field(0,0,'unitynote', 'int'),
  \ javaapi#field(0,0,'finetune', 'short'),
  \ javaapi#field(0,0,'attenuation', 'int'),
  \ javaapi#field(0,0,'options', 'long'),
  \ javaapi#field(0,0,'loops', 'List'),
  \ javaapi#method(0,1,'DLSSampleOptions(', ')', ''),
  \ javaapi#method(0,1,'getAttenuation(', ')', 'int'),
  \ javaapi#method(0,1,'setAttenuation(', 'int)', 'void'),
  \ javaapi#method(0,1,'getFinetune(', ')', 'short'),
  \ javaapi#method(0,1,'setFinetune(', 'short)', 'void'),
  \ javaapi#method(0,1,'getLoops(', ')', 'List'),
  \ javaapi#method(0,1,'getOptions(', ')', 'long'),
  \ javaapi#method(0,1,'setOptions(', 'long)', 'void'),
  \ javaapi#method(0,1,'getUnitynote(', ')', 'int'),
  \ javaapi#method(0,1,'setUnitynote(', 'int)', 'void'),
  \ ])

call javaapi#class('DLSSoundbank', 'Soundbank', [
  \ javaapi#method(0,1,'DLSSoundbank(', ')', ''),
  \ javaapi#method(0,1,'DLSSoundbank(', 'URL) throws IOException', ''),
  \ javaapi#method(0,1,'DLSSoundbank(', 'File) throws IOException', ''),
  \ javaapi#method(0,1,'DLSSoundbank(', 'InputStream) throws IOException', ''),
  \ javaapi#method(0,1,'save(', 'String) throws IOException', 'void'),
  \ javaapi#method(0,1,'save(', 'File) throws IOException', 'void'),
  \ javaapi#method(0,1,'save(', 'OutputStream) throws IOException', 'void'),
  \ javaapi#method(0,1,'getInfo(', ')', 'DLSInfo'),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'getVersion(', ')', 'String'),
  \ javaapi#method(0,1,'getVendor(', ')', 'String'),
  \ javaapi#method(0,1,'getDescription(', ')', 'String'),
  \ javaapi#method(0,1,'setName(', 'String)', 'void'),
  \ javaapi#method(0,1,'setVendor(', 'String)', 'void'),
  \ javaapi#method(0,1,'setDescription(', 'String)', 'void'),
  \ javaapi#method(0,1,'getResources(', ')', 'SoundbankResource'),
  \ javaapi#method(0,1,'getInstruments(', ')', 'DLSInstrument'),
  \ javaapi#method(0,1,'getSamples(', ')', 'DLSSample'),
  \ javaapi#method(0,1,'getInstrument(', 'Patch)', 'Instrument'),
  \ javaapi#method(0,1,'addResource(', 'SoundbankResource)', 'void'),
  \ javaapi#method(0,1,'removeResource(', 'SoundbankResource)', 'void'),
  \ javaapi#method(0,1,'addInstrument(', 'DLSInstrument)', 'void'),
  \ javaapi#method(0,1,'removeInstrument(', 'DLSInstrument)', 'void'),
  \ javaapi#method(0,1,'getMajor(', ')', 'long'),
  \ javaapi#method(0,1,'setMajor(', 'long)', 'void'),
  \ javaapi#method(0,1,'getMinor(', ')', 'long'),
  \ javaapi#method(0,1,'setMinor(', 'long)', 'void'),
  \ javaapi#method(0,1,'getInstruments(', ')', 'Instrument'),
  \ ])

call javaapi#class('DLSSoundbankReader', 'SoundbankReader', [
  \ javaapi#method(0,1,'DLSSoundbankReader(', ')', ''),
  \ javaapi#method(0,1,'getSoundbank(', 'URL) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ javaapi#method(0,1,'getSoundbank(', 'InputStream) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ javaapi#method(0,1,'getSoundbank(', 'File) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ ])

call javaapi#class('DataPusher', 'Runnable', [
  \ javaapi#method(0,1,'DataPusher(', 'SourceDataLine, AudioFormat, byte[], int)', ''),
  \ javaapi#method(0,1,'DataPusher(', 'SourceDataLine, AudioInputStream)', ''),
  \ javaapi#method(0,1,'start(', ')', 'void'),
  \ javaapi#method(0,1,'start(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'stop(', ')', 'void'),
  \ javaapi#method(0,1,'run(', ')', 'void'),
  \ ])

call javaapi#class('DirectAudioDevice', 'AbstractMixer', [
  \ javaapi#method(0,1,'getLine(', 'Info) throws LineUnavailableException', 'Line'),
  \ javaapi#method(0,1,'getMaxLines(', 'Info)', 'int'),
  \ javaapi#method(0,0,'implOpen(', ') throws LineUnavailableException', 'void'),
  \ javaapi#method(0,0,'implClose(', ')', 'void'),
  \ javaapi#method(0,0,'implStart(', ')', 'void'),
  \ javaapi#method(0,0,'implStop(', ')', 'void'),
  \ javaapi#method(1,0,'getSignOrEndianChangedFormat(', 'AudioFormat)', 'AudioFormat'),
  \ ])

call javaapi#class('DirectAudioDeviceProvider', 'MixerProvider', [
  \ javaapi#method(0,1,'DirectAudioDeviceProvider(', ')', ''),
  \ javaapi#method(0,1,'getMixerInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getMixer(', 'Info)', 'Mixer'),
  \ ])

call javaapi#class('EmergencySoundbank', '', [
  \ javaapi#method(0,1,'EmergencySoundbank(', ')', ''),
  \ javaapi#method(1,1,'createSoundbank(', ') throws Exception', 'SF2Soundbank'),
  \ javaapi#method(1,1,'new_bell(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_guitar1(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_guitar_dist(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_guitar_pick(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_gpiano(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_gpiano2(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_piano_hammer(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_piano1(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_epiano1(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_epiano2(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_bass1(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_synthbass(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_bass2(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_solostring(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_orchhit(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_string2(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_choir(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_organ(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_ch_organ(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_flute(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_horn(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_trumpet(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_brass_section(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_trombone(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_sax(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_oboe(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_bassoon(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_clarinet(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_timpani(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_melodic_toms(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_reverse_cymbal(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_snare_drum(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_bass_drum(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_tom(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_closed_hihat(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_open_hihat(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_crash_cymbal(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'new_side_stick(', 'SF2Soundbank)', 'SF2Layer'),
  \ javaapi#method(1,1,'newSimpleFFTSample(', 'SF2Soundbank, String, double[], double)', 'SF2Sample'),
  \ javaapi#method(1,1,'newSimpleFFTSample(', 'SF2Soundbank, String, double[], double, int)', 'SF2Sample'),
  \ javaapi#method(1,1,'newSimpleFFTSample_dist(', 'SF2Soundbank, String, double[], double, double)', 'SF2Sample'),
  \ javaapi#method(1,1,'newSimpleDrumSample(', 'SF2Soundbank, String, double[])', 'SF2Sample'),
  \ javaapi#method(1,1,'newLayer(', 'SF2Soundbank, String, SF2Sample)', 'SF2Layer'),
  \ javaapi#method(1,1,'newInstrument(', 'SF2Soundbank, String, Patch, )', 'SF2Instrument'),
  \ javaapi#method(1,1,'ifft(', 'double[])', 'void'),
  \ javaapi#method(1,1,'fft(', 'double[])', 'void'),
  \ javaapi#method(1,1,'complexGaussianDist(', 'double[], double, double, double)', 'void'),
  \ javaapi#method(1,1,'randomPhase(', 'double[])', 'void'),
  \ javaapi#method(1,1,'randomPhase(', 'double[], Random)', 'void'),
  \ javaapi#method(1,1,'normalize(', 'double[], double)', 'void'),
  \ javaapi#method(1,1,'normalize(', 'float[], double)', 'void'),
  \ javaapi#method(1,1,'realPart(', 'double[])', 'double'),
  \ javaapi#method(1,1,'imgPart(', 'double[])', 'double'),
  \ javaapi#method(1,1,'toFloat(', 'double[])', 'float'),
  \ javaapi#method(1,1,'toBytes(', 'float[], AudioFormat)', 'byte'),
  \ javaapi#method(1,1,'fadeUp(', 'double[], int)', 'void'),
  \ javaapi#method(1,1,'fadeUp(', 'float[], int)', 'void'),
  \ javaapi#method(1,1,'loopExtend(', 'double[], int)', 'double'),
  \ javaapi#method(1,1,'loopExtend(', 'float[], int)', 'float'),
  \ ])

call javaapi#class('EventDispatcher', 'Runnable', [
  \ javaapi#method(0,0,'processEvent(', 'EventInfo)', 'void'),
  \ javaapi#method(0,0,'dispatchEvents(', ')', 'void'),
  \ javaapi#method(0,1,'run(', ')', 'void'),
  \ ])

call javaapi#class('FFT', '', [
  \ javaapi#method(0,1,'FFT(', 'int, int)', ''),
  \ javaapi#method(0,1,'transform(', 'double[])', 'void'),
  \ ])

call javaapi#class('FastShortMessage', 'ShortMessage', [
  \ javaapi#method(0,1,'FastShortMessage(', 'int) throws InvalidMidiDataException', ''),
  \ javaapi#method(0,1,'FastShortMessage(', 'ShortMessage)', ''),
  \ javaapi#method(0,1,'getMessage(', ')', 'byte'),
  \ javaapi#method(0,1,'getLength(', ')', 'int'),
  \ javaapi#method(0,1,'setMessage(', 'int) throws InvalidMidiDataException', 'void'),
  \ javaapi#method(0,1,'setMessage(', 'int, int, int) throws InvalidMidiDataException', 'void'),
  \ javaapi#method(0,1,'setMessage(', 'int, int, int, int) throws InvalidMidiDataException', 'void'),
  \ javaapi#method(0,1,'getChannel(', ')', 'int'),
  \ javaapi#method(0,1,'getCommand(', ')', 'int'),
  \ javaapi#method(0,1,'getData1(', ')', 'int'),
  \ javaapi#method(0,1,'getData2(', ')', 'int'),
  \ javaapi#method(0,1,'getStatus(', ')', 'int'),
  \ javaapi#method(0,1,'clone(', ')', 'Object'),
  \ ])

call javaapi#class('FastSysexMessage', 'SysexMessage', [
  \ javaapi#method(0,1,'setMessage(', 'byte[], int) throws InvalidMidiDataException', 'void'),
  \ ])

call javaapi#class('InvalidDataException', 'IOException', [
  \ javaapi#method(0,1,'InvalidDataException(', ')', ''),
  \ javaapi#method(0,1,'InvalidDataException(', 'String)', ''),
  \ ])

call javaapi#class('InvalidFormatException', 'InvalidDataException', [
  \ javaapi#method(0,1,'InvalidFormatException(', ')', ''),
  \ javaapi#method(0,1,'InvalidFormatException(', 'String)', ''),
  \ ])

call javaapi#class('JARSoundbankReader', 'SoundbankReader', [
  \ javaapi#method(0,1,'JARSoundbankReader(', ')', ''),
  \ javaapi#method(0,1,'isZIP(', 'URL)', 'boolean'),
  \ javaapi#method(0,1,'getSoundbank(', 'URL) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ javaapi#method(0,1,'getSoundbank(', 'InputStream) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ javaapi#method(0,1,'getSoundbank(', 'File) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ ])

call javaapi#class('JDK13Services', '', [
  \ javaapi#method(1,1,'setCachingPeriod(', 'int)', 'void'),
  \ javaapi#method(1,1,'getProviders(', 'Class)', 'List'),
  \ javaapi#method(1,1,'getDefaultProviderClassName(', 'Class)', 'String'),
  \ javaapi#method(1,1,'getDefaultInstanceName(', 'Class)', 'String'),
  \ ])

call javaapi#class('JSSecurityManager', '', [
  \ ])

call javaapi#class('JavaSoundAudioClip', 'LineListener', [
  \ javaapi#method(0,1,'JavaSoundAudioClip(', 'InputStream) throws IOException', ''),
  \ javaapi#method(0,1,'play(', ')', 'void'),
  \ javaapi#method(0,1,'loop(', ')', 'void'),
  \ javaapi#method(0,1,'stop(', ')', 'void'),
  \ javaapi#method(0,1,'update(', 'LineEvent)', 'void'),
  \ javaapi#method(0,1,'meta(', 'MetaMessage)', 'void'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,0,'finalize(', ')', 'void'),
  \ ])

call javaapi#class('MidiDeviceReceiverEnvelope', 'MidiDeviceReceiver', [
  \ javaapi#method(0,1,'MidiDeviceReceiverEnvelope(', 'MidiDevice, Receiver)', ''),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ javaapi#method(0,1,'send(', 'MidiMessage, long)', 'void'),
  \ javaapi#method(0,1,'getMidiDevice(', ')', 'MidiDevice'),
  \ javaapi#method(0,1,'getReceiver(', ')', 'Receiver'),
  \ ])

call javaapi#class('MidiDeviceTransmitterEnvelope', 'MidiDeviceTransmitter', [
  \ javaapi#method(0,1,'MidiDeviceTransmitterEnvelope(', 'MidiDevice, Transmitter)', ''),
  \ javaapi#method(0,1,'setReceiver(', 'Receiver)', 'void'),
  \ javaapi#method(0,1,'getReceiver(', ')', 'Receiver'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ javaapi#method(0,1,'getMidiDevice(', ')', 'MidiDevice'),
  \ javaapi#method(0,1,'getTransmitter(', ')', 'Transmitter'),
  \ ])

call javaapi#class('MidiInDevice', 'AbstractMidiDevice', [
  \ javaapi#method(0,0,'implOpen(', ') throws MidiUnavailableException', 'void'),
  \ javaapi#method(0,0,'implClose(', ')', 'void'),
  \ javaapi#method(0,1,'getMicrosecondPosition(', ')', 'long'),
  \ javaapi#method(0,0,'hasTransmitters(', ')', 'boolean'),
  \ javaapi#method(0,0,'createTransmitter(', ')', 'Transmitter'),
  \ javaapi#method(0,1,'run(', ')', 'void'),
  \ ])

call javaapi#class('MidiInDeviceProvider', 'AbstractMidiDeviceProvider', [
  \ javaapi#method(0,1,'MidiInDeviceProvider(', ')', ''),
  \ ])

call javaapi#class('MidiOutDevice', 'AbstractMidiDevice', [
  \ javaapi#method(0,0,'implOpen(', ') throws MidiUnavailableException', 'void'),
  \ javaapi#method(0,0,'implClose(', ')', 'void'),
  \ javaapi#method(0,1,'getMicrosecondPosition(', ')', 'long'),
  \ javaapi#method(0,0,'hasReceivers(', ')', 'boolean'),
  \ javaapi#method(0,0,'createReceiver(', ')', 'Receiver'),
  \ ])

call javaapi#class('MidiOutDeviceProvider', 'AbstractMidiDeviceProvider', [
  \ javaapi#method(0,1,'MidiOutDeviceProvider(', ')', ''),
  \ ])

call javaapi#class('MidiUtils', '', [
  \ javaapi#field(1,1,'DEFAULT_TEMPO_MPQ', 'int'),
  \ javaapi#field(1,1,'META_END_OF_TRACK_TYPE', 'int'),
  \ javaapi#field(1,1,'META_TEMPO_TYPE', 'int'),
  \ javaapi#method(0,1,'MidiUtils(', ')', ''),
  \ javaapi#method(1,1,'isMetaEndOfTrack(', 'MidiMessage)', 'boolean'),
  \ javaapi#method(1,1,'isMetaTempo(', 'MidiMessage)', 'boolean'),
  \ javaapi#method(1,1,'getTempoMPQ(', 'MidiMessage)', 'int'),
  \ javaapi#method(1,1,'convertTempo(', 'double)', 'double'),
  \ javaapi#method(1,1,'ticks2microsec(', 'long, double, int)', 'long'),
  \ javaapi#method(1,1,'microsec2ticks(', 'long, double, int)', 'long'),
  \ javaapi#method(1,1,'tick2microsecond(', 'Sequence, long, TempoCache)', 'long'),
  \ javaapi#method(1,1,'microsecond2tick(', 'Sequence, long, TempoCache)', 'long'),
  \ javaapi#method(1,1,'tick2index(', 'Track, long)', 'int'),
  \ ])

call javaapi#class('ModelAbstractChannelMixer', 'ModelChannelMixer', [
  \ javaapi#method(0,1,'ModelAbstractChannelMixer(', ')', ''),
  \ javaapi#method(0,1,'process(', 'float[][], int, int)', 'boolean'),
  \ javaapi#method(0,1,'stop(', ')', 'void'),
  \ javaapi#method(0,1,'allNotesOff(', ')', 'void'),
  \ javaapi#method(0,1,'allSoundOff(', ')', 'void'),
  \ javaapi#method(0,1,'controlChange(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'getChannelPressure(', ')', 'int'),
  \ javaapi#method(0,1,'getController(', 'int)', 'int'),
  \ javaapi#method(0,1,'getMono(', ')', 'boolean'),
  \ javaapi#method(0,1,'getMute(', ')', 'boolean'),
  \ javaapi#method(0,1,'getOmni(', ')', 'boolean'),
  \ javaapi#method(0,1,'getPitchBend(', ')', 'int'),
  \ javaapi#method(0,1,'getPolyPressure(', 'int)', 'int'),
  \ javaapi#method(0,1,'getProgram(', ')', 'int'),
  \ javaapi#method(0,1,'getSolo(', ')', 'boolean'),
  \ javaapi#method(0,1,'localControl(', 'boolean)', 'boolean'),
  \ javaapi#method(0,1,'noteOff(', 'int)', 'void'),
  \ javaapi#method(0,1,'noteOff(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'noteOn(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'programChange(', 'int)', 'void'),
  \ javaapi#method(0,1,'programChange(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'resetAllControllers(', ')', 'void'),
  \ javaapi#method(0,1,'setChannelPressure(', 'int)', 'void'),
  \ javaapi#method(0,1,'setMono(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'setMute(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'setOmni(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'setPitchBend(', 'int)', 'void'),
  \ javaapi#method(0,1,'setPolyPressure(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'setSolo(', 'boolean)', 'void'),
  \ ])

call javaapi#class('ModelAbstractOscillator', 'Soundbank', [
  \ javaapi#field(0,0,'pitch', 'float'),
  \ javaapi#field(0,0,'samplerate', 'float'),
  \ javaapi#field(0,0,'channel', 'MidiChannel'),
  \ javaapi#field(0,0,'voice', 'VoiceStatus'),
  \ javaapi#field(0,0,'noteNumber', 'int'),
  \ javaapi#field(0,0,'velocity', 'int'),
  \ javaapi#field(0,0,'on', 'boolean'),
  \ javaapi#method(0,1,'ModelAbstractOscillator(', ')', ''),
  \ javaapi#method(0,1,'init(', ')', 'void'),
  \ javaapi#method(0,1,'close(', ') throws IOException', 'void'),
  \ javaapi#method(0,1,'noteOff(', 'int)', 'void'),
  \ javaapi#method(0,1,'noteOn(', 'MidiChannel, VoiceStatus, int, int)', 'void'),
  \ javaapi#method(0,1,'read(', 'float[][], int, int) throws IOException', 'int'),
  \ javaapi#method(0,1,'getChannel(', ')', 'MidiChannel'),
  \ javaapi#method(0,1,'getVoice(', ')', 'VoiceStatus'),
  \ javaapi#method(0,1,'getNoteNumber(', ')', 'int'),
  \ javaapi#method(0,1,'getVelocity(', ')', 'int'),
  \ javaapi#method(0,1,'isOn(', ')', 'boolean'),
  \ javaapi#method(0,1,'setPitch(', 'float)', 'void'),
  \ javaapi#method(0,1,'getPitch(', ')', 'float'),
  \ javaapi#method(0,1,'setSampleRate(', 'float)', 'void'),
  \ javaapi#method(0,1,'getSampleRate(', ')', 'float'),
  \ javaapi#method(0,1,'getAttenuation(', ')', 'float'),
  \ javaapi#method(0,1,'getChannels(', ')', 'int'),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'getPatch(', ')', 'Patch'),
  \ javaapi#method(0,1,'open(', 'float)', 'ModelOscillatorStream'),
  \ javaapi#method(0,1,'getPerformer(', ')', 'ModelPerformer'),
  \ javaapi#method(0,1,'getInstrument(', ')', 'ModelInstrument'),
  \ javaapi#method(0,1,'getSoundBank(', ')', 'Soundbank'),
  \ javaapi#method(0,1,'getDescription(', ')', 'String'),
  \ javaapi#method(0,1,'getInstrument(', 'Patch)', 'Instrument'),
  \ javaapi#method(0,1,'getInstruments(', ')', 'Instrument'),
  \ javaapi#method(0,1,'getResources(', ')', 'SoundbankResource'),
  \ javaapi#method(0,1,'getVendor(', ')', 'String'),
  \ javaapi#method(0,1,'getVersion(', ')', 'String'),
  \ ])

call javaapi#class('ModelByteBuffer', '', [
  \ javaapi#method(0,1,'ModelByteBuffer(', 'byte[])', ''),
  \ javaapi#method(0,1,'ModelByteBuffer(', 'byte[], int, int)', ''),
  \ javaapi#method(0,1,'ModelByteBuffer(', 'File)', ''),
  \ javaapi#method(0,1,'ModelByteBuffer(', 'File, long, long)', ''),
  \ javaapi#method(0,1,'writeTo(', 'OutputStream) throws IOException', 'void'),
  \ javaapi#method(0,1,'getInputStream(', ')', 'InputStream'),
  \ javaapi#method(0,1,'subbuffer(', 'long)', 'ModelByteBuffer'),
  \ javaapi#method(0,1,'subbuffer(', 'long, long)', 'ModelByteBuffer'),
  \ javaapi#method(0,1,'subbuffer(', 'long, long, boolean)', 'ModelByteBuffer'),
  \ javaapi#method(0,1,'array(', ')', 'byte'),
  \ javaapi#method(0,1,'arrayOffset(', ')', 'long'),
  \ javaapi#method(0,1,'capacity(', ')', 'long'),
  \ javaapi#method(0,1,'getRoot(', ')', 'ModelByteBuffer'),
  \ javaapi#method(0,1,'getFile(', ')', 'File'),
  \ javaapi#method(0,1,'getFilePointer(', ')', 'long'),
  \ javaapi#method(1,1,'loadAll(', 'Collection<ModelByteBuffer>) throws IOException', 'void'),
  \ javaapi#method(0,1,'load(', ') throws IOException', 'void'),
  \ javaapi#method(0,1,'unload(', ')', 'void'),
  \ ])

call javaapi#class('ModelByteBufferWavetable', 'ModelWavetable', [
  \ javaapi#method(0,1,'ModelByteBufferWavetable(', 'ModelByteBuffer)', ''),
  \ javaapi#method(0,1,'ModelByteBufferWavetable(', 'ModelByteBuffer, float)', ''),
  \ javaapi#method(0,1,'ModelByteBufferWavetable(', 'ModelByteBuffer, AudioFormat)', ''),
  \ javaapi#method(0,1,'ModelByteBufferWavetable(', 'ModelByteBuffer, AudioFormat, float)', ''),
  \ javaapi#method(0,1,'set8BitExtensionBuffer(', 'ModelByteBuffer)', 'void'),
  \ javaapi#method(0,1,'get8BitExtensionBuffer(', ')', 'ModelByteBuffer'),
  \ javaapi#method(0,1,'getBuffer(', ')', 'ModelByteBuffer'),
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,1,'openStream(', ')', 'AudioFloatInputStream'),
  \ javaapi#method(0,1,'getChannels(', ')', 'int'),
  \ javaapi#method(0,1,'open(', 'float)', 'ModelOscillatorStream'),
  \ javaapi#method(0,1,'getAttenuation(', ')', 'float'),
  \ javaapi#method(0,1,'setAttenuation(', 'float)', 'void'),
  \ javaapi#method(0,1,'getLoopLength(', ')', 'float'),
  \ javaapi#method(0,1,'setLoopLength(', 'float)', 'void'),
  \ javaapi#method(0,1,'getLoopStart(', ')', 'float'),
  \ javaapi#method(0,1,'setLoopStart(', 'float)', 'void'),
  \ javaapi#method(0,1,'setLoopType(', 'int)', 'void'),
  \ javaapi#method(0,1,'getLoopType(', ')', 'int'),
  \ javaapi#method(0,1,'getPitchcorrection(', ')', 'float'),
  \ javaapi#method(0,1,'setPitchcorrection(', 'float)', 'void'),
  \ ])

call javaapi#interface('ModelChannelMixer', 'MidiChannel', [
  \ javaapi#method(0,1,'process(', 'float[][], int, int)', 'boolean'),
  \ javaapi#method(0,1,'stop(', ')', 'void'),
  \ ])

call javaapi#class('ModelConnectionBlock', '', [
  \ javaapi#method(0,1,'ModelConnectionBlock(', ')', ''),
  \ javaapi#method(0,1,'ModelConnectionBlock(', 'double, ModelDestination)', ''),
  \ javaapi#method(0,1,'ModelConnectionBlock(', 'ModelSource, ModelDestination)', ''),
  \ javaapi#method(0,1,'ModelConnectionBlock(', 'ModelSource, double, ModelDestination)', ''),
  \ javaapi#method(0,1,'ModelConnectionBlock(', 'ModelSource, ModelSource, ModelDestination)', ''),
  \ javaapi#method(0,1,'ModelConnectionBlock(', 'ModelSource, ModelSource, double, ModelDestination)', ''),
  \ javaapi#method(0,1,'getDestination(', ')', 'ModelDestination'),
  \ javaapi#method(0,1,'setDestination(', 'ModelDestination)', 'void'),
  \ javaapi#method(0,1,'getScale(', ')', 'double'),
  \ javaapi#method(0,1,'setScale(', 'double)', 'void'),
  \ javaapi#method(0,1,'getSources(', ')', 'ModelSource'),
  \ javaapi#method(0,1,'setSources(', 'ModelSource[])', 'void'),
  \ javaapi#method(0,1,'addSource(', 'ModelSource)', 'void'),
  \ ])

call javaapi#class('ModelDestination', '', [
  \ javaapi#field(1,1,'DESTINATION_NONE', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_KEYNUMBER', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_VELOCITY', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_PITCH', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_GAIN', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_PAN', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_REVERB', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_CHORUS', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_LFO1_DELAY', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_LFO1_FREQ', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_LFO2_DELAY', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_LFO2_FREQ', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG1_DELAY', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG1_ATTACK', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG1_HOLD', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG1_DECAY', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG1_SUSTAIN', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG1_RELEASE', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG1_SHUTDOWN', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG2_DELAY', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG2_ATTACK', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG2_HOLD', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG2_DECAY', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG2_SUSTAIN', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG2_RELEASE', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_EG2_SHUTDOWN', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_FILTER_FREQ', 'ModelIdentifier'),
  \ javaapi#field(1,1,'DESTINATION_FILTER_Q', 'ModelIdentifier'),
  \ javaapi#method(0,1,'ModelDestination(', ')', ''),
  \ javaapi#method(0,1,'ModelDestination(', 'ModelIdentifier)', ''),
  \ javaapi#method(0,1,'getIdentifier(', ')', 'ModelIdentifier'),
  \ javaapi#method(0,1,'setIdentifier(', 'ModelIdentifier)', 'void'),
  \ javaapi#method(0,1,'getTransform(', ')', 'ModelTransform'),
  \ javaapi#method(0,1,'setTransform(', 'ModelTransform)', 'void'),
  \ ])

call javaapi#interface('ModelDirectedPlayer', '', [
  \ javaapi#method(0,1,'play(', 'int, ModelConnectionBlock[])', 'void'),
  \ ])

call javaapi#interface('ModelDirector', '', [
  \ javaapi#method(0,1,'noteOn(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'noteOff(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ ])

call javaapi#class('ModelIdentifier', '', [
  \ javaapi#method(0,1,'ModelIdentifier(', 'String)', ''),
  \ javaapi#method(0,1,'ModelIdentifier(', 'String, int)', ''),
  \ javaapi#method(0,1,'ModelIdentifier(', 'String, String)', ''),
  \ javaapi#method(0,1,'ModelIdentifier(', 'String, String, int)', ''),
  \ javaapi#method(0,1,'getInstance(', ')', 'int'),
  \ javaapi#method(0,1,'setInstance(', 'int)', 'void'),
  \ javaapi#method(0,1,'getObject(', ')', 'String'),
  \ javaapi#method(0,1,'setObject(', 'String)', 'void'),
  \ javaapi#method(0,1,'getVariable(', ')', 'String'),
  \ javaapi#method(0,1,'setVariable(', 'String)', 'void'),
  \ javaapi#method(0,1,'hashCode(', ')', 'int'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('ModelInstrument', 'Instrument', [
  \ javaapi#method(0,0,'ModelInstrument(', 'Soundbank, Patch, String, Class<?>)', ''),
  \ javaapi#method(0,1,'getDirector(', 'ModelPerformer[], MidiChannel, ModelDirectedPlayer)', 'ModelDirector'),
  \ javaapi#method(0,1,'getPerformers(', ')', 'ModelPerformer'),
  \ javaapi#method(0,1,'getChannelMixer(', 'MidiChannel, AudioFormat)', 'ModelChannelMixer'),
  \ javaapi#method(0,1,'getPatchAlias(', ')', 'Patch'),
  \ javaapi#method(0,1,'getKeys(', ')', 'String'),
  \ javaapi#method(0,1,'getChannels(', ')', 'boolean'),
  \ ])

call javaapi#class('ModelInstrumentComparator', 'Comparator', [
  \ javaapi#method(0,1,'ModelInstrumentComparator(', ')', ''),
  \ javaapi#method(0,1,'compare(', 'Instrument, Instrument)', 'int'),
  \ javaapi#method(0,1,'compare(', 'Object, Object)', 'int'),
  \ ])

call javaapi#class('ModelMappedInstrument', 'ModelInstrument', [
  \ javaapi#method(0,1,'ModelMappedInstrument(', 'ModelInstrument, Patch)', ''),
  \ javaapi#method(0,1,'getData(', ')', 'Object'),
  \ javaapi#method(0,1,'getPerformers(', ')', 'ModelPerformer'),
  \ javaapi#method(0,1,'getDirector(', 'ModelPerformer[], MidiChannel, ModelDirectedPlayer)', 'ModelDirector'),
  \ javaapi#method(0,1,'getChannelMixer(', 'MidiChannel, AudioFormat)', 'ModelChannelMixer'),
  \ ])

call javaapi#interface('ModelOscillator', '', [
  \ javaapi#method(0,1,'getChannels(', ')', 'int'),
  \ javaapi#method(0,1,'getAttenuation(', ')', 'float'),
  \ javaapi#method(0,1,'open(', 'float)', 'ModelOscillatorStream'),
  \ ])

call javaapi#interface('ModelOscillatorStream', '', [
  \ javaapi#method(0,1,'setPitch(', 'float)', 'void'),
  \ javaapi#method(0,1,'noteOn(', 'MidiChannel, VoiceStatus, int, int)', 'void'),
  \ javaapi#method(0,1,'noteOff(', 'int)', 'void'),
  \ javaapi#method(0,1,'read(', 'float[][], int, int) throws IOException', 'int'),
  \ javaapi#method(0,1,'close(', ') throws IOException', 'void'),
  \ ])

call javaapi#class('ModelPatch', 'Patch', [
  \ javaapi#method(0,1,'ModelPatch(', 'int, int)', ''),
  \ javaapi#method(0,1,'ModelPatch(', 'int, int, boolean)', ''),
  \ javaapi#method(0,1,'isPercussion(', ')', 'boolean'),
  \ ])

call javaapi#class('ModelPerformer', '', [
  \ javaapi#method(0,1,'ModelPerformer(', ')', ''),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'setName(', 'String)', 'void'),
  \ javaapi#method(0,1,'getConnectionBlocks(', ')', 'List'),
  \ javaapi#method(0,1,'setConnectionBlocks(', 'List<ModelConnectionBlock>)', 'void'),
  \ javaapi#method(0,1,'getOscillators(', ')', 'List'),
  \ javaapi#method(0,1,'getExclusiveClass(', ')', 'int'),
  \ javaapi#method(0,1,'setExclusiveClass(', 'int)', 'void'),
  \ javaapi#method(0,1,'isSelfNonExclusive(', ')', 'boolean'),
  \ javaapi#method(0,1,'setSelfNonExclusive(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getKeyFrom(', ')', 'int'),
  \ javaapi#method(0,1,'setKeyFrom(', 'int)', 'void'),
  \ javaapi#method(0,1,'getKeyTo(', ')', 'int'),
  \ javaapi#method(0,1,'setKeyTo(', 'int)', 'void'),
  \ javaapi#method(0,1,'getVelFrom(', ')', 'int'),
  \ javaapi#method(0,1,'setVelFrom(', 'int)', 'void'),
  \ javaapi#method(0,1,'getVelTo(', ')', 'int'),
  \ javaapi#method(0,1,'setVelTo(', 'int)', 'void'),
  \ javaapi#method(0,1,'isReleaseTriggered(', ')', 'boolean'),
  \ javaapi#method(0,1,'setReleaseTriggered(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getUserObject(', ')', 'Object'),
  \ javaapi#method(0,1,'setUserObject(', 'Object)', 'void'),
  \ javaapi#method(0,1,'isDefaultConnectionsEnabled(', ')', 'boolean'),
  \ javaapi#method(0,1,'setDefaultConnectionsEnabled(', 'boolean)', 'void'),
  \ ])

call javaapi#class('ModelSource', '', [
  \ javaapi#field(1,1,'SOURCE_NONE', 'ModelIdentifier'),
  \ javaapi#field(1,1,'SOURCE_NOTEON_KEYNUMBER', 'ModelIdentifier'),
  \ javaapi#field(1,1,'SOURCE_NOTEON_VELOCITY', 'ModelIdentifier'),
  \ javaapi#field(1,1,'SOURCE_EG1', 'ModelIdentifier'),
  \ javaapi#field(1,1,'SOURCE_EG2', 'ModelIdentifier'),
  \ javaapi#field(1,1,'SOURCE_LFO1', 'ModelIdentifier'),
  \ javaapi#field(1,1,'SOURCE_LFO2', 'ModelIdentifier'),
  \ javaapi#field(1,1,'SOURCE_MIDI_PITCH', 'ModelIdentifier'),
  \ javaapi#field(1,1,'SOURCE_MIDI_CHANNEL_PRESSURE', 'ModelIdentifier'),
  \ javaapi#field(1,1,'SOURCE_MIDI_POLY_PRESSURE', 'ModelIdentifier'),
  \ javaapi#field(1,1,'SOURCE_MIDI_CC_0', 'ModelIdentifier'),
  \ javaapi#field(1,1,'SOURCE_MIDI_RPN_0', 'ModelIdentifier'),
  \ javaapi#method(0,1,'ModelSource(', ')', ''),
  \ javaapi#method(0,1,'ModelSource(', 'ModelIdentifier)', ''),
  \ javaapi#method(0,1,'ModelSource(', 'ModelIdentifier, boolean)', ''),
  \ javaapi#method(0,1,'ModelSource(', 'ModelIdentifier, boolean, boolean)', ''),
  \ javaapi#method(0,1,'ModelSource(', 'ModelIdentifier, boolean, boolean, int)', ''),
  \ javaapi#method(0,1,'ModelSource(', 'ModelIdentifier, ModelTransform)', ''),
  \ javaapi#method(0,1,'getIdentifier(', ')', 'ModelIdentifier'),
  \ javaapi#method(0,1,'setIdentifier(', 'ModelIdentifier)', 'void'),
  \ javaapi#method(0,1,'getTransform(', ')', 'ModelTransform'),
  \ javaapi#method(0,1,'setTransform(', 'ModelTransform)', 'void'),
  \ ])

call javaapi#class('ModelStandardDirector', 'ModelDirector', [
  \ javaapi#method(0,1,'ModelStandardDirector(', 'ModelPerformer[], ModelDirectedPlayer)', ''),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ javaapi#method(0,1,'noteOff(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'noteOn(', 'int, int)', 'void'),
  \ ])

call javaapi#class('ModelStandardIndexedDirector', 'ModelDirector', [
  \ javaapi#method(0,1,'ModelStandardIndexedDirector(', 'ModelPerformer[], ModelDirectedPlayer)', ''),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ javaapi#method(0,1,'noteOff(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'noteOn(', 'int, int)', 'void'),
  \ ])

call javaapi#class('ModelStandardTransform', 'ModelTransform', [
  \ javaapi#field(1,1,'DIRECTION_MIN2MAX', 'boolean'),
  \ javaapi#field(1,1,'DIRECTION_MAX2MIN', 'boolean'),
  \ javaapi#field(1,1,'POLARITY_UNIPOLAR', 'boolean'),
  \ javaapi#field(1,1,'POLARITY_BIPOLAR', 'boolean'),
  \ javaapi#field(1,1,'TRANSFORM_LINEAR', 'int'),
  \ javaapi#field(1,1,'TRANSFORM_CONCAVE', 'int'),
  \ javaapi#field(1,1,'TRANSFORM_CONVEX', 'int'),
  \ javaapi#field(1,1,'TRANSFORM_SWITCH', 'int'),
  \ javaapi#field(1,1,'TRANSFORM_ABSOLUTE', 'int'),
  \ javaapi#method(0,1,'ModelStandardTransform(', ')', ''),
  \ javaapi#method(0,1,'ModelStandardTransform(', 'boolean)', ''),
  \ javaapi#method(0,1,'ModelStandardTransform(', 'boolean, boolean)', ''),
  \ javaapi#method(0,1,'ModelStandardTransform(', 'boolean, boolean, int)', ''),
  \ javaapi#method(0,1,'transform(', 'double)', 'double'),
  \ javaapi#method(0,1,'getDirection(', ')', 'boolean'),
  \ javaapi#method(0,1,'setDirection(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getPolarity(', ')', 'boolean'),
  \ javaapi#method(0,1,'setPolarity(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getTransform(', ')', 'int'),
  \ javaapi#method(0,1,'setTransform(', 'int)', 'void'),
  \ ])

call javaapi#interface('ModelTransform', '', [
  \ javaapi#method(0,1,'transform(', 'double)', 'double'),
  \ ])

call javaapi#interface('ModelWavetable', 'ModelOscillator', [
  \ javaapi#field(1,1,'LOOP_TYPE_OFF', 'int'),
  \ javaapi#field(1,1,'LOOP_TYPE_FORWARD', 'int'),
  \ javaapi#field(1,1,'LOOP_TYPE_RELEASE', 'int'),
  \ javaapi#field(1,1,'LOOP_TYPE_PINGPONG', 'int'),
  \ javaapi#field(1,1,'LOOP_TYPE_REVERSE', 'int'),
  \ javaapi#method(0,1,'openStream(', ')', 'AudioFloatInputStream'),
  \ javaapi#method(0,1,'getLoopLength(', ')', 'float'),
  \ javaapi#method(0,1,'getLoopStart(', ')', 'float'),
  \ javaapi#method(0,1,'getLoopType(', ')', 'int'),
  \ javaapi#method(0,1,'getPitchcorrection(', ')', 'float'),
  \ ])

call javaapi#class('PCMtoPCMCodec', 'SunCodec', [
  \ javaapi#method(0,1,'PCMtoPCMCodec(', ')', ''),
  \ javaapi#method(0,1,'getTargetEncodings(', 'AudioFormat)', 'Encoding'),
  \ javaapi#method(0,1,'getTargetFormats(', 'Encoding, AudioFormat)', 'AudioFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'Encoding, AudioInputStream)', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'AudioFormat, AudioInputStream)', 'AudioInputStream'),
  \ javaapi#method(0,1,'getTargetEncodings(', ')', 'Encoding'),
  \ javaapi#method(0,1,'getSourceEncodings(', ')', 'Encoding'),
  \ ])

call javaapi#class('Platform', '', [
  \ javaapi#field(1,1,'LIB_MAIN', 'int'),
  \ javaapi#field(1,1,'LIB_ALSA', 'int'),
  \ javaapi#field(1,1,'LIB_DSOUND', 'int'),
  \ javaapi#field(1,1,'FEATURE_MIDIIO', 'int'),
  \ javaapi#field(1,1,'FEATURE_PORTS', 'int'),
  \ javaapi#field(1,1,'FEATURE_DIRECT_AUDIO', 'int'),
  \ ])

call javaapi#class('PortMixer', 'AbstractMixer', [
  \ javaapi#method(0,1,'getLine(', 'Info) throws LineUnavailableException', 'Line'),
  \ javaapi#method(0,1,'getMaxLines(', 'Info)', 'int'),
  \ javaapi#method(0,0,'implOpen(', ') throws LineUnavailableException', 'void'),
  \ javaapi#method(0,0,'implClose(', ')', 'void'),
  \ javaapi#method(0,0,'implStart(', ')', 'void'),
  \ javaapi#method(0,0,'implStop(', ')', 'void'),
  \ ])

call javaapi#class('PortMixerProvider', 'MixerProvider', [
  \ javaapi#method(0,1,'PortMixerProvider(', ')', ''),
  \ javaapi#method(0,1,'getMixerInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getMixer(', 'Info)', 'Mixer'),
  \ ])

call javaapi#class('Printer', '', [
  \ javaapi#method(1,1,'err(', 'String)', 'void'),
  \ javaapi#method(1,1,'debug(', 'String)', 'void'),
  \ javaapi#method(1,1,'trace(', 'String)', 'void'),
  \ javaapi#method(1,1,'verbose(', 'String)', 'void'),
  \ javaapi#method(1,1,'release(', 'String)', 'void'),
  \ javaapi#method(1,1,'println(', 'String)', 'void'),
  \ javaapi#method(1,1,'println(', ')', 'void'),
  \ ])

call javaapi#class('RIFFInvalidDataException', 'InvalidDataException', [
  \ javaapi#method(0,1,'RIFFInvalidDataException(', ')', ''),
  \ javaapi#method(0,1,'RIFFInvalidDataException(', 'String)', ''),
  \ ])

call javaapi#class('RIFFInvalidFormatException', 'InvalidFormatException', [
  \ javaapi#method(0,1,'RIFFInvalidFormatException(', ')', ''),
  \ javaapi#method(0,1,'RIFFInvalidFormatException(', 'String)', ''),
  \ ])

call javaapi#class('RIFFReader', 'InputStream', [
  \ javaapi#method(0,1,'RIFFReader(', 'InputStream) throws IOException', ''),
  \ javaapi#method(0,1,'getFilePointer(', ') throws IOException', 'long'),
  \ javaapi#method(0,1,'hasNextChunk(', ') throws IOException', 'boolean'),
  \ javaapi#method(0,1,'nextChunk(', ') throws IOException', 'RIFFReader'),
  \ javaapi#method(0,1,'getFormat(', ')', 'String'),
  \ javaapi#method(0,1,'getType(', ')', 'String'),
  \ javaapi#method(0,1,'getSize(', ')', 'long'),
  \ javaapi#method(0,1,'read(', ') throws IOException', 'int'),
  \ javaapi#method(0,1,'read(', 'byte[], int, int) throws IOException', 'int'),
  \ javaapi#method(0,1,'readFully(', 'byte[]) throws IOException', 'void'),
  \ javaapi#method(0,1,'readFully(', 'byte[], int, int) throws IOException', 'void'),
  \ javaapi#method(0,1,'skipBytes(', 'long) throws IOException', 'long'),
  \ javaapi#method(0,1,'skip(', 'long) throws IOException', 'long'),
  \ javaapi#method(0,1,'available(', ')', 'int'),
  \ javaapi#method(0,1,'finish(', ') throws IOException', 'void'),
  \ javaapi#method(0,1,'readString(', 'int) throws IOException', 'String'),
  \ javaapi#method(0,1,'readByte(', ') throws IOException', 'byte'),
  \ javaapi#method(0,1,'readShort(', ') throws IOException', 'short'),
  \ javaapi#method(0,1,'readInt(', ') throws IOException', 'int'),
  \ javaapi#method(0,1,'readLong(', ') throws IOException', 'long'),
  \ javaapi#method(0,1,'readUnsignedByte(', ') throws IOException', 'int'),
  \ javaapi#method(0,1,'readUnsignedShort(', ') throws IOException', 'int'),
  \ javaapi#method(0,1,'readUnsignedInt(', ') throws IOException', 'long'),
  \ javaapi#method(0,1,'close(', ') throws IOException', 'void'),
  \ ])

call javaapi#class('RIFFWriter', 'OutputStream', [
  \ javaapi#method(0,1,'RIFFWriter(', 'String, String) throws IOException', ''),
  \ javaapi#method(0,1,'RIFFWriter(', 'File, String) throws IOException', ''),
  \ javaapi#method(0,1,'RIFFWriter(', 'OutputStream, String) throws IOException', ''),
  \ javaapi#method(0,1,'seek(', 'long) throws IOException', 'void'),
  \ javaapi#method(0,1,'getFilePointer(', ') throws IOException', 'long'),
  \ javaapi#method(0,1,'setWriteOverride(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getWriteOverride(', ')', 'boolean'),
  \ javaapi#method(0,1,'close(', ') throws IOException', 'void'),
  \ javaapi#method(0,1,'write(', 'int) throws IOException', 'void'),
  \ javaapi#method(0,1,'write(', 'byte[], int, int) throws IOException', 'void'),
  \ javaapi#method(0,1,'writeList(', 'String) throws IOException', 'RIFFWriter'),
  \ javaapi#method(0,1,'writeChunk(', 'String) throws IOException', 'RIFFWriter'),
  \ javaapi#method(0,1,'writeString(', 'String) throws IOException', 'void'),
  \ javaapi#method(0,1,'writeString(', 'String, int) throws IOException', 'void'),
  \ javaapi#method(0,1,'writeByte(', 'int) throws IOException', 'void'),
  \ javaapi#method(0,1,'writeShort(', 'short) throws IOException', 'void'),
  \ javaapi#method(0,1,'writeInt(', 'int) throws IOException', 'void'),
  \ javaapi#method(0,1,'writeLong(', 'long) throws IOException', 'void'),
  \ javaapi#method(0,1,'writeUnsignedByte(', 'int) throws IOException', 'void'),
  \ javaapi#method(0,1,'writeUnsignedShort(', 'int) throws IOException', 'void'),
  \ javaapi#method(0,1,'writeUnsignedInt(', 'long) throws IOException', 'void'),
  \ ])

call javaapi#class('RealTimeSequencer', 'AbstractMidiDevice', [
  \ javaapi#method(0,0,'RealTimeSequencer(', ') throws MidiUnavailableException', ''),
  \ javaapi#method(0,1,'setSequence(', 'Sequence) throws InvalidMidiDataException', 'void'),
  \ javaapi#method(0,1,'setSequence(', 'InputStream) throws IOException, InvalidMidiDataException', 'void'),
  \ javaapi#method(0,1,'getSequence(', ')', 'Sequence'),
  \ javaapi#method(0,1,'start(', ')', 'void'),
  \ javaapi#method(0,1,'stop(', ')', 'void'),
  \ javaapi#method(0,1,'isRunning(', ')', 'boolean'),
  \ javaapi#method(0,1,'startRecording(', ')', 'void'),
  \ javaapi#method(0,1,'stopRecording(', ')', 'void'),
  \ javaapi#method(0,1,'isRecording(', ')', 'boolean'),
  \ javaapi#method(0,1,'recordEnable(', 'Track, int)', 'void'),
  \ javaapi#method(0,1,'recordDisable(', 'Track)', 'void'),
  \ javaapi#method(0,1,'getTempoInBPM(', ')', 'float'),
  \ javaapi#method(0,1,'setTempoInBPM(', 'float)', 'void'),
  \ javaapi#method(0,1,'getTempoInMPQ(', ')', 'float'),
  \ javaapi#method(0,1,'setTempoInMPQ(', 'float)', 'void'),
  \ javaapi#method(0,1,'setTempoFactor(', 'float)', 'void'),
  \ javaapi#method(0,1,'getTempoFactor(', ')', 'float'),
  \ javaapi#method(0,1,'getTickLength(', ')', 'long'),
  \ javaapi#method(0,1,'getTickPosition(', ')', 'long'),
  \ javaapi#method(0,1,'setTickPosition(', 'long)', 'void'),
  \ javaapi#method(0,1,'getMicrosecondLength(', ')', 'long'),
  \ javaapi#method(0,1,'getMicrosecondPosition(', ')', 'long'),
  \ javaapi#method(0,1,'setMicrosecondPosition(', 'long)', 'void'),
  \ javaapi#method(0,1,'setMasterSyncMode(', 'SyncMode)', 'void'),
  \ javaapi#method(0,1,'getMasterSyncMode(', ')', 'SyncMode'),
  \ javaapi#method(0,1,'getMasterSyncModes(', ')', 'SyncMode'),
  \ javaapi#method(0,1,'setSlaveSyncMode(', 'SyncMode)', 'void'),
  \ javaapi#method(0,1,'getSlaveSyncMode(', ')', 'SyncMode'),
  \ javaapi#method(0,1,'getSlaveSyncModes(', ')', 'SyncMode'),
  \ javaapi#method(0,0,'getTrackCount(', ')', 'int'),
  \ javaapi#method(0,1,'setTrackMute(', 'int, boolean)', 'void'),
  \ javaapi#method(0,1,'getTrackMute(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'setTrackSolo(', 'int, boolean)', 'void'),
  \ javaapi#method(0,1,'getTrackSolo(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'addMetaEventListener(', 'MetaEventListener)', 'boolean'),
  \ javaapi#method(0,1,'removeMetaEventListener(', 'MetaEventListener)', 'void'),
  \ javaapi#method(0,1,'addControllerEventListener(', 'ControllerEventListener, int[])', 'int'),
  \ javaapi#method(0,1,'removeControllerEventListener(', 'ControllerEventListener, int[])', 'int'),
  \ javaapi#method(0,1,'setLoopStartPoint(', 'long)', 'void'),
  \ javaapi#method(0,1,'getLoopStartPoint(', ')', 'long'),
  \ javaapi#method(0,1,'setLoopEndPoint(', 'long)', 'void'),
  \ javaapi#method(0,1,'getLoopEndPoint(', ')', 'long'),
  \ javaapi#method(0,1,'setLoopCount(', 'int)', 'void'),
  \ javaapi#method(0,1,'getLoopCount(', ')', 'int'),
  \ javaapi#method(0,0,'implOpen(', ') throws MidiUnavailableException', 'void'),
  \ javaapi#method(0,0,'implClose(', ')', 'void'),
  \ javaapi#method(0,0,'implStart(', ')', 'void'),
  \ javaapi#method(0,0,'implStop(', ')', 'void'),
  \ javaapi#method(0,0,'sendMetaEvents(', 'MidiMessage)', 'void'),
  \ javaapi#method(0,0,'sendControllerEvents(', 'MidiMessage)', 'void'),
  \ javaapi#method(0,0,'hasReceivers(', ')', 'boolean'),
  \ javaapi#method(0,0,'createReceiver(', ') throws MidiUnavailableException', 'Receiver'),
  \ javaapi#method(0,0,'hasTransmitters(', ')', 'boolean'),
  \ javaapi#method(0,0,'createTransmitter(', ') throws MidiUnavailableException', 'Transmitter'),
  \ javaapi#method(0,1,'setAutoConnect(', 'Receiver)', 'void'),
  \ ])

call javaapi#class('RealTimeSequencerProvider', 'MidiDeviceProvider', [
  \ javaapi#method(0,1,'RealTimeSequencerProvider(', ')', ''),
  \ javaapi#method(0,1,'getDeviceInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getDevice(', 'Info)', 'MidiDevice'),
  \ ])

call javaapi#interface('ReferenceCountingDevice', '', [
  \ javaapi#method(0,1,'getReceiverReferenceCounting(', ') throws MidiUnavailableException', 'Receiver'),
  \ javaapi#method(0,1,'getTransmitterReferenceCounting(', ') throws MidiUnavailableException', 'Transmitter'),
  \ ])

call javaapi#class('SF2GlobalRegion', 'SF2Region', [
  \ javaapi#method(0,1,'SF2GlobalRegion(', ')', ''),
  \ ])

call javaapi#class('SF2Instrument', 'ModelInstrument', [
  \ javaapi#field(0,0,'name', 'String'),
  \ javaapi#field(0,0,'preset', 'int'),
  \ javaapi#field(0,0,'bank', 'int'),
  \ javaapi#field(0,0,'library', 'long'),
  \ javaapi#field(0,0,'genre', 'long'),
  \ javaapi#field(0,0,'morphology', 'long'),
  \ javaapi#field(0,0,'globalregion', 'SF2GlobalRegion'),
  \ javaapi#field(0,0,'regions', 'List'),
  \ javaapi#method(0,1,'SF2Instrument(', ')', ''),
  \ javaapi#method(0,1,'SF2Instrument(', 'SF2Soundbank)', ''),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'setName(', 'String)', 'void'),
  \ javaapi#method(0,1,'getPatch(', ')', 'Patch'),
  \ javaapi#method(0,1,'setPatch(', 'Patch)', 'void'),
  \ javaapi#method(0,1,'getData(', ')', 'Object'),
  \ javaapi#method(0,1,'getGenre(', ')', 'long'),
  \ javaapi#method(0,1,'setGenre(', 'long)', 'void'),
  \ javaapi#method(0,1,'getLibrary(', ')', 'long'),
  \ javaapi#method(0,1,'setLibrary(', 'long)', 'void'),
  \ javaapi#method(0,1,'getMorphology(', ')', 'long'),
  \ javaapi#method(0,1,'setMorphology(', 'long)', 'void'),
  \ javaapi#method(0,1,'getRegions(', ')', 'List'),
  \ javaapi#method(0,1,'getGlobalRegion(', ')', 'SF2GlobalRegion'),
  \ javaapi#method(0,1,'setGlobalZone(', 'SF2GlobalRegion)', 'void'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'getPerformers(', ')', 'ModelPerformer'),
  \ javaapi#method(1,0,'convertDestination(', 'int, double[], ModelSource[])', 'ModelDestination'),
  \ ])

call javaapi#class('SF2InstrumentRegion', 'SF2Region', [
  \ javaapi#field(0,0,'layer', 'SF2Layer'),
  \ javaapi#method(0,1,'SF2InstrumentRegion(', ')', ''),
  \ javaapi#method(0,1,'getLayer(', ')', 'SF2Layer'),
  \ javaapi#method(0,1,'setLayer(', 'SF2Layer)', 'void'),
  \ ])

call javaapi#class('SF2Layer', 'SoundbankResource', [
  \ javaapi#field(0,0,'name', 'String'),
  \ javaapi#field(0,0,'globalregion', 'SF2GlobalRegion'),
  \ javaapi#field(0,0,'regions', 'List'),
  \ javaapi#method(0,1,'SF2Layer(', 'SF2Soundbank)', ''),
  \ javaapi#method(0,1,'SF2Layer(', ')', ''),
  \ javaapi#method(0,1,'getData(', ')', 'Object'),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'setName(', 'String)', 'void'),
  \ javaapi#method(0,1,'getRegions(', ')', 'List'),
  \ javaapi#method(0,1,'getGlobalRegion(', ')', 'SF2GlobalRegion'),
  \ javaapi#method(0,1,'setGlobalZone(', 'SF2GlobalRegion)', 'void'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('SF2LayerRegion', 'SF2Region', [
  \ javaapi#field(0,0,'sample', 'SF2Sample'),
  \ javaapi#method(0,1,'SF2LayerRegion(', ')', ''),
  \ javaapi#method(0,1,'getSample(', ')', 'SF2Sample'),
  \ javaapi#method(0,1,'setSample(', 'SF2Sample)', 'void'),
  \ ])

call javaapi#class('SF2Modulator', '', [
  \ javaapi#field(1,1,'SOURCE_NONE', 'int'),
  \ javaapi#field(1,1,'SOURCE_NOTE_ON_VELOCITY', 'int'),
  \ javaapi#field(1,1,'SOURCE_NOTE_ON_KEYNUMBER', 'int'),
  \ javaapi#field(1,1,'SOURCE_POLY_PRESSURE', 'int'),
  \ javaapi#field(1,1,'SOURCE_CHANNEL_PRESSURE', 'int'),
  \ javaapi#field(1,1,'SOURCE_PITCH_WHEEL', 'int'),
  \ javaapi#field(1,1,'SOURCE_PITCH_SENSITIVITY', 'int'),
  \ javaapi#field(1,1,'SOURCE_MIDI_CONTROL', 'int'),
  \ javaapi#field(1,1,'SOURCE_DIRECTION_MIN_MAX', 'int'),
  \ javaapi#field(1,1,'SOURCE_DIRECTION_MAX_MIN', 'int'),
  \ javaapi#field(1,1,'SOURCE_POLARITY_UNIPOLAR', 'int'),
  \ javaapi#field(1,1,'SOURCE_POLARITY_BIPOLAR', 'int'),
  \ javaapi#field(1,1,'SOURCE_TYPE_LINEAR', 'int'),
  \ javaapi#field(1,1,'SOURCE_TYPE_CONCAVE', 'int'),
  \ javaapi#field(1,1,'SOURCE_TYPE_CONVEX', 'int'),
  \ javaapi#field(1,1,'SOURCE_TYPE_SWITCH', 'int'),
  \ javaapi#field(1,1,'TRANSFORM_LINEAR', 'int'),
  \ javaapi#field(1,1,'TRANSFORM_ABSOLUTE', 'int'),
  \ javaapi#field(0,0,'sourceOperator', 'int'),
  \ javaapi#field(0,0,'destinationOperator', 'int'),
  \ javaapi#field(0,0,'amount', 'short'),
  \ javaapi#field(0,0,'amountSourceOperator', 'int'),
  \ javaapi#field(0,0,'transportOperator', 'int'),
  \ javaapi#method(0,1,'SF2Modulator(', ')', ''),
  \ javaapi#method(0,1,'getAmount(', ')', 'short'),
  \ javaapi#method(0,1,'setAmount(', 'short)', 'void'),
  \ javaapi#method(0,1,'getAmountSourceOperator(', ')', 'int'),
  \ javaapi#method(0,1,'setAmountSourceOperator(', 'int)', 'void'),
  \ javaapi#method(0,1,'getTransportOperator(', ')', 'int'),
  \ javaapi#method(0,1,'setTransportOperator(', 'int)', 'void'),
  \ javaapi#method(0,1,'getDestinationOperator(', ')', 'int'),
  \ javaapi#method(0,1,'setDestinationOperator(', 'int)', 'void'),
  \ javaapi#method(0,1,'getSourceOperator(', ')', 'int'),
  \ javaapi#method(0,1,'setSourceOperator(', 'int)', 'void'),
  \ ])

call javaapi#class('SF2Region', '', [
  \ javaapi#field(1,1,'GENERATOR_STARTADDRSOFFSET', 'int'),
  \ javaapi#field(1,1,'GENERATOR_ENDADDRSOFFSET', 'int'),
  \ javaapi#field(1,1,'GENERATOR_STARTLOOPADDRSOFFSET', 'int'),
  \ javaapi#field(1,1,'GENERATOR_ENDLOOPADDRSOFFSET', 'int'),
  \ javaapi#field(1,1,'GENERATOR_STARTADDRSCOARSEOFFSET', 'int'),
  \ javaapi#field(1,1,'GENERATOR_MODLFOTOPITCH', 'int'),
  \ javaapi#field(1,1,'GENERATOR_VIBLFOTOPITCH', 'int'),
  \ javaapi#field(1,1,'GENERATOR_MODENVTOPITCH', 'int'),
  \ javaapi#field(1,1,'GENERATOR_INITIALFILTERFC', 'int'),
  \ javaapi#field(1,1,'GENERATOR_INITIALFILTERQ', 'int'),
  \ javaapi#field(1,1,'GENERATOR_MODLFOTOFILTERFC', 'int'),
  \ javaapi#field(1,1,'GENERATOR_MODENVTOFILTERFC', 'int'),
  \ javaapi#field(1,1,'GENERATOR_ENDADDRSCOARSEOFFSET', 'int'),
  \ javaapi#field(1,1,'GENERATOR_MODLFOTOVOLUME', 'int'),
  \ javaapi#field(1,1,'GENERATOR_UNUSED1', 'int'),
  \ javaapi#field(1,1,'GENERATOR_CHORUSEFFECTSSEND', 'int'),
  \ javaapi#field(1,1,'GENERATOR_REVERBEFFECTSSEND', 'int'),
  \ javaapi#field(1,1,'GENERATOR_PAN', 'int'),
  \ javaapi#field(1,1,'GENERATOR_UNUSED2', 'int'),
  \ javaapi#field(1,1,'GENERATOR_UNUSED3', 'int'),
  \ javaapi#field(1,1,'GENERATOR_UNUSED4', 'int'),
  \ javaapi#field(1,1,'GENERATOR_DELAYMODLFO', 'int'),
  \ javaapi#field(1,1,'GENERATOR_FREQMODLFO', 'int'),
  \ javaapi#field(1,1,'GENERATOR_DELAYVIBLFO', 'int'),
  \ javaapi#field(1,1,'GENERATOR_FREQVIBLFO', 'int'),
  \ javaapi#field(1,1,'GENERATOR_DELAYMODENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_ATTACKMODENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_HOLDMODENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_DECAYMODENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_SUSTAINMODENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_RELEASEMODENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_KEYNUMTOMODENVHOLD', 'int'),
  \ javaapi#field(1,1,'GENERATOR_KEYNUMTOMODENVDECAY', 'int'),
  \ javaapi#field(1,1,'GENERATOR_DELAYVOLENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_ATTACKVOLENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_HOLDVOLENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_DECAYVOLENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_SUSTAINVOLENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_RELEASEVOLENV', 'int'),
  \ javaapi#field(1,1,'GENERATOR_KEYNUMTOVOLENVHOLD', 'int'),
  \ javaapi#field(1,1,'GENERATOR_KEYNUMTOVOLENVDECAY', 'int'),
  \ javaapi#field(1,1,'GENERATOR_INSTRUMENT', 'int'),
  \ javaapi#field(1,1,'GENERATOR_RESERVED1', 'int'),
  \ javaapi#field(1,1,'GENERATOR_KEYRANGE', 'int'),
  \ javaapi#field(1,1,'GENERATOR_VELRANGE', 'int'),
  \ javaapi#field(1,1,'GENERATOR_STARTLOOPADDRSCOARSEOFFSET', 'int'),
  \ javaapi#field(1,1,'GENERATOR_KEYNUM', 'int'),
  \ javaapi#field(1,1,'GENERATOR_VELOCITY', 'int'),
  \ javaapi#field(1,1,'GENERATOR_INITIALATTENUATION', 'int'),
  \ javaapi#field(1,1,'GENERATOR_RESERVED2', 'int'),
  \ javaapi#field(1,1,'GENERATOR_ENDLOOPADDRSCOARSEOFFSET', 'int'),
  \ javaapi#field(1,1,'GENERATOR_COARSETUNE', 'int'),
  \ javaapi#field(1,1,'GENERATOR_FINETUNE', 'int'),
  \ javaapi#field(1,1,'GENERATOR_SAMPLEID', 'int'),
  \ javaapi#field(1,1,'GENERATOR_SAMPLEMODES', 'int'),
  \ javaapi#field(1,1,'GENERATOR_RESERVED3', 'int'),
  \ javaapi#field(1,1,'GENERATOR_SCALETUNING', 'int'),
  \ javaapi#field(1,1,'GENERATOR_EXCLUSIVECLASS', 'int'),
  \ javaapi#field(1,1,'GENERATOR_OVERRIDINGROOTKEY', 'int'),
  \ javaapi#field(1,1,'GENERATOR_UNUSED5', 'int'),
  \ javaapi#field(1,1,'GENERATOR_ENDOPR', 'int'),
  \ javaapi#field(0,0,'generators', 'Short>'),
  \ javaapi#field(0,0,'modulators', 'List'),
  \ javaapi#method(0,1,'SF2Region(', ')', ''),
  \ javaapi#method(0,1,'getGenerators(', ')', 'Short>'),
  \ javaapi#method(0,1,'contains(', 'int)', 'boolean'),
  \ javaapi#method(1,1,'getDefaultValue(', 'int)', 'short'),
  \ javaapi#method(0,1,'getShort(', 'int)', 'short'),
  \ javaapi#method(0,1,'putShort(', 'int, short)', 'void'),
  \ javaapi#method(0,1,'getBytes(', 'int)', 'byte'),
  \ javaapi#method(0,1,'putBytes(', 'int, byte[])', 'void'),
  \ javaapi#method(0,1,'getInteger(', 'int)', 'int'),
  \ javaapi#method(0,1,'putInteger(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'getModulators(', ')', 'List'),
  \ ])

call javaapi#class('SF2Sample', 'SoundbankResource', [
  \ javaapi#field(0,0,'name', 'String'),
  \ javaapi#field(0,0,'startLoop', 'long'),
  \ javaapi#field(0,0,'endLoop', 'long'),
  \ javaapi#field(0,0,'sampleRate', 'long'),
  \ javaapi#field(0,0,'originalPitch', 'int'),
  \ javaapi#field(0,0,'pitchCorrection', 'byte'),
  \ javaapi#field(0,0,'sampleLink', 'int'),
  \ javaapi#field(0,0,'sampleType', 'int'),
  \ javaapi#field(0,0,'data', 'ModelByteBuffer'),
  \ javaapi#field(0,0,'data24', 'ModelByteBuffer'),
  \ javaapi#method(0,1,'SF2Sample(', 'Soundbank)', ''),
  \ javaapi#method(0,1,'SF2Sample(', ')', ''),
  \ javaapi#method(0,1,'getData(', ')', 'Object'),
  \ javaapi#method(0,1,'getDataBuffer(', ')', 'ModelByteBuffer'),
  \ javaapi#method(0,1,'getData24Buffer(', ')', 'ModelByteBuffer'),
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,1,'setData(', 'ModelByteBuffer)', 'void'),
  \ javaapi#method(0,1,'setData(', 'byte[])', 'void'),
  \ javaapi#method(0,1,'setData(', 'byte[], int, int)', 'void'),
  \ javaapi#method(0,1,'setData24(', 'ModelByteBuffer)', 'void'),
  \ javaapi#method(0,1,'setData24(', 'byte[])', 'void'),
  \ javaapi#method(0,1,'setData24(', 'byte[], int, int)', 'void'),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'setName(', 'String)', 'void'),
  \ javaapi#method(0,1,'getEndLoop(', ')', 'long'),
  \ javaapi#method(0,1,'setEndLoop(', 'long)', 'void'),
  \ javaapi#method(0,1,'getOriginalPitch(', ')', 'int'),
  \ javaapi#method(0,1,'setOriginalPitch(', 'int)', 'void'),
  \ javaapi#method(0,1,'getPitchCorrection(', ')', 'byte'),
  \ javaapi#method(0,1,'setPitchCorrection(', 'byte)', 'void'),
  \ javaapi#method(0,1,'getSampleLink(', ')', 'int'),
  \ javaapi#method(0,1,'setSampleLink(', 'int)', 'void'),
  \ javaapi#method(0,1,'getSampleRate(', ')', 'long'),
  \ javaapi#method(0,1,'setSampleRate(', 'long)', 'void'),
  \ javaapi#method(0,1,'getSampleType(', ')', 'int'),
  \ javaapi#method(0,1,'setSampleType(', 'int)', 'void'),
  \ javaapi#method(0,1,'getStartLoop(', ')', 'long'),
  \ javaapi#method(0,1,'setStartLoop(', 'long)', 'void'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('SF2Soundbank', 'Soundbank', [
  \ javaapi#field(0,0,'major', 'int'),
  \ javaapi#field(0,0,'minor', 'int'),
  \ javaapi#field(0,0,'targetEngine', 'String'),
  \ javaapi#field(0,0,'name', 'String'),
  \ javaapi#field(0,0,'romName', 'String'),
  \ javaapi#field(0,0,'romVersionMajor', 'int'),
  \ javaapi#field(0,0,'romVersionMinor', 'int'),
  \ javaapi#field(0,0,'creationDate', 'String'),
  \ javaapi#field(0,0,'engineers', 'String'),
  \ javaapi#field(0,0,'product', 'String'),
  \ javaapi#field(0,0,'copyright', 'String'),
  \ javaapi#field(0,0,'comments', 'String'),
  \ javaapi#field(0,0,'tools', 'String'),
  \ javaapi#method(0,1,'SF2Soundbank(', ')', ''),
  \ javaapi#method(0,1,'SF2Soundbank(', 'URL) throws IOException', ''),
  \ javaapi#method(0,1,'SF2Soundbank(', 'File) throws IOException', ''),
  \ javaapi#method(0,1,'SF2Soundbank(', 'InputStream) throws IOException', ''),
  \ javaapi#method(0,1,'save(', 'String) throws IOException', 'void'),
  \ javaapi#method(0,1,'save(', 'File) throws IOException', 'void'),
  \ javaapi#method(0,1,'save(', 'OutputStream) throws IOException', 'void'),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'getVersion(', ')', 'String'),
  \ javaapi#method(0,1,'getVendor(', ')', 'String'),
  \ javaapi#method(0,1,'getDescription(', ')', 'String'),
  \ javaapi#method(0,1,'setName(', 'String)', 'void'),
  \ javaapi#method(0,1,'setVendor(', 'String)', 'void'),
  \ javaapi#method(0,1,'setDescription(', 'String)', 'void'),
  \ javaapi#method(0,1,'getResources(', ')', 'SoundbankResource'),
  \ javaapi#method(0,1,'getInstruments(', ')', 'SF2Instrument'),
  \ javaapi#method(0,1,'getLayers(', ')', 'SF2Layer'),
  \ javaapi#method(0,1,'getSamples(', ')', 'SF2Sample'),
  \ javaapi#method(0,1,'getInstrument(', 'Patch)', 'Instrument'),
  \ javaapi#method(0,1,'getCreationDate(', ')', 'String'),
  \ javaapi#method(0,1,'setCreationDate(', 'String)', 'void'),
  \ javaapi#method(0,1,'getProduct(', ')', 'String'),
  \ javaapi#method(0,1,'setProduct(', 'String)', 'void'),
  \ javaapi#method(0,1,'getRomName(', ')', 'String'),
  \ javaapi#method(0,1,'setRomName(', 'String)', 'void'),
  \ javaapi#method(0,1,'getRomVersionMajor(', ')', 'int'),
  \ javaapi#method(0,1,'setRomVersionMajor(', 'int)', 'void'),
  \ javaapi#method(0,1,'getRomVersionMinor(', ')', 'int'),
  \ javaapi#method(0,1,'setRomVersionMinor(', 'int)', 'void'),
  \ javaapi#method(0,1,'getTargetEngine(', ')', 'String'),
  \ javaapi#method(0,1,'setTargetEngine(', 'String)', 'void'),
  \ javaapi#method(0,1,'getTools(', ')', 'String'),
  \ javaapi#method(0,1,'setTools(', 'String)', 'void'),
  \ javaapi#method(0,1,'addResource(', 'SoundbankResource)', 'void'),
  \ javaapi#method(0,1,'removeResource(', 'SoundbankResource)', 'void'),
  \ javaapi#method(0,1,'addInstrument(', 'SF2Instrument)', 'void'),
  \ javaapi#method(0,1,'removeInstrument(', 'SF2Instrument)', 'void'),
  \ javaapi#method(0,1,'getInstruments(', ')', 'Instrument'),
  \ ])

call javaapi#class('SF2SoundbankReader', 'SoundbankReader', [
  \ javaapi#method(0,1,'SF2SoundbankReader(', ')', ''),
  \ javaapi#method(0,1,'getSoundbank(', 'URL) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ javaapi#method(0,1,'getSoundbank(', 'InputStream) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ javaapi#method(0,1,'getSoundbank(', 'File) throws InvalidMidiDataException, IOException', 'Soundbank'),
  \ ])

call javaapi#class('SMFParser', '', [
  \ javaapi#method(0,1,'SMFParser(', ')', ''),
  \ ])

call javaapi#class('SimpleInstrument', 'ModelInstrument', [
  \ javaapi#field(0,0,'preset', 'int'),
  \ javaapi#field(0,0,'bank', 'int'),
  \ javaapi#field(0,0,'percussion', 'boolean'),
  \ javaapi#field(0,0,'name', 'String'),
  \ javaapi#field(0,0,'parts', 'List'),
  \ javaapi#method(0,1,'SimpleInstrument(', ')', ''),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelPerformer[], int, int, int, int, int)', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelPerformer[], int, int, int, int)', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelPerformer[], int, int)', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelPerformer[])', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelPerformer, int, int, int, int, int)', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelPerformer, int, int, int, int)', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelPerformer, int, int)', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelPerformer)', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelInstrument, int, int, int, int, int)', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelInstrument, int, int, int, int)', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelInstrument, int, int)', 'void'),
  \ javaapi#method(0,1,'add(', 'ModelInstrument)', 'void'),
  \ javaapi#method(0,1,'getPerformers(', ')', 'ModelPerformer'),
  \ javaapi#method(0,1,'getData(', ')', 'Object'),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'setName(', 'String)', 'void'),
  \ javaapi#method(0,1,'getPatch(', ')', 'ModelPatch'),
  \ javaapi#method(0,1,'setPatch(', 'Patch)', 'void'),
  \ javaapi#method(0,1,'getPatch(', ')', 'Patch'),
  \ ])

call javaapi#class('SimpleSoundbank', 'Soundbank', [
  \ javaapi#method(0,1,'SimpleSoundbank(', ')', ''),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'getVersion(', ')', 'String'),
  \ javaapi#method(0,1,'getVendor(', ')', 'String'),
  \ javaapi#method(0,1,'getDescription(', ')', 'String'),
  \ javaapi#method(0,1,'setDescription(', 'String)', 'void'),
  \ javaapi#method(0,1,'setName(', 'String)', 'void'),
  \ javaapi#method(0,1,'setVendor(', 'String)', 'void'),
  \ javaapi#method(0,1,'setVersion(', 'String)', 'void'),
  \ javaapi#method(0,1,'getResources(', ')', 'SoundbankResource'),
  \ javaapi#method(0,1,'getInstruments(', ')', 'Instrument'),
  \ javaapi#method(0,1,'getInstrument(', 'Patch)', 'Instrument'),
  \ javaapi#method(0,1,'addResource(', 'SoundbankResource)', 'void'),
  \ javaapi#method(0,1,'removeResource(', 'SoundbankResource)', 'void'),
  \ javaapi#method(0,1,'addInstrument(', 'Instrument)', 'void'),
  \ javaapi#method(0,1,'removeInstrument(', 'Instrument)', 'void'),
  \ javaapi#method(0,1,'addAllInstruments(', 'Soundbank)', 'void'),
  \ javaapi#method(0,1,'removeAllInstruments(', 'Soundbank)', 'void'),
  \ ])

call javaapi#class('SoftAbstractResampler', 'SoftResampler', [
  \ javaapi#method(0,1,'SoftAbstractResampler(', ')', ''),
  \ javaapi#method(0,1,'getPadding(', ')', 'int'),
  \ javaapi#method(0,1,'interpolate(', 'float[], float[], float, float[], float, float[], int[], int)', 'void'),
  \ javaapi#method(0,1,'openStreamer(', ')', 'SoftResamplerStreamer'),
  \ ])

call javaapi#class('SoftAudioBuffer', '', [
  \ javaapi#method(0,1,'SoftAudioBuffer(', 'int, AudioFormat)', ''),
  \ javaapi#method(0,1,'swap(', 'SoftAudioBuffer)', 'void'),
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,1,'getSize(', ')', 'int'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'isSilent(', ')', 'boolean'),
  \ javaapi#method(0,1,'array(', ')', 'float'),
  \ javaapi#method(0,1,'get(', 'byte[], int)', 'void'),
  \ ])

call javaapi#interface('SoftAudioProcessor', '', [
  \ javaapi#method(0,1,'globalParameterControlChange(', 'int[], long, long)', 'void'),
  \ javaapi#method(0,1,'init(', 'float, float)', 'void'),
  \ javaapi#method(0,1,'setInput(', 'int, SoftAudioBuffer)', 'void'),
  \ javaapi#method(0,1,'setOutput(', 'int, SoftAudioBuffer)', 'void'),
  \ javaapi#method(0,1,'setMixMode(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'processAudio(', ')', 'void'),
  \ javaapi#method(0,1,'processControlLogic(', ')', 'void'),
  \ ])

call javaapi#class('SoftAudioPusher', 'Runnable', [
  \ javaapi#method(0,1,'SoftAudioPusher(', 'SourceDataLine, AudioInputStream, int)', ''),
  \ javaapi#method(0,1,'start(', ')', 'void'),
  \ javaapi#method(0,1,'stop(', ')', 'void'),
  \ javaapi#method(0,1,'run(', ')', 'void'),
  \ ])

call javaapi#class('SoftChannel', 'ModelDirectedPlayer', [
  \ javaapi#field(0,0,'portamento_time', 'double'),
  \ javaapi#field(0,0,'portamento_lastnote', 'int'),
  \ javaapi#field(0,0,'portamento_lastnote_ix', 'int'),
  \ javaapi#field(0,0,'tuning', 'SoftTuning'),
  \ javaapi#field(0,0,'tuning_bank', 'int'),
  \ javaapi#field(0,0,'tuning_program', 'int'),
  \ javaapi#field(0,0,'current_instrument', 'SoftInstrument'),
  \ javaapi#field(0,0,'current_mixer', 'ModelChannelMixer'),
  \ javaapi#field(0,0,'current_director', 'ModelDirector'),
  \ javaapi#field(0,0,'cds_control_number', 'int'),
  \ javaapi#field(0,0,'cds_control_connections', 'ModelConnectionBlock'),
  \ javaapi#field(0,0,'cds_channelpressure_connections', 'ModelConnectionBlock'),
  \ javaapi#field(0,0,'cds_polypressure_connections', 'ModelConnectionBlock'),
  \ javaapi#field(0,0,'sustain', 'boolean'),
  \ javaapi#field(0,0,'keybasedcontroller_active', 'boolean[]'),
  \ javaapi#field(0,0,'keybasedcontroller_value', 'double[]'),
  \ javaapi#method(0,1,'SoftChannel(', 'SoftSynthesizer, int)', ''),
  \ javaapi#method(0,0,'initVoice(', 'SoftVoice, SoftPerformer, int, int, int, int, ModelConnectionBlock[], ModelChannelMixer, boolean)', 'void'),
  \ javaapi#method(0,1,'noteOn(', 'int, int)', 'void'),
  \ javaapi#method(0,0,'noteOn(', 'int, int, int)', 'void'),
  \ javaapi#method(0,1,'noteOff(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'play(', 'int, ModelConnectionBlock[])', 'void'),
  \ javaapi#method(0,1,'noteOff(', 'int)', 'void'),
  \ javaapi#method(0,1,'setPolyPressure(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'getPolyPressure(', 'int)', 'int'),
  \ javaapi#method(0,1,'setChannelPressure(', 'int)', 'void'),
  \ javaapi#method(0,1,'getChannelPressure(', ')', 'int'),
  \ javaapi#method(0,0,'applyInstrumentCustomization(', ')', 'void'),
  \ javaapi#method(0,1,'mapPolyPressureToDestination(', 'int[], int[])', 'void'),
  \ javaapi#method(0,1,'mapChannelPressureToDestination(', 'int[], int[])', 'void'),
  \ javaapi#method(0,1,'mapControlToDestination(', 'int, int[], int[])', 'void'),
  \ javaapi#method(0,1,'controlChangePerNote(', 'int, int, int)', 'void'),
  \ javaapi#method(0,1,'getControlPerNote(', 'int, int)', 'int'),
  \ javaapi#method(0,1,'controlChange(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'getController(', 'int)', 'int'),
  \ javaapi#method(0,1,'tuningChange(', 'int)', 'void'),
  \ javaapi#method(0,1,'tuningChange(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'programChange(', 'int)', 'void'),
  \ javaapi#method(0,1,'programChange(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'getProgram(', ')', 'int'),
  \ javaapi#method(0,1,'setPitchBend(', 'int)', 'void'),
  \ javaapi#method(0,1,'getPitchBend(', ')', 'int'),
  \ javaapi#method(0,1,'nrpnChange(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'rpnChange(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'resetAllControllers(', ')', 'void'),
  \ javaapi#method(0,1,'resetAllControllers(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'allNotesOff(', ')', 'void'),
  \ javaapi#method(0,1,'allSoundOff(', ')', 'void'),
  \ javaapi#method(0,1,'localControl(', 'boolean)', 'boolean'),
  \ javaapi#method(0,1,'setMono(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getMono(', ')', 'boolean'),
  \ javaapi#method(0,1,'setOmni(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getOmni(', ')', 'boolean'),
  \ javaapi#method(0,1,'setMute(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getMute(', ')', 'boolean'),
  \ javaapi#method(0,1,'setSolo(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getSolo(', ')', 'boolean'),
  \ ])

call javaapi#class('SoftChannelProxy', 'MidiChannel', [
  \ javaapi#method(0,1,'SoftChannelProxy(', ')', ''),
  \ javaapi#method(0,1,'getChannel(', ')', 'MidiChannel'),
  \ javaapi#method(0,1,'setChannel(', 'MidiChannel)', 'void'),
  \ javaapi#method(0,1,'allNotesOff(', ')', 'void'),
  \ javaapi#method(0,1,'allSoundOff(', ')', 'void'),
  \ javaapi#method(0,1,'controlChange(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'getChannelPressure(', ')', 'int'),
  \ javaapi#method(0,1,'getController(', 'int)', 'int'),
  \ javaapi#method(0,1,'getMono(', ')', 'boolean'),
  \ javaapi#method(0,1,'getMute(', ')', 'boolean'),
  \ javaapi#method(0,1,'getOmni(', ')', 'boolean'),
  \ javaapi#method(0,1,'getPitchBend(', ')', 'int'),
  \ javaapi#method(0,1,'getPolyPressure(', 'int)', 'int'),
  \ javaapi#method(0,1,'getProgram(', ')', 'int'),
  \ javaapi#method(0,1,'getSolo(', ')', 'boolean'),
  \ javaapi#method(0,1,'localControl(', 'boolean)', 'boolean'),
  \ javaapi#method(0,1,'noteOff(', 'int)', 'void'),
  \ javaapi#method(0,1,'noteOff(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'noteOn(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'programChange(', 'int)', 'void'),
  \ javaapi#method(0,1,'programChange(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'resetAllControllers(', ')', 'void'),
  \ javaapi#method(0,1,'setChannelPressure(', 'int)', 'void'),
  \ javaapi#method(0,1,'setMono(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'setMute(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'setOmni(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'setPitchBend(', 'int)', 'void'),
  \ javaapi#method(0,1,'setPolyPressure(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'setSolo(', 'boolean)', 'void'),
  \ ])

call javaapi#class('SoftChorus', 'SoftAudioProcessor', [
  \ javaapi#method(0,1,'SoftChorus(', ')', ''),
  \ javaapi#method(0,1,'init(', 'float, float)', 'void'),
  \ javaapi#method(0,1,'globalParameterControlChange(', 'int[], long, long)', 'void'),
  \ javaapi#method(0,1,'processControlLogic(', ')', 'void'),
  \ javaapi#method(0,1,'processAudio(', ')', 'void'),
  \ javaapi#method(0,1,'setInput(', 'int, SoftAudioBuffer)', 'void'),
  \ javaapi#method(0,1,'setMixMode(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'setOutput(', 'int, SoftAudioBuffer)', 'void'),
  \ ])

call javaapi#interface('SoftControl', '', [
  \ javaapi#method(0,1,'get(', 'int, String)', 'double'),
  \ ])

call javaapi#class('SoftCubicResampler', 'SoftAbstractResampler', [
  \ javaapi#method(0,1,'SoftCubicResampler(', ')', ''),
  \ javaapi#method(0,1,'getPadding(', ')', 'int'),
  \ javaapi#method(0,1,'interpolate(', 'float[], float[], float, float[], float, float[], int[], int)', 'void'),
  \ ])

call javaapi#class('SoftEnvelopeGenerator', 'SoftProcess', [
  \ javaapi#field(1,1,'EG_OFF', 'int'),
  \ javaapi#field(1,1,'EG_DELAY', 'int'),
  \ javaapi#field(1,1,'EG_ATTACK', 'int'),
  \ javaapi#field(1,1,'EG_HOLD', 'int'),
  \ javaapi#field(1,1,'EG_DECAY', 'int'),
  \ javaapi#field(1,1,'EG_SUSTAIN', 'int'),
  \ javaapi#field(1,1,'EG_RELEASE', 'int'),
  \ javaapi#field(1,1,'EG_SHUTDOWN', 'int'),
  \ javaapi#field(1,1,'EG_END', 'int'),
  \ javaapi#method(0,1,'SoftEnvelopeGenerator(', ')', ''),
  \ javaapi#method(0,1,'reset(', ')', 'void'),
  \ javaapi#method(0,1,'init(', 'SoftSynthesizer)', 'void'),
  \ javaapi#method(0,1,'get(', 'int, String)', 'double'),
  \ javaapi#method(0,1,'processControlLogic(', ')', 'void'),
  \ ])

call javaapi#class('SoftFilter', '', [
  \ javaapi#field(1,1,'FILTERTYPE_LP6', 'int'),
  \ javaapi#field(1,1,'FILTERTYPE_LP12', 'int'),
  \ javaapi#field(1,1,'FILTERTYPE_HP12', 'int'),
  \ javaapi#field(1,1,'FILTERTYPE_BP12', 'int'),
  \ javaapi#field(1,1,'FILTERTYPE_NP12', 'int'),
  \ javaapi#field(1,1,'FILTERTYPE_LP24', 'int'),
  \ javaapi#field(1,1,'FILTERTYPE_HP24', 'int'),
  \ javaapi#method(0,1,'SoftFilter(', 'float)', ''),
  \ javaapi#method(0,1,'setFrequency(', 'double)', 'void'),
  \ javaapi#method(0,1,'setResonance(', 'double)', 'void'),
  \ javaapi#method(0,1,'reset(', ')', 'void'),
  \ javaapi#method(0,1,'setFilterType(', 'int)', 'void'),
  \ javaapi#method(0,1,'processAudio(', 'SoftAudioBuffer)', 'void'),
  \ javaapi#method(0,1,'filter4(', 'SoftAudioBuffer)', 'void'),
  \ javaapi#method(0,1,'filter2calc(', ')', 'void'),
  \ javaapi#method(0,1,'filter2(', 'SoftAudioBuffer)', 'void'),
  \ javaapi#method(0,1,'filter1calc(', ')', 'void'),
  \ javaapi#method(0,1,'filter1(', 'SoftAudioBuffer)', 'void'),
  \ ])

call javaapi#class('SoftInstrument', 'Instrument', [
  \ javaapi#method(0,1,'SoftInstrument(', 'ModelInstrument)', ''),
  \ javaapi#method(0,1,'SoftInstrument(', 'ModelInstrument, ModelPerformer[])', ''),
  \ javaapi#method(0,1,'getDirector(', 'MidiChannel, ModelDirectedPlayer)', 'ModelDirector'),
  \ javaapi#method(0,1,'getSourceInstrument(', ')', 'ModelInstrument'),
  \ javaapi#method(0,1,'getData(', ')', 'Object'),
  \ javaapi#method(0,1,'getPerformer(', 'int)', 'SoftPerformer'),
  \ ])

call javaapi#class('SoftJitterCorrector', 'AudioInputStream', [
  \ javaapi#method(0,1,'SoftJitterCorrector(', 'AudioInputStream, int, int)', ''),
  \ ])

call javaapi#class('SoftLanczosResampler', 'SoftAbstractResampler', [
  \ javaapi#method(0,1,'SoftLanczosResampler(', ')', ''),
  \ javaapi#method(1,1,'sinc(', 'double)', 'double'),
  \ javaapi#method(1,1,'sincTable(', 'int, float)', 'float'),
  \ javaapi#method(0,1,'getPadding(', ')', 'int'),
  \ javaapi#method(0,1,'interpolate(', 'float[], float[], float, float[], float, float[], int[], int)', 'void'),
  \ ])

call javaapi#class('SoftLimiter', 'SoftAudioProcessor', [
  \ javaapi#method(0,1,'SoftLimiter(', ')', ''),
  \ javaapi#method(0,1,'init(', 'float, float)', 'void'),
  \ javaapi#method(0,1,'setInput(', 'int, SoftAudioBuffer)', 'void'),
  \ javaapi#method(0,1,'setOutput(', 'int, SoftAudioBuffer)', 'void'),
  \ javaapi#method(0,1,'setMixMode(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'globalParameterControlChange(', 'int[], long, long)', 'void'),
  \ javaapi#method(0,1,'processAudio(', ')', 'void'),
  \ javaapi#method(0,1,'processControlLogic(', ')', 'void'),
  \ ])

call javaapi#class('SoftLinearResampler', 'SoftAbstractResampler', [
  \ javaapi#method(0,1,'SoftLinearResampler(', ')', ''),
  \ javaapi#method(0,1,'getPadding(', ')', 'int'),
  \ javaapi#method(0,1,'interpolate(', 'float[], float[], float, float[], float, float[], int[], int)', 'void'),
  \ ])

call javaapi#class('SoftLinearResampler2', 'SoftAbstractResampler', [
  \ javaapi#method(0,1,'SoftLinearResampler2(', ')', ''),
  \ javaapi#method(0,1,'getPadding(', ')', 'int'),
  \ javaapi#method(0,1,'interpolate(', 'float[], float[], float, float[], float, float[], int[], int)', 'void'),
  \ ])

call javaapi#class('SoftLowFrequencyOscillator', 'SoftProcess', [
  \ javaapi#method(0,1,'SoftLowFrequencyOscillator(', ')', ''),
  \ javaapi#method(0,1,'reset(', ')', 'void'),
  \ javaapi#method(0,1,'init(', 'SoftSynthesizer)', 'void'),
  \ javaapi#method(0,1,'processControlLogic(', ')', 'void'),
  \ javaapi#method(0,1,'get(', 'int, String)', 'double'),
  \ ])

call javaapi#class('SoftMainMixer', '', [
  \ javaapi#field(1,1,'CHANNEL_LEFT', 'int'),
  \ javaapi#field(1,1,'CHANNEL_RIGHT', 'int'),
  \ javaapi#field(1,1,'CHANNEL_MONO', 'int'),
  \ javaapi#field(1,1,'CHANNEL_DELAY_LEFT', 'int'),
  \ javaapi#field(1,1,'CHANNEL_DELAY_RIGHT', 'int'),
  \ javaapi#field(1,1,'CHANNEL_DELAY_MONO', 'int'),
  \ javaapi#field(1,1,'CHANNEL_EFFECT1', 'int'),
  \ javaapi#field(1,1,'CHANNEL_EFFECT2', 'int'),
  \ javaapi#field(1,1,'CHANNEL_DELAY_EFFECT1', 'int'),
  \ javaapi#field(1,1,'CHANNEL_DELAY_EFFECT2', 'int'),
  \ javaapi#field(1,1,'CHANNEL_LEFT_DRY', 'int'),
  \ javaapi#field(1,1,'CHANNEL_RIGHT_DRY', 'int'),
  \ javaapi#field(1,1,'CHANNEL_SCRATCH1', 'int'),
  \ javaapi#field(1,1,'CHANNEL_SCRATCH2', 'int'),
  \ javaapi#field(0,0,'active_sensing_on', 'boolean'),
  \ javaapi#field(0,0,'readfully', 'boolean'),
  \ javaapi#field(0,0,'midimessages', 'Object>'),
  \ javaapi#field(0,0,'co_master', 'SoftControl'),
  \ javaapi#method(0,0,'processAudioBuffers(', ')', 'void'),
  \ javaapi#method(0,1,'activity(', ')', 'void'),
  \ javaapi#method(0,1,'stopMixer(', 'ModelChannelMixer)', 'void'),
  \ javaapi#method(0,1,'registerMixer(', 'ModelChannelMixer)', 'void'),
  \ javaapi#method(0,1,'SoftMainMixer(', 'SoftSynthesizer)', ''),
  \ javaapi#method(0,1,'getInputStream(', ')', 'AudioInputStream'),
  \ javaapi#method(0,1,'reset(', ')', 'void'),
  \ javaapi#method(0,1,'setVolume(', 'int)', 'void'),
  \ javaapi#method(0,1,'setBalance(', 'int)', 'void'),
  \ javaapi#method(0,1,'setFineTuning(', 'int)', 'void'),
  \ javaapi#method(0,1,'setCoarseTuning(', 'int)', 'void'),
  \ javaapi#method(0,1,'getVolume(', ')', 'int'),
  \ javaapi#method(0,1,'getBalance(', ')', 'int'),
  \ javaapi#method(0,1,'getFineTuning(', ')', 'int'),
  \ javaapi#method(0,1,'getCoarseTuning(', ')', 'int'),
  \ javaapi#method(0,1,'globalParameterControlChange(', 'int[], long[], long[])', 'void'),
  \ javaapi#method(0,1,'processMessage(', 'Object)', 'void'),
  \ javaapi#method(0,1,'processMessage(', 'MidiMessage)', 'void'),
  \ javaapi#method(0,1,'processMessage(', 'byte[])', 'void'),
  \ javaapi#method(0,1,'processMessage(', 'int, int, int, int)', 'void'),
  \ javaapi#method(0,1,'getMicrosecondPosition(', ')', 'long'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ ])

call javaapi#class('SoftMidiAudioFileReader', 'AudioFileReader', [
  \ javaapi#field(1,1,'MIDI', 'Type'),
  \ javaapi#method(0,1,'SoftMidiAudioFileReader(', ')', ''),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'Sequence) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'Sequence) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ ])

call javaapi#class('SoftMixingClip', 'SoftMixingDataLine', [
  \ javaapi#method(0,0,'SoftMixingClip(', 'SoftMixingMixer, Info)', ''),
  \ javaapi#method(0,0,'processControlLogic(', ')', 'void'),
  \ javaapi#method(0,0,'processAudioLogic(', 'SoftAudioBuffer[])', 'void'),
  \ javaapi#method(0,1,'getFrameLength(', ')', 'int'),
  \ javaapi#method(0,1,'getMicrosecondLength(', ')', 'long'),
  \ javaapi#method(0,1,'loop(', 'int)', 'void'),
  \ javaapi#method(0,1,'open(', 'AudioInputStream) throws LineUnavailableException, IOException', 'void'),
  \ javaapi#method(0,1,'open(', 'AudioFormat, byte[], int, int) throws LineUnavailableException', 'void'),
  \ javaapi#method(0,1,'setFramePosition(', 'int)', 'void'),
  \ javaapi#method(0,1,'setLoopPoints(', 'int, int)', 'void'),
  \ javaapi#method(0,1,'setMicrosecondPosition(', 'long)', 'void'),
  \ javaapi#method(0,1,'available(', ')', 'int'),
  \ javaapi#method(0,1,'drain(', ')', 'void'),
  \ javaapi#method(0,1,'flush(', ')', 'void'),
  \ javaapi#method(0,1,'getBufferSize(', ')', 'int'),
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,1,'getFramePosition(', ')', 'int'),
  \ javaapi#method(0,1,'getLevel(', ')', 'float'),
  \ javaapi#method(0,1,'getLongFramePosition(', ')', 'long'),
  \ javaapi#method(0,1,'getMicrosecondPosition(', ')', 'long'),
  \ javaapi#method(0,1,'isActive(', ')', 'boolean'),
  \ javaapi#method(0,1,'isRunning(', ')', 'boolean'),
  \ javaapi#method(0,1,'start(', ')', 'void'),
  \ javaapi#method(0,1,'stop(', ')', 'void'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ javaapi#method(0,1,'isOpen(', ')', 'boolean'),
  \ javaapi#method(0,1,'open(', ') throws LineUnavailableException', 'void'),
  \ ])

call javaapi#class('SoftMixingDataLine', 'DataLine', [
  \ javaapi#field(1,1,'CHORUS_SEND', 'Type'),
  \ javaapi#field(0,0,'leftgain', 'float'),
  \ javaapi#field(0,0,'rightgain', 'float'),
  \ javaapi#field(0,0,'eff1gain', 'float'),
  \ javaapi#field(0,0,'eff2gain', 'float'),
  \ javaapi#field(0,0,'listeners', 'List'),
  \ javaapi#field(0,0,'control_mutex', 'Object'),
  \ javaapi#field(0,0,'mixer', 'SoftMixingMixer'),
  \ javaapi#field(0,0,'info', 'Info'),
  \ javaapi#method(0,0,'processControlLogic(', ')', 'void'),
  \ javaapi#method(0,0,'processAudioLogic(', 'SoftAudioBuffer[])', 'void'),
  \ javaapi#method(0,0,'SoftMixingDataLine(', 'SoftMixingMixer, Info)', ''),
  \ javaapi#method(0,0,'calcVolume(', ')', 'void'),
  \ javaapi#method(0,0,'sendEvent(', 'LineEvent)', 'void'),
  \ javaapi#method(0,1,'addLineListener(', 'LineListener)', 'void'),
  \ javaapi#method(0,1,'removeLineListener(', 'LineListener)', 'void'),
  \ javaapi#method(0,1,'getLineInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getControl(', 'Type)', 'Control'),
  \ javaapi#method(0,1,'getControls(', ')', 'Control'),
  \ javaapi#method(0,1,'isControlSupported(', 'Type)', 'boolean'),
  \ ])

call javaapi#class('SoftMixingMainMixer', '', [
  \ javaapi#field(1,1,'CHANNEL_LEFT', 'int'),
  \ javaapi#field(1,1,'CHANNEL_RIGHT', 'int'),
  \ javaapi#field(1,1,'CHANNEL_EFFECT1', 'int'),
  \ javaapi#field(1,1,'CHANNEL_EFFECT2', 'int'),
  \ javaapi#field(1,1,'CHANNEL_EFFECT3', 'int'),
  \ javaapi#field(1,1,'CHANNEL_EFFECT4', 'int'),
  \ javaapi#field(1,1,'CHANNEL_LEFT_DRY', 'int'),
  \ javaapi#field(1,1,'CHANNEL_RIGHT_DRY', 'int'),
  \ javaapi#field(1,1,'CHANNEL_SCRATCH1', 'int'),
  \ javaapi#field(1,1,'CHANNEL_SCRATCH2', 'int'),
  \ javaapi#field(1,1,'CHANNEL_CHANNELMIXER_LEFT', 'int'),
  \ javaapi#field(1,1,'CHANNEL_CHANNELMIXER_RIGHT', 'int'),
  \ javaapi#method(0,1,'getInputStream(', ')', 'AudioInputStream'),
  \ javaapi#method(0,0,'processAudioBuffers(', ')', 'void'),
  \ javaapi#method(0,1,'SoftMixingMainMixer(', 'SoftMixingMixer)', ''),
  \ javaapi#method(0,1,'openLine(', 'SoftMixingDataLine)', 'void'),
  \ javaapi#method(0,1,'closeLine(', 'SoftMixingDataLine)', 'void'),
  \ javaapi#method(0,1,'getOpenLines(', ')', 'SoftMixingDataLine'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ ])

call javaapi#class('SoftMixingMixer', 'Mixer', [
  \ javaapi#field(1,0,'INFO_NAME', 'String'),
  \ javaapi#field(1,0,'INFO_VENDOR', 'String'),
  \ javaapi#field(1,0,'INFO_DESCRIPTION', 'String'),
  \ javaapi#field(1,0,'INFO_VERSION', 'String'),
  \ javaapi#field(1,0,'info', 'Info'),
  \ javaapi#field(0,0,'control_mutex', 'Object'),
  \ javaapi#field(0,0,'implicitOpen', 'boolean'),
  \ javaapi#method(0,1,'SoftMixingMixer(', ')', ''),
  \ javaapi#method(0,1,'getLine(', 'Info) throws LineUnavailableException', 'Line'),
  \ javaapi#method(0,1,'getMaxLines(', 'Info)', 'int'),
  \ javaapi#method(0,1,'getMixerInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getSourceLineInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getSourceLineInfo(', 'Info)', 'Info'),
  \ javaapi#method(0,1,'getSourceLines(', ')', 'Line'),
  \ javaapi#method(0,1,'getTargetLineInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getTargetLineInfo(', 'Info)', 'Info'),
  \ javaapi#method(0,1,'getTargetLines(', ')', 'Line'),
  \ javaapi#method(0,1,'isLineSupported(', 'Info)', 'boolean'),
  \ javaapi#method(0,1,'isSynchronizationSupported(', 'Line[], boolean)', 'boolean'),
  \ javaapi#method(0,1,'synchronize(', 'Line[], boolean)', 'void'),
  \ javaapi#method(0,1,'unsynchronize(', 'Line[])', 'void'),
  \ javaapi#method(0,1,'addLineListener(', 'LineListener)', 'void'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ javaapi#method(0,1,'getControl(', 'Type)', 'Control'),
  \ javaapi#method(0,1,'getControls(', ')', 'Control'),
  \ javaapi#method(0,1,'getLineInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'isControlSupported(', 'Type)', 'boolean'),
  \ javaapi#method(0,1,'isOpen(', ')', 'boolean'),
  \ javaapi#method(0,1,'open(', ') throws LineUnavailableException', 'void'),
  \ javaapi#method(0,1,'open(', 'SourceDataLine) throws LineUnavailableException', 'void'),
  \ javaapi#method(0,1,'openStream(', 'AudioFormat) throws LineUnavailableException', 'AudioInputStream'),
  \ javaapi#method(0,1,'removeLineListener(', 'LineListener)', 'void'),
  \ javaapi#method(0,1,'getLatency(', ')', 'long'),
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,0,'getControlRate(', ')', 'float'),
  \ javaapi#method(0,0,'getMainMixer(', ')', 'SoftMixingMainMixer'),
  \ ])

call javaapi#class('SoftMixingMixerProvider', 'MixerProvider', [
  \ javaapi#field(1,0,'mutex', 'Object'),
  \ javaapi#method(0,1,'SoftMixingMixerProvider(', ')', ''),
  \ javaapi#method(0,1,'getMixer(', 'Info)', 'Mixer'),
  \ javaapi#method(0,1,'getMixerInfo(', ')', 'Info'),
  \ ])

call javaapi#class('SoftMixingSourceDataLine', 'SoftMixingDataLine', [
  \ javaapi#method(0,0,'SoftMixingSourceDataLine(', 'SoftMixingMixer, Info)', ''),
  \ javaapi#method(0,1,'write(', 'byte[], int, int)', 'int'),
  \ javaapi#method(0,0,'processControlLogic(', ')', 'void'),
  \ javaapi#method(0,0,'processAudioLogic(', 'SoftAudioBuffer[])', 'void'),
  \ javaapi#method(0,1,'open(', ') throws LineUnavailableException', 'void'),
  \ javaapi#method(0,1,'open(', 'AudioFormat) throws LineUnavailableException', 'void'),
  \ javaapi#method(0,1,'open(', 'AudioFormat, int) throws LineUnavailableException', 'void'),
  \ javaapi#method(0,1,'available(', ')', 'int'),
  \ javaapi#method(0,1,'drain(', ')', 'void'),
  \ javaapi#method(0,1,'flush(', ')', 'void'),
  \ javaapi#method(0,1,'getBufferSize(', ')', 'int'),
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,1,'getFramePosition(', ')', 'int'),
  \ javaapi#method(0,1,'getLevel(', ')', 'float'),
  \ javaapi#method(0,1,'getLongFramePosition(', ')', 'long'),
  \ javaapi#method(0,1,'getMicrosecondPosition(', ')', 'long'),
  \ javaapi#method(0,1,'isActive(', ')', 'boolean'),
  \ javaapi#method(0,1,'isRunning(', ')', 'boolean'),
  \ javaapi#method(0,1,'start(', ')', 'void'),
  \ javaapi#method(0,1,'stop(', ')', 'void'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ javaapi#method(0,1,'isOpen(', ')', 'boolean'),
  \ ])

call javaapi#class('SoftPerformer', '', [
  \ javaapi#field(0,1,'keyFrom', 'int'),
  \ javaapi#field(0,1,'keyTo', 'int'),
  \ javaapi#field(0,1,'velFrom', 'int'),
  \ javaapi#field(0,1,'velTo', 'int'),
  \ javaapi#field(0,1,'exclusiveClass', 'int'),
  \ javaapi#field(0,1,'selfNonExclusive', 'boolean'),
  \ javaapi#field(0,1,'forcedVelocity', 'boolean'),
  \ javaapi#field(0,1,'forcedKeynumber', 'boolean'),
  \ javaapi#field(0,1,'performer', 'ModelPerformer'),
  \ javaapi#field(0,1,'connections', 'ModelConnectionBlock'),
  \ javaapi#field(0,1,'oscillators', 'ModelOscillator'),
  \ javaapi#field(0,1,'midi_rpn_connections', 'int>'),
  \ javaapi#field(0,1,'midi_nrpn_connections', 'int>'),
  \ javaapi#field(0,1,'midi_ctrl_connections', 'int[]'),
  \ javaapi#field(0,1,'midi_connections', 'int[]'),
  \ javaapi#field(0,1,'ctrl_connections', 'int'),
  \ javaapi#method(0,1,'SoftPerformer(', 'ModelPerformer)', ''),
  \ ])

call javaapi#class('SoftPointResampler', 'SoftAbstractResampler', [
  \ javaapi#method(0,1,'SoftPointResampler(', ')', ''),
  \ javaapi#method(0,1,'getPadding(', ')', 'int'),
  \ javaapi#method(0,1,'interpolate(', 'float[], float[], float, float[], float, float[], int[], int)', 'void'),
  \ ])

call javaapi#interface('SoftProcess', 'SoftControl', [
  \ javaapi#method(0,1,'init(', 'SoftSynthesizer)', 'void'),
  \ javaapi#method(0,1,'get(', 'int, String)', 'double'),
  \ javaapi#method(0,1,'processControlLogic(', ')', 'void'),
  \ javaapi#method(0,1,'reset(', ')', 'void'),
  \ ])

call javaapi#class('SoftProvider', 'MidiDeviceProvider', [
  \ javaapi#field(1,0,'softinfo', 'Info'),
  \ javaapi#method(0,1,'SoftProvider(', ')', ''),
  \ javaapi#method(0,1,'getDeviceInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getDevice(', 'Info)', 'MidiDevice'),
  \ ])

call javaapi#class('SoftReceiver', 'MidiDeviceReceiver', [
  \ javaapi#field(0,0,'open', 'boolean'),
  \ javaapi#field(0,0,'midimessages', 'Object>'),
  \ javaapi#field(0,0,'mainmixer', 'SoftMainMixer'),
  \ javaapi#method(0,1,'SoftReceiver(', 'SoftSynthesizer)', ''),
  \ javaapi#method(0,1,'getMidiDevice(', ')', 'MidiDevice'),
  \ javaapi#method(0,1,'send(', 'MidiMessage, long)', 'void'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ ])

call javaapi#interface('SoftResampler', '', [
  \ javaapi#method(0,1,'openStreamer(', ')', 'SoftResamplerStreamer'),
  \ ])

call javaapi#interface('SoftResamplerStreamer', 'ModelOscillatorStream', [
  \ javaapi#method(0,1,'open(', 'ModelWavetable, float) throws IOException', 'void'),
  \ ])

call javaapi#class('SoftReverb', 'SoftAudioProcessor', [
  \ javaapi#method(0,1,'SoftReverb(', ')', ''),
  \ javaapi#method(0,1,'init(', 'float, float)', 'void'),
  \ javaapi#method(0,1,'setInput(', 'int, SoftAudioBuffer)', 'void'),
  \ javaapi#method(0,1,'setOutput(', 'int, SoftAudioBuffer)', 'void'),
  \ javaapi#method(0,1,'setMixMode(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'processAudio(', ')', 'void'),
  \ javaapi#method(0,1,'globalParameterControlChange(', 'int[], long, long)', 'void'),
  \ javaapi#method(0,1,'processControlLogic(', ')', 'void'),
  \ javaapi#method(0,1,'setRoomSize(', 'float)', 'void'),
  \ javaapi#method(0,1,'setPreDelay(', 'float)', 'void'),
  \ javaapi#method(0,1,'setGain(', 'float)', 'void'),
  \ javaapi#method(0,1,'setDamp(', 'float)', 'void'),
  \ javaapi#method(0,1,'setLightMode(', 'boolean)', 'void'),
  \ ])

call javaapi#class('SoftShortMessage', 'ShortMessage', [
  \ javaapi#method(0,1,'SoftShortMessage(', ')', ''),
  \ javaapi#method(0,1,'getChannel(', ')', 'int'),
  \ javaapi#method(0,1,'setMessage(', 'int, int, int, int) throws InvalidMidiDataException', 'void'),
  \ javaapi#method(0,1,'clone(', ')', 'Object'),
  \ ])

call javaapi#class('SoftSincResampler', 'SoftAbstractResampler', [
  \ javaapi#method(0,1,'SoftSincResampler(', ')', ''),
  \ javaapi#method(1,1,'sinc(', 'double)', 'double'),
  \ javaapi#method(1,1,'wHanning(', 'int, float)', 'float'),
  \ javaapi#method(1,1,'sincTable(', 'int, float, float)', 'float'),
  \ javaapi#method(0,1,'getPadding(', ')', 'int'),
  \ javaapi#method(0,1,'interpolate(', 'float[], float[], float, float[], float, float[], int[], int)', 'void'),
  \ ])

call javaapi#class('SoftSynthesizer', 'ReferenceCountingDevice', [
  \ javaapi#field(1,0,'INFO_NAME', 'String'),
  \ javaapi#field(1,0,'INFO_VENDOR', 'String'),
  \ javaapi#field(1,0,'INFO_DESCRIPTION', 'String'),
  \ javaapi#field(1,0,'INFO_VERSION', 'String'),
  \ javaapi#field(1,0,'info', 'Info'),
  \ javaapi#field(0,0,'weakstream', 'WeakAudioStream'),
  \ javaapi#field(0,0,'control_mutex', 'Object'),
  \ javaapi#field(0,0,'voiceIDCounter', 'int'),
  \ javaapi#field(0,0,'voice_allocation_mode', 'int'),
  \ javaapi#field(0,0,'load_default_soundbank', 'boolean'),
  \ javaapi#field(0,0,'reverb_light', 'boolean'),
  \ javaapi#field(0,0,'reverb_on', 'boolean'),
  \ javaapi#field(0,0,'chorus_on', 'boolean'),
  \ javaapi#field(0,0,'agc_on', 'boolean'),
  \ javaapi#field(0,0,'channels', 'SoftChannel'),
  \ javaapi#field(0,0,'external_channels', 'SoftChannelProxy'),
  \ javaapi#method(0,1,'SoftSynthesizer(', ')', ''),
  \ javaapi#method(0,0,'removeReceiver(', 'Receiver)', 'void'),
  \ javaapi#method(0,0,'getMainMixer(', ')', 'SoftMainMixer'),
  \ javaapi#method(0,0,'findInstrument(', 'int, int, int)', 'SoftInstrument'),
  \ javaapi#method(0,0,'getVoiceAllocationMode(', ')', 'int'),
  \ javaapi#method(0,0,'getGeneralMidiMode(', ')', 'int'),
  \ javaapi#method(0,0,'setGeneralMidiMode(', 'int)', 'void'),
  \ javaapi#method(0,0,'getDeviceID(', ')', 'int'),
  \ javaapi#method(0,0,'getControlRate(', ')', 'float'),
  \ javaapi#method(0,0,'getVoices(', ')', 'SoftVoice'),
  \ javaapi#method(0,0,'getTuning(', 'Patch)', 'SoftTuning'),
  \ javaapi#method(0,1,'getLatency(', ')', 'long'),
  \ javaapi#method(0,1,'getFormat(', ')', 'AudioFormat'),
  \ javaapi#method(0,1,'getMaxPolyphony(', ')', 'int'),
  \ javaapi#method(0,1,'getChannels(', ')', 'MidiChannel'),
  \ javaapi#method(0,1,'getVoiceStatus(', ')', 'VoiceStatus'),
  \ javaapi#method(0,1,'isSoundbankSupported(', 'Soundbank)', 'boolean'),
  \ javaapi#method(0,1,'loadInstrument(', 'Instrument)', 'boolean'),
  \ javaapi#method(0,1,'unloadInstrument(', 'Instrument)', 'void'),
  \ javaapi#method(0,1,'remapInstrument(', 'Instrument, Instrument)', 'boolean'),
  \ javaapi#method(0,1,'getDefaultSoundbank(', ')', 'Soundbank'),
  \ javaapi#method(0,1,'getAvailableInstruments(', ')', 'Instrument'),
  \ javaapi#method(0,1,'getLoadedInstruments(', ')', 'Instrument'),
  \ javaapi#method(0,1,'loadAllInstruments(', 'Soundbank)', 'boolean'),
  \ javaapi#method(0,1,'unloadAllInstruments(', 'Soundbank)', 'void'),
  \ javaapi#method(0,1,'loadInstruments(', 'Soundbank, Patch[])', 'boolean'),
  \ javaapi#method(0,1,'unloadInstruments(', 'Soundbank, Patch[])', 'void'),
  \ javaapi#method(0,1,'getDeviceInfo(', ')', 'Info'),
  \ javaapi#method(0,1,'getPropertyInfo(', 'Map<String, Object>)', 'AudioSynthesizerPropertyInfo'),
  \ javaapi#method(0,1,'open(', ') throws MidiUnavailableException', 'void'),
  \ javaapi#method(0,1,'open(', 'SourceDataLine, Map<String, Object>) throws MidiUnavailableException', 'void'),
  \ javaapi#method(0,1,'openStream(', 'AudioFormat, Map<String, Object>) throws MidiUnavailableException', 'AudioInputStream'),
  \ javaapi#method(0,1,'close(', ')', 'void'),
  \ javaapi#method(0,1,'isOpen(', ')', 'boolean'),
  \ javaapi#method(0,1,'getMicrosecondPosition(', ')', 'long'),
  \ javaapi#method(0,1,'getMaxReceivers(', ')', 'int'),
  \ javaapi#method(0,1,'getMaxTransmitters(', ')', 'int'),
  \ javaapi#method(0,1,'getReceiver(', ') throws MidiUnavailableException', 'Receiver'),
  \ javaapi#method(0,1,'getReceivers(', ')', 'List'),
  \ javaapi#method(0,1,'getTransmitter(', ') throws MidiUnavailableException', 'Transmitter'),
  \ javaapi#method(0,1,'getTransmitters(', ')', 'List'),
  \ javaapi#method(0,1,'getReceiverReferenceCounting(', ') throws MidiUnavailableException', 'Receiver'),
  \ javaapi#method(0,1,'getTransmitterReferenceCounting(', ') throws MidiUnavailableException', 'Transmitter'),
  \ ])

call javaapi#class('SoftTuning', '', [
  \ javaapi#method(0,1,'SoftTuning(', ')', ''),
  \ javaapi#method(0,1,'SoftTuning(', 'byte[])', ''),
  \ javaapi#method(0,1,'SoftTuning(', 'Patch)', ''),
  \ javaapi#method(0,1,'SoftTuning(', 'Patch, byte[])', ''),
  \ javaapi#method(0,1,'load(', 'byte[])', 'void'),
  \ javaapi#method(0,1,'getTuning(', ')', 'double'),
  \ javaapi#method(0,1,'getTuning(', 'int)', 'double'),
  \ javaapi#method(0,1,'getPatch(', ')', 'Patch'),
  \ javaapi#method(0,1,'getName(', ')', 'String'),
  \ javaapi#method(0,1,'setName(', 'String)', 'void'),
  \ ])

call javaapi#class('SoftVoice', 'VoiceStatus', [
  \ javaapi#field(0,1,'exclusiveClass', 'int'),
  \ javaapi#field(0,1,'releaseTriggered', 'boolean'),
  \ javaapi#field(0,0,'channelmixer', 'ModelChannelMixer'),
  \ javaapi#field(0,0,'tunedKey', 'double'),
  \ javaapi#field(0,0,'tuning', 'SoftTuning'),
  \ javaapi#field(0,0,'stealer_channel', 'SoftChannel'),
  \ javaapi#field(0,0,'stealer_extendedConnectionBlocks', 'ModelConnectionBlock'),
  \ javaapi#field(0,0,'stealer_performer', 'SoftPerformer'),
  \ javaapi#field(0,0,'stealer_channelmixer', 'ModelChannelMixer'),
  \ javaapi#field(0,0,'stealer_voiceID', 'int'),
  \ javaapi#field(0,0,'stealer_noteNumber', 'int'),
  \ javaapi#field(0,0,'stealer_velocity', 'int'),
  \ javaapi#field(0,0,'stealer_releaseTriggered', 'boolean'),
  \ javaapi#field(0,0,'voiceID', 'int'),
  \ javaapi#field(0,0,'sustain', 'boolean'),
  \ javaapi#field(0,0,'sostenuto', 'boolean'),
  \ javaapi#field(0,0,'portamento', 'boolean'),
  \ javaapi#field(0,0,'objects', 'SoftControl>'),
  \ javaapi#field(0,0,'synthesizer', 'SoftSynthesizer'),
  \ javaapi#field(0,0,'instrument', 'SoftInstrument'),
  \ javaapi#field(0,0,'performer', 'SoftPerformer'),
  \ javaapi#field(0,0,'softchannel', 'SoftChannel'),
  \ javaapi#field(0,0,'on', 'boolean'),
  \ javaapi#field(0,0,'extendedConnectionBlocks', 'ModelConnectionBlock'),
  \ javaapi#field(0,0,'co_noteon_keynumber', 'double'),
  \ javaapi#field(0,0,'co_noteon_velocity', 'double'),
  \ javaapi#field(0,0,'co_noteon_on', 'double'),
  \ javaapi#field(0,0,'resampler', 'SoftResamplerStreamer'),
  \ javaapi#method(0,1,'SoftVoice(', 'SoftSynthesizer)', ''),
  \ javaapi#method(0,0,'updateTuning(', 'SoftTuning)', 'void'),
  \ javaapi#method(0,0,'setNote(', 'int)', 'void'),
  \ javaapi#method(0,0,'noteOn(', 'int, int, int)', 'void'),
  \ javaapi#method(0,0,'setPolyPressure(', 'int)', 'void'),
  \ javaapi#method(0,0,'setChannelPressure(', 'int)', 'void'),
  \ javaapi#method(0,0,'controlChange(', 'int, int)', 'void'),
  \ javaapi#method(0,0,'nrpnChange(', 'int, int)', 'void'),
  \ javaapi#method(0,0,'rpnChange(', 'int, int)', 'void'),
  \ javaapi#method(0,0,'setPitchBend(', 'int)', 'void'),
  \ javaapi#method(0,0,'setMute(', 'boolean)', 'void'),
  \ javaapi#method(0,0,'setSoloMute(', 'boolean)', 'void'),
  \ javaapi#method(0,0,'shutdown(', ')', 'void'),
  \ javaapi#method(0,0,'soundOff(', ')', 'void'),
  \ javaapi#method(0,0,'noteOff(', 'int)', 'void'),
  \ javaapi#method(0,0,'redamp(', ')', 'void'),
  \ javaapi#method(0,0,'processControlLogic(', ')', 'void'),
  \ javaapi#method(0,0,'mixAudioStream(', 'SoftAudioBuffer, SoftAudioBuffer, SoftAudioBuffer, float, float)', 'void'),
  \ javaapi#method(0,0,'processAudioLogic(', 'SoftAudioBuffer[])', 'void'),
  \ ])

call javaapi#class('StandardMidiFileReader', 'MidiFileReader', [
  \ javaapi#method(0,1,'StandardMidiFileReader(', ')', ''),
  \ javaapi#method(0,1,'getMidiFileFormat(', 'InputStream) throws InvalidMidiDataException, IOException', 'MidiFileFormat'),
  \ javaapi#method(0,1,'getMidiFileFormat(', 'URL) throws InvalidMidiDataException, IOException', 'MidiFileFormat'),
  \ javaapi#method(0,1,'getMidiFileFormat(', 'File) throws InvalidMidiDataException, IOException', 'MidiFileFormat'),
  \ javaapi#method(0,1,'getSequence(', 'InputStream) throws InvalidMidiDataException, IOException', 'Sequence'),
  \ javaapi#method(0,1,'getSequence(', 'URL) throws InvalidMidiDataException, IOException', 'Sequence'),
  \ javaapi#method(0,1,'getSequence(', 'File) throws InvalidMidiDataException, IOException', 'Sequence'),
  \ ])

call javaapi#class('StandardMidiFileWriter', 'MidiFileWriter', [
  \ javaapi#method(0,1,'StandardMidiFileWriter(', ')', ''),
  \ javaapi#method(0,1,'getMidiFileTypes(', ')', 'int'),
  \ javaapi#method(0,1,'getMidiFileTypes(', 'Sequence)', 'int'),
  \ javaapi#method(0,1,'isFileTypeSupported(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'write(', 'Sequence, int, OutputStream) throws IOException', 'int'),
  \ javaapi#method(0,1,'write(', 'Sequence, int, File) throws IOException', 'int'),
  \ ])

call javaapi#class('SunCodec', 'FormatConversionProvider', [
  \ javaapi#method(0,0,'SunCodec(', 'Encoding[], Encoding[])', ''),
  \ javaapi#method(0,1,'getSourceEncodings(', ')', 'Encoding'),
  \ javaapi#method(0,1,'getTargetEncodings(', ')', 'Encoding'),
  \ javaapi#method(0,1,'getTargetEncodings(', 'AudioFormat)', 'Encoding'),
  \ javaapi#method(0,1,'getTargetFormats(', 'Encoding, AudioFormat)', 'AudioFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'Encoding, AudioInputStream)', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'AudioFormat, AudioInputStream)', 'AudioInputStream'),
  \ ])

call javaapi#class('SunFileReader', 'AudioFileReader', [
  \ javaapi#field(1,0,'bisBufferSize', 'int'),
  \ javaapi#method(0,1,'SunFileReader(', ')', ''),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,0,'rllong(', 'DataInputStream) throws IOException', 'int'),
  \ javaapi#method(0,0,'big2little(', 'int)', 'int'),
  \ javaapi#method(0,0,'rlshort(', 'DataInputStream) throws IOException', 'short'),
  \ javaapi#method(0,0,'big2littleShort(', 'short)', 'short'),
  \ javaapi#method(1,0,'calculatePCMFrameSize(', 'int, int)', 'int'),
  \ ])

call javaapi#class('SunFileWriter', 'AudioFileWriter', [
  \ javaapi#field(1,0,'bufferSize', 'int'),
  \ javaapi#field(1,0,'bisBufferSize', 'int'),
  \ javaapi#method(0,1,'getAudioFileTypes(', ')', 'Type'),
  \ javaapi#method(0,1,'getAudioFileTypes(', 'AudioInputStream)', 'Type'),
  \ javaapi#method(0,1,'write(', 'AudioInputStream, Type, OutputStream) throws IOException', 'int'),
  \ javaapi#method(0,1,'write(', 'AudioInputStream, Type, File) throws IOException', 'int'),
  \ javaapi#method(0,0,'rllong(', 'DataInputStream) throws IOException', 'int'),
  \ javaapi#method(0,0,'big2little(', 'int)', 'int'),
  \ javaapi#method(0,0,'rlshort(', 'DataInputStream) throws IOException', 'short'),
  \ javaapi#method(0,0,'big2littleShort(', 'short)', 'short'),
  \ ])

call javaapi#class('Toolkit', '', [
  \ javaapi#method(0,1,'Toolkit(', ')', ''),
  \ javaapi#method(1,1,'getPCMConvertedAudioInputStream(', 'AudioInputStream)', 'AudioInputStream'),
  \ ])

call javaapi#class('UlawCodec', 'SunCodec', [
  \ javaapi#method(0,1,'UlawCodec(', ')', ''),
  \ javaapi#method(0,1,'getTargetEncodings(', 'AudioFormat)', 'Encoding'),
  \ javaapi#method(0,1,'getTargetFormats(', 'Encoding, AudioFormat)', 'AudioFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'Encoding, AudioInputStream)', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'AudioFormat, AudioInputStream)', 'AudioInputStream'),
  \ javaapi#method(0,1,'getTargetEncodings(', ')', 'Encoding'),
  \ javaapi#method(0,1,'getSourceEncodings(', ')', 'Encoding'),
  \ ])

call javaapi#class('WaveExtensibleFileReader', 'AudioFileReader', [
  \ javaapi#method(0,1,'WaveExtensibleFileReader(', ')', ''),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ ])

call javaapi#class('WaveFileFormat', 'AudioFileFormat', [
  \ ])

call javaapi#class('WaveFileReader', 'SunFileReader', [
  \ javaapi#field(1,1,'types', 'Type'),
  \ javaapi#method(0,1,'WaveFileReader(', ')', ''),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ ])

call javaapi#class('WaveFileWriter', 'SunFileWriter', [
  \ javaapi#method(0,1,'WaveFileWriter(', ')', ''),
  \ javaapi#method(0,1,'getAudioFileTypes(', 'AudioInputStream)', 'Type'),
  \ javaapi#method(0,1,'write(', 'AudioInputStream, Type, OutputStream) throws IOException', 'int'),
  \ javaapi#method(0,1,'write(', 'AudioInputStream, Type, File) throws IOException', 'int'),
  \ javaapi#method(0,1,'getAudioFileTypes(', ')', 'Type'),
  \ ])

call javaapi#class('WaveFloatFileReader', 'AudioFileReader', [
  \ javaapi#method(0,1,'WaveFloatFileReader(', ')', ''),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'InputStream) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioFileFormat(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioFileFormat'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'URL) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ javaapi#method(0,1,'getAudioInputStream(', 'File) throws UnsupportedAudioFileException, IOException', 'AudioInputStream'),
  \ ])

call javaapi#class('WaveFloatFileWriter', 'AudioFileWriter', [
  \ javaapi#method(0,1,'WaveFloatFileWriter(', ')', ''),
  \ javaapi#method(0,1,'getAudioFileTypes(', ')', 'Type'),
  \ javaapi#method(0,1,'getAudioFileTypes(', 'AudioInputStream)', 'Type'),
  \ javaapi#method(0,1,'write(', 'AudioInputStream, RIFFWriter) throws IOException', 'void'),
  \ javaapi#method(0,1,'write(', 'AudioInputStream, Type, OutputStream) throws IOException', 'int'),
  \ javaapi#method(0,1,'write(', 'AudioInputStream, Type, File) throws IOException', 'int'),
  \ ])

