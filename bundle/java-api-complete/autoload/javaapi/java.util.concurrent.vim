call javaapi#namespace('java.util.concurrent')

call javaapi#class('AbstractExecutorService', 'ExecutorService', [
  \ javaapi#method(0,1,'AbstractExecutorService(', ')', ''),
  \ javaapi#method(0,0,'newTaskFor(', 'Runnable, T)', 'RunnableFuture'),
  \ javaapi#method(0,0,'newTaskFor(', 'Callable<T>)', 'RunnableFuture'),
  \ javaapi#method(0,1,'submit(', 'Runnable)', 'Future'),
  \ javaapi#method(0,1,'submit(', 'Runnable, T)', 'Future'),
  \ javaapi#method(0,1,'submit(', 'Callable<T>)', 'Future'),
  \ javaapi#method(0,1,'invokeAny(', 'Collection<? extends Callable<T>>) throws InterruptedException, ExecutionException', 'T'),
  \ javaapi#method(0,1,'invokeAny(', 'Collection<? extends Callable<T>>, long, TimeUnit) throws InterruptedException, ExecutionException, TimeoutException', 'T'),
  \ javaapi#method(0,1,'invokeAll(', 'Collection<? extends Callable<T>>) throws InterruptedException', 'Future'),
  \ javaapi#method(0,1,'invokeAll(', 'Collection<? extends Callable<T>>, long, TimeUnit) throws InterruptedException', 'Future'),
  \ ])

call javaapi#class('ArrayBlockingQueue', 'AbstractQueue', [
  \ javaapi#method(0,1,'ArrayBlockingQueue(', 'int)', ''),
  \ javaapi#method(0,1,'ArrayBlockingQueue(', 'int, boolean)', ''),
  \ javaapi#method(0,1,'ArrayBlockingQueue(', 'int, boolean, Collection<? extends E>)', ''),
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'offer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'put(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'offer(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'poll(', ')', 'E'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'peek(', ')', 'E'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'remainingCapacity(', ')', 'int'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'toArray(', ')', 'Object'),
  \ javaapi#method(0,1,'toArray(', 'T[])', 'T'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>)', 'int'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>, int)', 'int'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ ])

call javaapi#interface('BlockingDeque', 'Deque<E>', [
  \ javaapi#method(0,1,'addFirst(', 'E)', 'void'),
  \ javaapi#method(0,1,'addLast(', 'E)', 'void'),
  \ javaapi#method(0,1,'offerFirst(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'offerLast(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'putFirst(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'putLast(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'offerFirst(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'offerLast(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'takeFirst(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'takeLast(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'pollFirst(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'pollLast(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'removeFirstOccurrence(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'removeLastOccurrence(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'offer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'put(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'offer(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'remove(', ')', 'E'),
  \ javaapi#method(0,1,'poll(', ')', 'E'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'element(', ')', 'E'),
  \ javaapi#method(0,1,'peek(', ')', 'E'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ javaapi#method(0,1,'push(', 'E)', 'void'),
  \ ])

call javaapi#interface('BlockingQueue', 'Queue', [
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'offer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'put(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'offer(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'remainingCapacity(', ')', 'int'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>)', 'int'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>, int)', 'int'),
  \ ])

call javaapi#class('BrokenBarrierException', 'Exception', [
  \ javaapi#method(0,1,'BrokenBarrierException(', ')', ''),
  \ javaapi#method(0,1,'BrokenBarrierException(', 'String)', ''),
  \ ])

call javaapi#interface('Callable', '', [
  \ javaapi#method(0,1,'call(', ') throws Exception', 'V'),
  \ ])

call javaapi#class('CancellationException', 'IllegalStateException', [
  \ javaapi#method(0,1,'CancellationException(', ')', ''),
  \ javaapi#method(0,1,'CancellationException(', 'String)', ''),
  \ ])

call javaapi#interface('CompletionService', '', [
  \ javaapi#method(0,1,'submit(', 'Callable<V>)', 'Future'),
  \ javaapi#method(0,1,'submit(', 'Runnable, V)', 'Future'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'Future'),
  \ javaapi#method(0,1,'poll(', ')', 'Future'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'Future'),
  \ ])

call javaapi#class('ConcurrentLinkedDeque', 'AbstractCollection', [
  \ javaapi#method(0,1,'ConcurrentLinkedDeque(', ')', ''),
  \ javaapi#method(0,1,'ConcurrentLinkedDeque(', 'Collection<? extends E>)', ''),
  \ javaapi#method(0,1,'addFirst(', 'E)', 'void'),
  \ javaapi#method(0,1,'addLast(', 'E)', 'void'),
  \ javaapi#method(0,1,'offerFirst(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'offerLast(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'peekFirst(', ')', 'E'),
  \ javaapi#method(0,1,'peekLast(', ')', 'E'),
  \ javaapi#method(0,1,'getFirst(', ')', 'E'),
  \ javaapi#method(0,1,'getLast(', ')', 'E'),
  \ javaapi#method(0,1,'pollFirst(', ')', 'E'),
  \ javaapi#method(0,1,'pollLast(', ')', 'E'),
  \ javaapi#method(0,1,'removeFirst(', ')', 'E'),
  \ javaapi#method(0,1,'removeLast(', ')', 'E'),
  \ javaapi#method(0,1,'offer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'poll(', ')', 'E'),
  \ javaapi#method(0,1,'remove(', ')', 'E'),
  \ javaapi#method(0,1,'peek(', ')', 'E'),
  \ javaapi#method(0,1,'element(', ')', 'E'),
  \ javaapi#method(0,1,'push(', 'E)', 'void'),
  \ javaapi#method(0,1,'pop(', ')', 'E'),
  \ javaapi#method(0,1,'removeFirstOccurrence(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'removeLastOccurrence(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'isEmpty(', ')', 'boolean'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'addAll(', 'Collection<? extends E>)', 'boolean'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'toArray(', ')', 'Object'),
  \ javaapi#method(0,1,'toArray(', 'T[])', 'T'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ javaapi#method(0,1,'descendingIterator(', ')', 'Iterator'),
  \ ])

call javaapi#class('ConcurrentLinkedQueue', 'AbstractQueue', [
  \ javaapi#method(0,1,'ConcurrentLinkedQueue(', ')', ''),
  \ javaapi#method(0,1,'ConcurrentLinkedQueue(', 'Collection<? extends E>)', ''),
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'offer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'poll(', ')', 'E'),
  \ javaapi#method(0,1,'peek(', ')', 'E'),
  \ javaapi#method(0,1,'isEmpty(', ')', 'boolean'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'addAll(', 'Collection<? extends E>)', 'boolean'),
  \ javaapi#method(0,1,'toArray(', ')', 'Object'),
  \ javaapi#method(0,1,'toArray(', 'T[])', 'T'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ ])

call javaapi#interface('ConcurrentNavigableMap', 'NavigableMap<K,V>', [
  \ javaapi#method(0,1,'subMap(', 'K, boolean, K, boolean)', 'V>'),
  \ javaapi#method(0,1,'headMap(', 'K, boolean)', 'V>'),
  \ javaapi#method(0,1,'tailMap(', 'K, boolean)', 'V>'),
  \ javaapi#method(0,1,'subMap(', 'K, K)', 'V>'),
  \ javaapi#method(0,1,'headMap(', 'K)', 'V>'),
  \ javaapi#method(0,1,'tailMap(', 'K)', 'V>'),
  \ javaapi#method(0,1,'descendingMap(', ')', 'V>'),
  \ javaapi#method(0,1,'navigableKeySet(', ')', 'NavigableSet'),
  \ javaapi#method(0,1,'keySet(', ')', 'NavigableSet'),
  \ javaapi#method(0,1,'descendingKeySet(', ')', 'NavigableSet'),
  \ ])

call javaapi#class('ConcurrentSkipListMap', 'AbstractMap', [
  \ javaapi#method(0,1,'ConcurrentSkipListMap(', ')', ''),
  \ javaapi#method(0,1,'ConcurrentSkipListMap(', 'Comparator<? super K>)', ''),
  \ javaapi#method(0,1,'ConcurrentSkipListMap(', 'Map<? extends K, ? extends V>)', ''),
  \ javaapi#method(0,1,'ConcurrentSkipListMap(', 'SortedMap<K, ? extends V>)', ''),
  \ javaapi#method(0,1,'clone(', ')', 'V>'),
  \ javaapi#method(0,1,'containsKey(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'get(', 'Object)', 'V'),
  \ javaapi#method(0,1,'put(', 'K, V)', 'V'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'V'),
  \ javaapi#method(0,1,'containsValue(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'isEmpty(', ')', 'boolean'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'keySet(', ')', 'NavigableSet'),
  \ javaapi#method(0,1,'navigableKeySet(', ')', 'NavigableSet'),
  \ javaapi#method(0,1,'values(', ')', 'Collection'),
  \ javaapi#method(0,1,'entrySet(', ')', 'V>>'),
  \ javaapi#method(0,1,'descendingMap(', ')', 'V>'),
  \ javaapi#method(0,1,'descendingKeySet(', ')', 'NavigableSet'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'putIfAbsent(', 'K, V)', 'V'),
  \ javaapi#method(0,1,'remove(', 'Object, Object)', 'boolean'),
  \ javaapi#method(0,1,'replace(', 'K, V, V)', 'boolean'),
  \ javaapi#method(0,1,'replace(', 'K, V)', 'V'),
  \ javaapi#method(0,1,'comparator(', ')', 'K>'),
  \ javaapi#method(0,1,'firstKey(', ')', 'K'),
  \ javaapi#method(0,1,'lastKey(', ')', 'K'),
  \ javaapi#method(0,1,'subMap(', 'K, boolean, K, boolean)', 'V>'),
  \ javaapi#method(0,1,'headMap(', 'K, boolean)', 'V>'),
  \ javaapi#method(0,1,'tailMap(', 'K, boolean)', 'V>'),
  \ javaapi#method(0,1,'subMap(', 'K, K)', 'V>'),
  \ javaapi#method(0,1,'headMap(', 'K)', 'V>'),
  \ javaapi#method(0,1,'tailMap(', 'K)', 'V>'),
  \ javaapi#method(0,1,'lowerEntry(', 'K)', 'V>'),
  \ javaapi#method(0,1,'lowerKey(', 'K)', 'K'),
  \ javaapi#method(0,1,'floorEntry(', 'K)', 'V>'),
  \ javaapi#method(0,1,'floorKey(', 'K)', 'K'),
  \ javaapi#method(0,1,'ceilingEntry(', 'K)', 'V>'),
  \ javaapi#method(0,1,'ceilingKey(', 'K)', 'K'),
  \ javaapi#method(0,1,'higherEntry(', 'K)', 'V>'),
  \ javaapi#method(0,1,'higherKey(', 'K)', 'K'),
  \ javaapi#method(0,1,'firstEntry(', ')', 'V>'),
  \ javaapi#method(0,1,'lastEntry(', ')', 'V>'),
  \ javaapi#method(0,1,'pollFirstEntry(', ')', 'V>'),
  \ javaapi#method(0,1,'pollLastEntry(', ')', 'V>'),
  \ javaapi#method(0,1,'clone(', ') throws CloneNotSupportedException', 'Object'),
  \ javaapi#method(0,1,'keySet(', ')', 'Set'),
  \ javaapi#method(0,1,'tailMap(', 'Object)', 'SortedMap'),
  \ javaapi#method(0,1,'headMap(', 'Object)', 'SortedMap'),
  \ javaapi#method(0,1,'subMap(', 'Object, Object)', 'SortedMap'),
  \ javaapi#method(0,1,'tailMap(', 'Object, boolean)', 'NavigableMap'),
  \ javaapi#method(0,1,'headMap(', 'Object, boolean)', 'NavigableMap'),
  \ javaapi#method(0,1,'subMap(', 'Object, boolean, Object, boolean)', 'NavigableMap'),
  \ javaapi#method(0,1,'descendingMap(', ')', 'NavigableMap'),
  \ ])

call javaapi#class('ConcurrentSkipListSet', 'AbstractSet', [
  \ javaapi#method(0,1,'ConcurrentSkipListSet(', ')', ''),
  \ javaapi#method(0,1,'ConcurrentSkipListSet(', 'Comparator<? super E>)', ''),
  \ javaapi#method(0,1,'ConcurrentSkipListSet(', 'Collection<? extends E>)', ''),
  \ javaapi#method(0,1,'ConcurrentSkipListSet(', 'SortedSet<E>)', ''),
  \ javaapi#method(0,1,'clone(', ')', 'ConcurrentSkipListSet'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'isEmpty(', ')', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ javaapi#method(0,1,'descendingIterator(', ')', 'Iterator'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'removeAll(', 'Collection<?>)', 'boolean'),
  \ javaapi#method(0,1,'lower(', 'E)', 'E'),
  \ javaapi#method(0,1,'floor(', 'E)', 'E'),
  \ javaapi#method(0,1,'ceiling(', 'E)', 'E'),
  \ javaapi#method(0,1,'higher(', 'E)', 'E'),
  \ javaapi#method(0,1,'pollFirst(', ')', 'E'),
  \ javaapi#method(0,1,'pollLast(', ')', 'E'),
  \ javaapi#method(0,1,'comparator(', ')', 'E>'),
  \ javaapi#method(0,1,'first(', ')', 'E'),
  \ javaapi#method(0,1,'last(', ')', 'E'),
  \ javaapi#method(0,1,'subSet(', 'E, boolean, E, boolean)', 'NavigableSet'),
  \ javaapi#method(0,1,'headSet(', 'E, boolean)', 'NavigableSet'),
  \ javaapi#method(0,1,'tailSet(', 'E, boolean)', 'NavigableSet'),
  \ javaapi#method(0,1,'subSet(', 'E, E)', 'NavigableSet'),
  \ javaapi#method(0,1,'headSet(', 'E)', 'NavigableSet'),
  \ javaapi#method(0,1,'tailSet(', 'E)', 'NavigableSet'),
  \ javaapi#method(0,1,'descendingSet(', ')', 'NavigableSet'),
  \ javaapi#method(0,1,'clone(', ') throws CloneNotSupportedException', 'Object'),
  \ javaapi#method(0,1,'tailSet(', 'Object)', 'SortedSet'),
  \ javaapi#method(0,1,'headSet(', 'Object)', 'SortedSet'),
  \ javaapi#method(0,1,'subSet(', 'Object, Object)', 'SortedSet'),
  \ ])

call javaapi#class('CopyOnWriteArrayList', 'Serializable', [
  \ javaapi#method(0,1,'CopyOnWriteArrayList(', ')', ''),
  \ javaapi#method(0,1,'CopyOnWriteArrayList(', 'Collection<? extends E>)', ''),
  \ javaapi#method(0,1,'CopyOnWriteArrayList(', 'E[])', ''),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'isEmpty(', ')', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'indexOf(', 'Object)', 'int'),
  \ javaapi#method(0,1,'indexOf(', 'E, int)', 'int'),
  \ javaapi#method(0,1,'lastIndexOf(', 'Object)', 'int'),
  \ javaapi#method(0,1,'lastIndexOf(', 'E, int)', 'int'),
  \ javaapi#method(0,1,'clone(', ')', 'Object'),
  \ javaapi#method(0,1,'toArray(', ')', 'Object'),
  \ javaapi#method(0,1,'toArray(', 'T[])', 'T'),
  \ javaapi#method(0,1,'get(', 'int)', 'E'),
  \ javaapi#method(0,1,'set(', 'int, E)', 'E'),
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'add(', 'int, E)', 'void'),
  \ javaapi#method(0,1,'remove(', 'int)', 'E'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'addIfAbsent(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'containsAll(', 'Collection<?>)', 'boolean'),
  \ javaapi#method(0,1,'removeAll(', 'Collection<?>)', 'boolean'),
  \ javaapi#method(0,1,'retainAll(', 'Collection<?>)', 'boolean'),
  \ javaapi#method(0,1,'addAllAbsent(', 'Collection<? extends E>)', 'int'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'addAll(', 'Collection<? extends E>)', 'boolean'),
  \ javaapi#method(0,1,'addAll(', 'int, Collection<? extends E>)', 'boolean'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'hashCode(', ')', 'int'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ javaapi#method(0,1,'listIterator(', ')', 'ListIterator'),
  \ javaapi#method(0,1,'listIterator(', 'int)', 'ListIterator'),
  \ javaapi#method(0,1,'subList(', 'int, int)', 'List'),
  \ ])

call javaapi#class('CopyOnWriteArraySet', 'AbstractSet', [
  \ javaapi#method(0,1,'CopyOnWriteArraySet(', ')', ''),
  \ javaapi#method(0,1,'CopyOnWriteArraySet(', 'Collection<? extends E>)', ''),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'isEmpty(', ')', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'toArray(', ')', 'Object'),
  \ javaapi#method(0,1,'toArray(', 'T[])', 'T'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'containsAll(', 'Collection<?>)', 'boolean'),
  \ javaapi#method(0,1,'addAll(', 'Collection<? extends E>)', 'boolean'),
  \ javaapi#method(0,1,'removeAll(', 'Collection<?>)', 'boolean'),
  \ javaapi#method(0,1,'retainAll(', 'Collection<?>)', 'boolean'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ javaapi#method(0,1,'equals(', 'Object)', 'boolean'),
  \ ])

call javaapi#class('CountDownLatch', '', [
  \ javaapi#method(0,1,'CountDownLatch(', 'int)', ''),
  \ javaapi#method(0,1,'await(', ') throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'await(', 'long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'countDown(', ')', 'void'),
  \ javaapi#method(0,1,'getCount(', ')', 'long'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('CyclicBarrier', '', [
  \ javaapi#method(0,1,'CyclicBarrier(', 'int, Runnable)', ''),
  \ javaapi#method(0,1,'CyclicBarrier(', 'int)', ''),
  \ javaapi#method(0,1,'getParties(', ')', 'int'),
  \ javaapi#method(0,1,'await(', ') throws InterruptedException, BrokenBarrierException', 'int'),
  \ javaapi#method(0,1,'await(', 'long, TimeUnit) throws InterruptedException, BrokenBarrierException, TimeoutException', 'int'),
  \ javaapi#method(0,1,'isBroken(', ')', 'boolean'),
  \ javaapi#method(0,1,'reset(', ')', 'void'),
  \ javaapi#method(0,1,'getNumberWaiting(', ')', 'int'),
  \ ])

call javaapi#class('DelayQueue<E', 'Delayed>', [
  \ javaapi#method(0,1,'DelayQueue(', ')', ''),
  \ javaapi#method(0,1,'DelayQueue(', 'Collection<? extends E>)', ''),
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'offer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'put(', 'E)', 'void'),
  \ javaapi#method(0,1,'offer(', 'E, long, TimeUnit)', 'boolean'),
  \ javaapi#method(0,1,'poll(', ')', 'E'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'peek(', ')', 'E'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>)', 'int'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>, int)', 'int'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'remainingCapacity(', ')', 'int'),
  \ javaapi#method(0,1,'toArray(', ')', 'Object'),
  \ javaapi#method(0,1,'toArray(', 'T[])', 'T'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ javaapi#method(0,1,'add(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'peek(', ')', 'Object'),
  \ javaapi#method(0,1,'poll(', ')', 'Object'),
  \ javaapi#method(0,1,'offer(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'Object'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'Object'),
  \ javaapi#method(0,1,'offer(', 'Object, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'put(', 'Object) throws InterruptedException', 'void'),
  \ ])

call javaapi#interface('Delayed', 'Comparable', [
  \ javaapi#method(0,1,'getDelay(', 'TimeUnit)', 'long'),
  \ ])

call javaapi#class('Exchanger', '', [
  \ javaapi#method(0,1,'Exchanger(', ')', ''),
  \ javaapi#method(0,1,'exchange(', 'V) throws InterruptedException', 'V'),
  \ javaapi#method(0,1,'exchange(', 'V, long, TimeUnit) throws InterruptedException, TimeoutException', 'V'),
  \ ])

call javaapi#class('ExecutionException', 'Exception', [
  \ javaapi#method(0,0,'ExecutionException(', ')', ''),
  \ javaapi#method(0,0,'ExecutionException(', 'String)', ''),
  \ javaapi#method(0,1,'ExecutionException(', 'String, Throwable)', ''),
  \ javaapi#method(0,1,'ExecutionException(', 'Throwable)', ''),
  \ ])

call javaapi#interface('Executor', '', [
  \ javaapi#method(0,1,'execute(', 'Runnable)', 'void'),
  \ ])

call javaapi#class('ExecutorCompletionService', 'CompletionService', [
  \ javaapi#method(0,1,'ExecutorCompletionService(', 'Executor)', ''),
  \ javaapi#method(0,1,'ExecutorCompletionService(', 'Executor, BlockingQueue<Future<V>>)', ''),
  \ javaapi#method(0,1,'submit(', 'Callable<V>)', 'Future'),
  \ javaapi#method(0,1,'submit(', 'Runnable, V)', 'Future'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'Future'),
  \ javaapi#method(0,1,'poll(', ')', 'Future'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'Future'),
  \ ])

call javaapi#interface('ExecutorService', 'Executor', [
  \ javaapi#method(0,1,'shutdown(', ')', 'void'),
  \ javaapi#method(0,1,'shutdownNow(', ')', 'List'),
  \ javaapi#method(0,1,'isShutdown(', ')', 'boolean'),
  \ javaapi#method(0,1,'isTerminated(', ')', 'boolean'),
  \ javaapi#method(0,1,'awaitTermination(', 'long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'submit(', 'Callable<T>)', 'Future'),
  \ javaapi#method(0,1,'submit(', 'Runnable, T)', 'Future'),
  \ javaapi#method(0,1,'submit(', 'Runnable)', 'Future'),
  \ javaapi#method(0,1,'invokeAll(', 'Collection<? extends Callable<T>>) throws InterruptedException', 'Future'),
  \ javaapi#method(0,1,'invokeAll(', 'Collection<? extends Callable<T>>, long, TimeUnit) throws InterruptedException', 'Future'),
  \ javaapi#method(0,1,'invokeAny(', 'Collection<? extends Callable<T>>) throws InterruptedException, ExecutionException', 'T'),
  \ javaapi#method(0,1,'invokeAny(', 'Collection<? extends Callable<T>>, long, TimeUnit) throws InterruptedException, ExecutionException, TimeoutException', 'T'),
  \ ])

call javaapi#class('Executors', '', [
  \ javaapi#method(1,1,'newFixedThreadPool(', 'int)', 'ExecutorService'),
  \ javaapi#method(1,1,'newFixedThreadPool(', 'int, ThreadFactory)', 'ExecutorService'),
  \ javaapi#method(1,1,'newSingleThreadExecutor(', ')', 'ExecutorService'),
  \ javaapi#method(1,1,'newSingleThreadExecutor(', 'ThreadFactory)', 'ExecutorService'),
  \ javaapi#method(1,1,'newCachedThreadPool(', ')', 'ExecutorService'),
  \ javaapi#method(1,1,'newCachedThreadPool(', 'ThreadFactory)', 'ExecutorService'),
  \ javaapi#method(1,1,'newSingleThreadScheduledExecutor(', ')', 'ScheduledExecutorService'),
  \ javaapi#method(1,1,'newSingleThreadScheduledExecutor(', 'ThreadFactory)', 'ScheduledExecutorService'),
  \ javaapi#method(1,1,'newScheduledThreadPool(', 'int)', 'ScheduledExecutorService'),
  \ javaapi#method(1,1,'newScheduledThreadPool(', 'int, ThreadFactory)', 'ScheduledExecutorService'),
  \ javaapi#method(1,1,'unconfigurableExecutorService(', 'ExecutorService)', 'ExecutorService'),
  \ javaapi#method(1,1,'unconfigurableScheduledExecutorService(', 'ScheduledExecutorService)', 'ScheduledExecutorService'),
  \ javaapi#method(1,1,'defaultThreadFactory(', ')', 'ThreadFactory'),
  \ javaapi#method(1,1,'privilegedThreadFactory(', ')', 'ThreadFactory'),
  \ javaapi#method(1,1,'callable(', 'Runnable, T)', 'Callable'),
  \ javaapi#method(1,1,'callable(', 'Runnable)', 'Callable'),
  \ javaapi#method(1,1,'callable(', 'PrivilegedAction<?>)', 'Callable'),
  \ javaapi#method(1,1,'callable(', 'PrivilegedExceptionAction<?>)', 'Callable'),
  \ javaapi#method(1,1,'privilegedCallable(', 'Callable<T>)', 'Callable'),
  \ javaapi#method(1,1,'privilegedCallableUsingCurrentClassLoader(', 'Callable<T>)', 'Callable'),
  \ ])

call javaapi#class('ForkJoinPool', 'AbstractExecutorService', [
  \ javaapi#field(1,1,'defaultForkJoinWorkerThreadFactory', 'ForkJoinWorkerThreadFactory'),
  \ javaapi#method(0,1,'ForkJoinPool(', ')', ''),
  \ javaapi#method(0,1,'ForkJoinPool(', 'int)', ''),
  \ javaapi#method(0,1,'ForkJoinPool(', 'int, ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean)', ''),
  \ javaapi#method(0,1,'invoke(', 'ForkJoinTask<T>)', 'T'),
  \ javaapi#method(0,1,'execute(', 'ForkJoinTask<?>)', 'void'),
  \ javaapi#method(0,1,'execute(', 'Runnable)', 'void'),
  \ javaapi#method(0,1,'submit(', 'ForkJoinTask<T>)', 'ForkJoinTask'),
  \ javaapi#method(0,1,'submit(', 'Callable<T>)', 'ForkJoinTask'),
  \ javaapi#method(0,1,'submit(', 'Runnable, T)', 'ForkJoinTask'),
  \ javaapi#method(0,1,'submit(', 'Runnable)', 'ForkJoinTask'),
  \ javaapi#method(0,1,'invokeAll(', 'Collection<? extends Callable<T>>)', 'Future'),
  \ javaapi#method(0,1,'getFactory(', ')', 'ForkJoinWorkerThreadFactory'),
  \ javaapi#method(0,1,'getUncaughtExceptionHandler(', ')', 'UncaughtExceptionHandler'),
  \ javaapi#method(0,1,'getParallelism(', ')', 'int'),
  \ javaapi#method(0,1,'getPoolSize(', ')', 'int'),
  \ javaapi#method(0,1,'getAsyncMode(', ')', 'boolean'),
  \ javaapi#method(0,1,'getRunningThreadCount(', ')', 'int'),
  \ javaapi#method(0,1,'getActiveThreadCount(', ')', 'int'),
  \ javaapi#method(0,1,'isQuiescent(', ')', 'boolean'),
  \ javaapi#method(0,1,'getStealCount(', ')', 'long'),
  \ javaapi#method(0,1,'getQueuedTaskCount(', ')', 'long'),
  \ javaapi#method(0,1,'getQueuedSubmissionCount(', ')', 'int'),
  \ javaapi#method(0,1,'hasQueuedSubmissions(', ')', 'boolean'),
  \ javaapi#method(0,0,'pollSubmission(', ')', 'ForkJoinTask'),
  \ javaapi#method(0,0,'drainTasksTo(', 'Collection<? super ForkJoinTask<?>>)', 'int'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'shutdown(', ')', 'void'),
  \ javaapi#method(0,1,'shutdownNow(', ')', 'List'),
  \ javaapi#method(0,1,'isTerminated(', ')', 'boolean'),
  \ javaapi#method(0,1,'isTerminating(', ')', 'boolean'),
  \ javaapi#method(0,1,'isShutdown(', ')', 'boolean'),
  \ javaapi#method(0,1,'awaitTermination(', 'long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(1,1,'managedBlock(', 'ManagedBlocker) throws InterruptedException', 'void'),
  \ javaapi#method(0,0,'newTaskFor(', 'Runnable, T)', 'RunnableFuture'),
  \ javaapi#method(0,0,'newTaskFor(', 'Callable<T>)', 'RunnableFuture'),
  \ javaapi#method(0,1,'submit(', 'Callable)', 'Future'),
  \ javaapi#method(0,1,'submit(', 'Runnable, Object)', 'Future'),
  \ javaapi#method(0,1,'submit(', 'Runnable)', 'Future'),
  \ ])

call javaapi#class('ForkJoinTask', 'Serializable', [
  \ javaapi#method(0,1,'ForkJoinTask(', ')', ''),
  \ javaapi#method(0,1,'fork(', ')', 'ForkJoinTask'),
  \ javaapi#method(0,1,'join(', ')', 'V'),
  \ javaapi#method(0,1,'invoke(', ')', 'V'),
  \ javaapi#method(1,1,'invokeAll(', 'ForkJoinTask<?>, ForkJoinTask<?>)', 'void'),
  \ javaapi#method(1,1,'invokeAll(', 'ForkJoinTask<?>)', 'void'),
  \ javaapi#method(1,1,'invokeAll(', 'Collection<T>)', 'Collection'),
  \ javaapi#method(0,1,'cancel(', 'boolean)', 'boolean'),
  \ javaapi#method(0,1,'isDone(', ')', 'boolean'),
  \ javaapi#method(0,1,'isCancelled(', ')', 'boolean'),
  \ javaapi#method(0,1,'isCompletedAbnormally(', ')', 'boolean'),
  \ javaapi#method(0,1,'isCompletedNormally(', ')', 'boolean'),
  \ javaapi#method(0,1,'getException(', ')', 'Throwable'),
  \ javaapi#method(0,1,'completeExceptionally(', 'Throwable)', 'void'),
  \ javaapi#method(0,1,'complete(', 'V)', 'void'),
  \ javaapi#method(0,1,'get(', ') throws InterruptedException, ExecutionException', 'V'),
  \ javaapi#method(0,1,'get(', 'long, TimeUnit) throws InterruptedException, ExecutionException, TimeoutException', 'V'),
  \ javaapi#method(0,1,'quietlyJoin(', ')', 'void'),
  \ javaapi#method(0,1,'quietlyInvoke(', ')', 'void'),
  \ javaapi#method(1,1,'helpQuiesce(', ')', 'void'),
  \ javaapi#method(0,1,'reinitialize(', ')', 'void'),
  \ javaapi#method(1,1,'getPool(', ')', 'ForkJoinPool'),
  \ javaapi#method(1,1,'inForkJoinPool(', ')', 'boolean'),
  \ javaapi#method(0,1,'tryUnfork(', ')', 'boolean'),
  \ javaapi#method(1,1,'getQueuedTaskCount(', ')', 'int'),
  \ javaapi#method(1,1,'getSurplusQueuedTaskCount(', ')', 'int'),
  \ javaapi#method(0,1,'getRawResult(', ')', 'V'),
  \ javaapi#method(0,0,'setRawResult(', 'V)', 'void'),
  \ javaapi#method(0,0,'exec(', ')', 'boolean'),
  \ javaapi#method(1,0,'peekNextLocalTask(', ')', 'ForkJoinTask'),
  \ javaapi#method(1,0,'pollNextLocalTask(', ')', 'ForkJoinTask'),
  \ javaapi#method(1,0,'pollTask(', ')', 'ForkJoinTask'),
  \ javaapi#method(1,1,'adapt(', 'Runnable)', 'ForkJoinTask'),
  \ javaapi#method(1,1,'adapt(', 'Runnable, T)', 'ForkJoinTask'),
  \ javaapi#method(1,1,'adapt(', 'Callable<? extends T>)', 'ForkJoinTask'),
  \ ])

call javaapi#class('ForkJoinWorkerThread', 'Thread', [
  \ javaapi#method(0,0,'ForkJoinWorkerThread(', 'ForkJoinPool)', ''),
  \ javaapi#method(0,1,'getPool(', ')', 'ForkJoinPool'),
  \ javaapi#method(0,1,'getPoolIndex(', ')', 'int'),
  \ javaapi#method(0,0,'onStart(', ')', 'void'),
  \ javaapi#method(0,0,'onTermination(', 'Throwable)', 'void'),
  \ javaapi#method(0,1,'run(', ')', 'void'),
  \ ])

call javaapi#interface('Future', '', [
  \ javaapi#method(0,1,'cancel(', 'boolean)', 'boolean'),
  \ javaapi#method(0,1,'isCancelled(', ')', 'boolean'),
  \ javaapi#method(0,1,'isDone(', ')', 'boolean'),
  \ javaapi#method(0,1,'get(', ') throws InterruptedException, ExecutionException', 'V'),
  \ javaapi#method(0,1,'get(', 'long, TimeUnit) throws InterruptedException, ExecutionException, TimeoutException', 'V'),
  \ ])

call javaapi#class('FutureTask', 'RunnableFuture', [
  \ javaapi#method(0,1,'FutureTask(', 'Callable<V>)', ''),
  \ javaapi#method(0,1,'FutureTask(', 'Runnable, V)', ''),
  \ javaapi#method(0,1,'isCancelled(', ')', 'boolean'),
  \ javaapi#method(0,1,'isDone(', ')', 'boolean'),
  \ javaapi#method(0,1,'cancel(', 'boolean)', 'boolean'),
  \ javaapi#method(0,1,'get(', ') throws InterruptedException, ExecutionException', 'V'),
  \ javaapi#method(0,1,'get(', 'long, TimeUnit) throws InterruptedException, ExecutionException, TimeoutException', 'V'),
  \ javaapi#method(0,0,'done(', ')', 'void'),
  \ javaapi#method(0,0,'set(', 'V)', 'void'),
  \ javaapi#method(0,0,'setException(', 'Throwable)', 'void'),
  \ javaapi#method(0,1,'run(', ')', 'void'),
  \ javaapi#method(0,0,'runAndReset(', ')', 'boolean'),
  \ ])

call javaapi#class('LinkedBlockingDeque', 'AbstractQueue', [
  \ javaapi#method(0,1,'LinkedBlockingDeque(', ')', ''),
  \ javaapi#method(0,1,'LinkedBlockingDeque(', 'int)', ''),
  \ javaapi#method(0,1,'LinkedBlockingDeque(', 'Collection<? extends E>)', ''),
  \ javaapi#method(0,1,'addFirst(', 'E)', 'void'),
  \ javaapi#method(0,1,'addLast(', 'E)', 'void'),
  \ javaapi#method(0,1,'offerFirst(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'offerLast(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'putFirst(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'putLast(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'offerFirst(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'offerLast(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'removeFirst(', ')', 'E'),
  \ javaapi#method(0,1,'removeLast(', ')', 'E'),
  \ javaapi#method(0,1,'pollFirst(', ')', 'E'),
  \ javaapi#method(0,1,'pollLast(', ')', 'E'),
  \ javaapi#method(0,1,'takeFirst(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'takeLast(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'pollFirst(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'pollLast(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'getFirst(', ')', 'E'),
  \ javaapi#method(0,1,'getLast(', ')', 'E'),
  \ javaapi#method(0,1,'peekFirst(', ')', 'E'),
  \ javaapi#method(0,1,'peekLast(', ')', 'E'),
  \ javaapi#method(0,1,'removeFirstOccurrence(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'removeLastOccurrence(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'offer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'put(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'offer(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'remove(', ')', 'E'),
  \ javaapi#method(0,1,'poll(', ')', 'E'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'element(', ')', 'E'),
  \ javaapi#method(0,1,'peek(', ')', 'E'),
  \ javaapi#method(0,1,'remainingCapacity(', ')', 'int'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>)', 'int'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>, int)', 'int'),
  \ javaapi#method(0,1,'push(', 'E)', 'void'),
  \ javaapi#method(0,1,'pop(', ')', 'E'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'toArray(', ')', 'Object'),
  \ javaapi#method(0,1,'toArray(', 'T[])', 'T'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ javaapi#method(0,1,'descendingIterator(', ')', 'Iterator'),
  \ ])

call javaapi#class('LinkedBlockingQueue', 'AbstractQueue', [
  \ javaapi#method(0,1,'LinkedBlockingQueue(', ')', ''),
  \ javaapi#method(0,1,'LinkedBlockingQueue(', 'int)', ''),
  \ javaapi#method(0,1,'LinkedBlockingQueue(', 'Collection<? extends E>)', ''),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'remainingCapacity(', ')', 'int'),
  \ javaapi#method(0,1,'put(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'offer(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'offer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', ')', 'E'),
  \ javaapi#method(0,1,'peek(', ')', 'E'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'toArray(', ')', 'Object'),
  \ javaapi#method(0,1,'toArray(', 'T[])', 'T'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>)', 'int'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>, int)', 'int'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ ])

call javaapi#class('LinkedTransferQueue', 'AbstractQueue', [
  \ javaapi#method(0,1,'LinkedTransferQueue(', ')', ''),
  \ javaapi#method(0,1,'LinkedTransferQueue(', 'Collection<? extends E>)', ''),
  \ javaapi#method(0,1,'put(', 'E)', 'void'),
  \ javaapi#method(0,1,'offer(', 'E, long, TimeUnit)', 'boolean'),
  \ javaapi#method(0,1,'offer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'tryTransfer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'transfer(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'tryTransfer(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', ')', 'E'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>)', 'int'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>, int)', 'int'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ javaapi#method(0,1,'peek(', ')', 'E'),
  \ javaapi#method(0,1,'isEmpty(', ')', 'boolean'),
  \ javaapi#method(0,1,'hasWaitingConsumer(', ')', 'boolean'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'getWaitingConsumerCount(', ')', 'int'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'remainingCapacity(', ')', 'int'),
  \ ])

call javaapi#class('Phaser', '', [
  \ javaapi#method(0,1,'Phaser(', ')', ''),
  \ javaapi#method(0,1,'Phaser(', 'int)', ''),
  \ javaapi#method(0,1,'Phaser(', 'Phaser)', ''),
  \ javaapi#method(0,1,'Phaser(', 'Phaser, int)', ''),
  \ javaapi#method(0,1,'register(', ')', 'int'),
  \ javaapi#method(0,1,'bulkRegister(', 'int)', 'int'),
  \ javaapi#method(0,1,'arrive(', ')', 'int'),
  \ javaapi#method(0,1,'arriveAndDeregister(', ')', 'int'),
  \ javaapi#method(0,1,'arriveAndAwaitAdvance(', ')', 'int'),
  \ javaapi#method(0,1,'awaitAdvance(', 'int)', 'int'),
  \ javaapi#method(0,1,'awaitAdvanceInterruptibly(', 'int) throws InterruptedException', 'int'),
  \ javaapi#method(0,1,'awaitAdvanceInterruptibly(', 'int, long, TimeUnit) throws InterruptedException, TimeoutException', 'int'),
  \ javaapi#method(0,1,'forceTermination(', ')', 'void'),
  \ javaapi#method(0,1,'getPhase(', ')', 'int'),
  \ javaapi#method(0,1,'getRegisteredParties(', ')', 'int'),
  \ javaapi#method(0,1,'getArrivedParties(', ')', 'int'),
  \ javaapi#method(0,1,'getUnarrivedParties(', ')', 'int'),
  \ javaapi#method(0,1,'getParent(', ')', 'Phaser'),
  \ javaapi#method(0,1,'getRoot(', ')', 'Phaser'),
  \ javaapi#method(0,1,'isTerminated(', ')', 'boolean'),
  \ javaapi#method(0,0,'onAdvance(', 'int, int)', 'boolean'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('PriorityBlockingQueue', 'AbstractQueue', [
  \ javaapi#method(0,1,'PriorityBlockingQueue(', ')', ''),
  \ javaapi#method(0,1,'PriorityBlockingQueue(', 'int)', ''),
  \ javaapi#method(0,1,'PriorityBlockingQueue(', 'int, Comparator<? super E>)', ''),
  \ javaapi#method(0,1,'PriorityBlockingQueue(', 'Collection<? extends E>)', ''),
  \ javaapi#method(0,1,'add(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'offer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'put(', 'E)', 'void'),
  \ javaapi#method(0,1,'offer(', 'E, long, TimeUnit)', 'boolean'),
  \ javaapi#method(0,1,'poll(', ')', 'E'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'peek(', ')', 'E'),
  \ javaapi#method(0,1,'comparator(', ')', 'E>'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'remainingCapacity(', ')', 'int'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'toArray(', ')', 'Object'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>)', 'int'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>, int)', 'int'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'toArray(', 'T[])', 'T'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ ])

call javaapi#class('RecursiveAction', 'ForkJoinTask', [
  \ javaapi#method(0,1,'RecursiveAction(', ')', ''),
  \ javaapi#method(0,0,'compute(', ')', 'void'),
  \ javaapi#method(0,1,'getRawResult(', ')', 'Void'),
  \ javaapi#method(0,0,'setRawResult(', 'Void)', 'void'),
  \ javaapi#method(0,0,'exec(', ')', 'boolean'),
  \ javaapi#method(0,0,'setRawResult(', 'Object)', 'void'),
  \ javaapi#method(0,1,'getRawResult(', ')', 'Object'),
  \ ])

call javaapi#class('RecursiveTask', 'ForkJoinTask', [
  \ javaapi#method(0,1,'RecursiveTask(', ')', ''),
  \ javaapi#method(0,0,'compute(', ')', 'V'),
  \ javaapi#method(0,1,'getRawResult(', ')', 'V'),
  \ javaapi#method(0,0,'setRawResult(', 'V)', 'void'),
  \ javaapi#method(0,0,'exec(', ')', 'boolean'),
  \ ])

call javaapi#class('RejectedExecutionException', 'RuntimeException', [
  \ javaapi#method(0,1,'RejectedExecutionException(', ')', ''),
  \ javaapi#method(0,1,'RejectedExecutionException(', 'String)', ''),
  \ javaapi#method(0,1,'RejectedExecutionException(', 'String, Throwable)', ''),
  \ javaapi#method(0,1,'RejectedExecutionException(', 'Throwable)', ''),
  \ ])

call javaapi#interface('RejectedExecutionHandler', '', [
  \ javaapi#method(0,1,'rejectedExecution(', 'Runnable, ThreadPoolExecutor)', 'void'),
  \ ])

call javaapi#interface('RunnableFuture', 'Future', [
  \ javaapi#method(0,1,'run(', ')', 'void'),
  \ ])

call javaapi#interface('RunnableScheduledFuture', 'ScheduledFuture<V>', [
  \ javaapi#method(0,1,'isPeriodic(', ')', 'boolean'),
  \ ])

call javaapi#interface('ScheduledExecutorService', 'ExecutorService', [
  \ javaapi#method(0,1,'schedule(', 'Runnable, long, TimeUnit)', 'ScheduledFuture'),
  \ javaapi#method(0,1,'schedule(', 'Callable<V>, long, TimeUnit)', 'ScheduledFuture'),
  \ javaapi#method(0,1,'scheduleAtFixedRate(', 'Runnable, long, long, TimeUnit)', 'ScheduledFuture'),
  \ javaapi#method(0,1,'scheduleWithFixedDelay(', 'Runnable, long, long, TimeUnit)', 'ScheduledFuture'),
  \ ])

call javaapi#interface('ScheduledFuture', 'Future', [
  \ ])

call javaapi#class('ScheduledThreadPoolExecutor', 'ThreadPoolExecutor', [
  \ javaapi#method(0,0,'decorateTask(', 'Runnable, RunnableScheduledFuture<V>)', 'RunnableScheduledFuture'),
  \ javaapi#method(0,0,'decorateTask(', 'Callable<V>, RunnableScheduledFuture<V>)', 'RunnableScheduledFuture'),
  \ javaapi#method(0,1,'ScheduledThreadPoolExecutor(', 'int)', ''),
  \ javaapi#method(0,1,'ScheduledThreadPoolExecutor(', 'int, ThreadFactory)', ''),
  \ javaapi#method(0,1,'ScheduledThreadPoolExecutor(', 'int, RejectedExecutionHandler)', ''),
  \ javaapi#method(0,1,'ScheduledThreadPoolExecutor(', 'int, ThreadFactory, RejectedExecutionHandler)', ''),
  \ javaapi#method(0,1,'schedule(', 'Runnable, long, TimeUnit)', 'ScheduledFuture'),
  \ javaapi#method(0,1,'schedule(', 'Callable<V>, long, TimeUnit)', 'ScheduledFuture'),
  \ javaapi#method(0,1,'scheduleAtFixedRate(', 'Runnable, long, long, TimeUnit)', 'ScheduledFuture'),
  \ javaapi#method(0,1,'scheduleWithFixedDelay(', 'Runnable, long, long, TimeUnit)', 'ScheduledFuture'),
  \ javaapi#method(0,1,'execute(', 'Runnable)', 'void'),
  \ javaapi#method(0,1,'submit(', 'Runnable)', 'Future'),
  \ javaapi#method(0,1,'submit(', 'Runnable, T)', 'Future'),
  \ javaapi#method(0,1,'submit(', 'Callable<T>)', 'Future'),
  \ javaapi#method(0,1,'setContinueExistingPeriodicTasksAfterShutdownPolicy(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getContinueExistingPeriodicTasksAfterShutdownPolicy(', ')', 'boolean'),
  \ javaapi#method(0,1,'setExecuteExistingDelayedTasksAfterShutdownPolicy(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getExecuteExistingDelayedTasksAfterShutdownPolicy(', ')', 'boolean'),
  \ javaapi#method(0,1,'setRemoveOnCancelPolicy(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'getRemoveOnCancelPolicy(', ')', 'boolean'),
  \ javaapi#method(0,1,'shutdown(', ')', 'void'),
  \ javaapi#method(0,1,'shutdownNow(', ')', 'List'),
  \ javaapi#method(0,1,'getQueue(', ')', 'BlockingQueue'),
  \ ])

call javaapi#class('Semaphore', 'Serializable', [
  \ javaapi#method(0,1,'Semaphore(', 'int)', ''),
  \ javaapi#method(0,1,'Semaphore(', 'int, boolean)', ''),
  \ javaapi#method(0,1,'acquire(', ') throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'acquireUninterruptibly(', ')', 'void'),
  \ javaapi#method(0,1,'tryAcquire(', ')', 'boolean'),
  \ javaapi#method(0,1,'tryAcquire(', 'long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'release(', ')', 'void'),
  \ javaapi#method(0,1,'acquire(', 'int) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'acquireUninterruptibly(', 'int)', 'void'),
  \ javaapi#method(0,1,'tryAcquire(', 'int)', 'boolean'),
  \ javaapi#method(0,1,'tryAcquire(', 'int, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'release(', 'int)', 'void'),
  \ javaapi#method(0,1,'availablePermits(', ')', 'int'),
  \ javaapi#method(0,1,'drainPermits(', ')', 'int'),
  \ javaapi#method(0,0,'reducePermits(', 'int)', 'void'),
  \ javaapi#method(0,1,'isFair(', ')', 'boolean'),
  \ javaapi#method(0,1,'hasQueuedThreads(', ')', 'boolean'),
  \ javaapi#method(0,1,'getQueueLength(', ')', 'int'),
  \ javaapi#method(0,0,'getQueuedThreads(', ')', 'Collection'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ ])

call javaapi#class('SynchronousQueue', 'AbstractQueue', [
  \ javaapi#method(0,1,'SynchronousQueue(', ')', ''),
  \ javaapi#method(0,1,'SynchronousQueue(', 'boolean)', ''),
  \ javaapi#method(0,1,'put(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'offer(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'offer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'take(', ') throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', 'long, TimeUnit) throws InterruptedException', 'E'),
  \ javaapi#method(0,1,'poll(', ')', 'E'),
  \ javaapi#method(0,1,'isEmpty(', ')', 'boolean'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'remainingCapacity(', ')', 'int'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'containsAll(', 'Collection<?>)', 'boolean'),
  \ javaapi#method(0,1,'removeAll(', 'Collection<?>)', 'boolean'),
  \ javaapi#method(0,1,'retainAll(', 'Collection<?>)', 'boolean'),
  \ javaapi#method(0,1,'peek(', ')', 'E'),
  \ javaapi#method(0,1,'iterator(', ')', 'Iterator'),
  \ javaapi#method(0,1,'toArray(', ')', 'Object'),
  \ javaapi#method(0,1,'toArray(', 'T[])', 'T'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>)', 'int'),
  \ javaapi#method(0,1,'drainTo(', 'Collection<? super E>, int)', 'int'),
  \ ])

call javaapi#interface('ThreadFactory', '', [
  \ javaapi#method(0,1,'newThread(', 'Runnable)', 'Thread'),
  \ ])

call javaapi#class('ThreadLocalRandom', 'Random', [
  \ javaapi#method(1,1,'current(', ')', 'ThreadLocalRandom'),
  \ javaapi#method(0,1,'setSeed(', 'long)', 'void'),
  \ javaapi#method(0,0,'next(', 'int)', 'int'),
  \ javaapi#method(0,1,'nextInt(', 'int, int)', 'int'),
  \ javaapi#method(0,1,'nextLong(', 'long)', 'long'),
  \ javaapi#method(0,1,'nextLong(', 'long, long)', 'long'),
  \ javaapi#method(0,1,'nextDouble(', 'double)', 'double'),
  \ javaapi#method(0,1,'nextDouble(', 'double, double)', 'double'),
  \ ])

call javaapi#class('ThreadPoolExecutor', 'AbstractExecutorService', [
  \ javaapi#method(0,1,'ThreadPoolExecutor(', 'int, int, long, TimeUnit, BlockingQueue<Runnable>)', ''),
  \ javaapi#method(0,1,'ThreadPoolExecutor(', 'int, int, long, TimeUnit, BlockingQueue<Runnable>, ThreadFactory)', ''),
  \ javaapi#method(0,1,'ThreadPoolExecutor(', 'int, int, long, TimeUnit, BlockingQueue<Runnable>, RejectedExecutionHandler)', ''),
  \ javaapi#method(0,1,'ThreadPoolExecutor(', 'int, int, long, TimeUnit, BlockingQueue<Runnable>, ThreadFactory, RejectedExecutionHandler)', ''),
  \ javaapi#method(0,1,'execute(', 'Runnable)', 'void'),
  \ javaapi#method(0,1,'shutdown(', ')', 'void'),
  \ javaapi#method(0,1,'shutdownNow(', ')', 'List'),
  \ javaapi#method(0,1,'isShutdown(', ')', 'boolean'),
  \ javaapi#method(0,1,'isTerminating(', ')', 'boolean'),
  \ javaapi#method(0,1,'isTerminated(', ')', 'boolean'),
  \ javaapi#method(0,1,'awaitTermination(', 'long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,0,'finalize(', ')', 'void'),
  \ javaapi#method(0,1,'setThreadFactory(', 'ThreadFactory)', 'void'),
  \ javaapi#method(0,1,'getThreadFactory(', ')', 'ThreadFactory'),
  \ javaapi#method(0,1,'setRejectedExecutionHandler(', 'RejectedExecutionHandler)', 'void'),
  \ javaapi#method(0,1,'getRejectedExecutionHandler(', ')', 'RejectedExecutionHandler'),
  \ javaapi#method(0,1,'setCorePoolSize(', 'int)', 'void'),
  \ javaapi#method(0,1,'getCorePoolSize(', ')', 'int'),
  \ javaapi#method(0,1,'prestartCoreThread(', ')', 'boolean'),
  \ javaapi#method(0,1,'prestartAllCoreThreads(', ')', 'int'),
  \ javaapi#method(0,1,'allowsCoreThreadTimeOut(', ')', 'boolean'),
  \ javaapi#method(0,1,'allowCoreThreadTimeOut(', 'boolean)', 'void'),
  \ javaapi#method(0,1,'setMaximumPoolSize(', 'int)', 'void'),
  \ javaapi#method(0,1,'getMaximumPoolSize(', ')', 'int'),
  \ javaapi#method(0,1,'setKeepAliveTime(', 'long, TimeUnit)', 'void'),
  \ javaapi#method(0,1,'getKeepAliveTime(', 'TimeUnit)', 'long'),
  \ javaapi#method(0,1,'getQueue(', ')', 'BlockingQueue'),
  \ javaapi#method(0,1,'remove(', 'Runnable)', 'boolean'),
  \ javaapi#method(0,1,'purge(', ')', 'void'),
  \ javaapi#method(0,1,'getPoolSize(', ')', 'int'),
  \ javaapi#method(0,1,'getActiveCount(', ')', 'int'),
  \ javaapi#method(0,1,'getLargestPoolSize(', ')', 'int'),
  \ javaapi#method(0,1,'getTaskCount(', ')', 'long'),
  \ javaapi#method(0,1,'getCompletedTaskCount(', ')', 'long'),
  \ javaapi#method(0,1,'toString(', ')', 'String'),
  \ javaapi#method(0,0,'beforeExecute(', 'Thread, Runnable)', 'void'),
  \ javaapi#method(0,0,'afterExecute(', 'Runnable, Throwable)', 'void'),
  \ javaapi#method(0,0,'terminated(', ')', 'void'),
  \ ])

call javaapi#class('TimeUnit', 'Enum', [
  \ javaapi#field(1,1,'NANOSECONDS', 'TimeUnit'),
  \ javaapi#field(1,1,'MICROSECONDS', 'TimeUnit'),
  \ javaapi#field(1,1,'MILLISECONDS', 'TimeUnit'),
  \ javaapi#field(1,1,'SECONDS', 'TimeUnit'),
  \ javaapi#field(1,1,'MINUTES', 'TimeUnit'),
  \ javaapi#field(1,1,'HOURS', 'TimeUnit'),
  \ javaapi#field(1,1,'DAYS', 'TimeUnit'),
  \ javaapi#method(1,1,'values(', ')', 'TimeUnit'),
  \ javaapi#method(1,1,'valueOf(', 'String)', 'TimeUnit'),
  \ javaapi#method(0,1,'convert(', 'long, TimeUnit)', 'long'),
  \ javaapi#method(0,1,'toNanos(', 'long)', 'long'),
  \ javaapi#method(0,1,'toMicros(', 'long)', 'long'),
  \ javaapi#method(0,1,'toMillis(', 'long)', 'long'),
  \ javaapi#method(0,1,'toSeconds(', 'long)', 'long'),
  \ javaapi#method(0,1,'toMinutes(', 'long)', 'long'),
  \ javaapi#method(0,1,'toHours(', 'long)', 'long'),
  \ javaapi#method(0,1,'toDays(', 'long)', 'long'),
  \ javaapi#method(0,1,'timedWait(', 'Object, long) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'timedJoin(', 'Thread, long) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'sleep(', 'long) throws InterruptedException', 'void'),
  \ ])

call javaapi#class('TimeoutException', 'Exception', [
  \ javaapi#method(0,1,'TimeoutException(', ')', ''),
  \ javaapi#method(0,1,'TimeoutException(', 'String)', ''),
  \ ])

call javaapi#interface('TransferQueue', 'BlockingQueue', [
  \ javaapi#method(0,1,'tryTransfer(', 'E)', 'boolean'),
  \ javaapi#method(0,1,'transfer(', 'E) throws InterruptedException', 'void'),
  \ javaapi#method(0,1,'tryTransfer(', 'E, long, TimeUnit) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,1,'hasWaitingConsumer(', ')', 'boolean'),
  \ javaapi#method(0,1,'getWaitingConsumerCount(', ')', 'int'),
  \ ])

call javaapi#namespace('java.util.concurrent')

call javaapi#interface('ConcurrentMap', 'Map', [
  \ javaapi#method(0,1,'putIfAbsent(', 'K, V)', 'V'),
  \ javaapi#method(0,1,'remove(', 'Object, Object)', 'boolean'),
  \ javaapi#method(0,1,'replace(', 'K, V, V)', 'boolean'),
  \ javaapi#method(0,1,'replace(', 'K, V)', 'V'),
  \ ])

call javaapi#class('ConcurrentHashMap', 'AbstractMap', [
  \ javaapi#method(0,1,'ConcurrentHashMap(', 'int, float, int)', ''),
  \ javaapi#method(0,1,'ConcurrentHashMap(', 'int, float)', ''),
  \ javaapi#method(0,1,'ConcurrentHashMap(', 'int)', ''),
  \ javaapi#method(0,1,'ConcurrentHashMap(', ')', ''),
  \ javaapi#method(0,1,'ConcurrentHashMap(', 'Map<? extends K, ? extends V>)', ''),
  \ javaapi#method(0,1,'isEmpty(', ')', 'boolean'),
  \ javaapi#method(0,1,'size(', ')', 'int'),
  \ javaapi#method(0,1,'get(', 'Object)', 'V'),
  \ javaapi#method(0,1,'containsKey(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'containsValue(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'contains(', 'Object)', 'boolean'),
  \ javaapi#method(0,1,'put(', 'K, V)', 'V'),
  \ javaapi#method(0,1,'putIfAbsent(', 'K, V)', 'V'),
  \ javaapi#method(0,1,'putAll(', 'Map<? extends K, ? extends V>)', 'void'),
  \ javaapi#method(0,1,'remove(', 'Object)', 'V'),
  \ javaapi#method(0,1,'remove(', 'Object, Object)', 'boolean'),
  \ javaapi#method(0,1,'replace(', 'K, V, V)', 'boolean'),
  \ javaapi#method(0,1,'replace(', 'K, V)', 'V'),
  \ javaapi#method(0,1,'clear(', ')', 'void'),
  \ javaapi#method(0,1,'keySet(', ')', 'Set'),
  \ javaapi#method(0,1,'values(', ')', 'Collection'),
  \ javaapi#method(0,1,'entrySet(', ')', 'V>>'),
  \ javaapi#method(0,1,'keys(', ')', 'Enumeration'),
  \ javaapi#method(0,1,'elements(', ')', 'Enumeration'),
  \ ])

